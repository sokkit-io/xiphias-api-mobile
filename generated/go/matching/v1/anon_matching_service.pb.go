// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: matching/v1/anon_matching_service.proto

package matching

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	v12 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v1"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v11 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/payment/v1"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/matching/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FindChatPartnerResponse_Result int32

const (
	// Chat partner immediately found and will be returned with this response
	FindChatPartnerResponse_PARTNER_FOUND FindChatPartnerResponse_Result = 0
	// Chat partner not found (yet), user has been put in queue
	FindChatPartnerResponse_IN_QUEUE FindChatPartnerResponse_Result = 1
	// The rejected response is a general rejection status that encompasses any rejections not covered by
	// other REJECTED_* result codes, such as too many active chat sessions,
	// or Bouncer rejections (spam analysis)
	// If the user is in the queue already his requested is updated but not rejected
	FindChatPartnerResponse_REJECTED FindChatPartnerResponse_Result = 2
	// User has exceeded their daily limit of sessions
	FindChatPartnerResponse_REJECTED_NO_REMAINING_SESSIONS FindChatPartnerResponse_Result = 3
	// User is temporarily banned for bad behavior
	FindChatPartnerResponse_REJECTED_TEMPORARILY_BANNED FindChatPartnerResponse_Result = 4
)

// Enum value maps for FindChatPartnerResponse_Result.
var (
	FindChatPartnerResponse_Result_name = map[int32]string{
		0: "PARTNER_FOUND",
		1: "IN_QUEUE",
		2: "REJECTED",
		3: "REJECTED_NO_REMAINING_SESSIONS",
		4: "REJECTED_TEMPORARILY_BANNED",
	}
	FindChatPartnerResponse_Result_value = map[string]int32{
		"PARTNER_FOUND":                  0,
		"IN_QUEUE":                       1,
		"REJECTED":                       2,
		"REJECTED_NO_REMAINING_SESSIONS": 3,
		"REJECTED_TEMPORARILY_BANNED":    4,
	}
)

func (x FindChatPartnerResponse_Result) Enum() *FindChatPartnerResponse_Result {
	p := new(FindChatPartnerResponse_Result)
	*p = x
	return p
}

func (x FindChatPartnerResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindChatPartnerResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[0].Descriptor()
}

func (FindChatPartnerResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[0]
}

func (x FindChatPartnerResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindChatPartnerResponse_Result.Descriptor instead.
func (FindChatPartnerResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{1, 0}
}

type CancelFindChatPartnerResponse_Result int32

const (
	// Find chat session request successfully cancelled
	CancelFindChatPartnerResponse_OK CancelFindChatPartnerResponse_Result = 0
	// Chat session has already been created, the session will not be cancelled,
	// details will be included in the same way that clients
	// waiting after a FindChatSessionResponse.Result.IN_QUEUE receive them
	CancelFindChatPartnerResponse_SESSION_ALREADY_CREATED CancelFindChatPartnerResponse_Result = 1
)

// Enum value maps for CancelFindChatPartnerResponse_Result.
var (
	CancelFindChatPartnerResponse_Result_name = map[int32]string{
		0: "OK",
		1: "SESSION_ALREADY_CREATED",
	}
	CancelFindChatPartnerResponse_Result_value = map[string]int32{
		"OK":                      0,
		"SESSION_ALREADY_CREATED": 1,
	}
)

func (x CancelFindChatPartnerResponse_Result) Enum() *CancelFindChatPartnerResponse_Result {
	p := new(CancelFindChatPartnerResponse_Result)
	*p = x
	return p
}

func (x CancelFindChatPartnerResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelFindChatPartnerResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[1].Descriptor()
}

func (CancelFindChatPartnerResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[1]
}

func (x CancelFindChatPartnerResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelFindChatPartnerResponse_Result.Descriptor instead.
func (CancelFindChatPartnerResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetChatSessionResponse_Result int32

const (
	// Chat session found, details will be provided.
	GetChatSessionResponse_OK GetChatSessionResponse_Result = 0
	// Chat session not found.  Either invalid id or session already cleaned up.
	GetChatSessionResponse_NOT_FOUND GetChatSessionResponse_Result = 1
)

// Enum value maps for GetChatSessionResponse_Result.
var (
	GetChatSessionResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetChatSessionResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetChatSessionResponse_Result) Enum() *GetChatSessionResponse_Result {
	p := new(GetChatSessionResponse_Result)
	*p = x
	return p
}

func (x GetChatSessionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatSessionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[2].Descriptor()
}

func (GetChatSessionResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[2]
}

func (x GetChatSessionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatSessionResponse_Result.Descriptor instead.
func (GetChatSessionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{5, 0}
}

// This corresponds to the smilies that users click to rate chats
type ChatSessionRating_SmileyChatRating int32

const (
	ChatSessionRating_MAD_FACE              ChatSessionRating_SmileyChatRating = 0
	ChatSessionRating_SAD_FACE              ChatSessionRating_SmileyChatRating = 1
	ChatSessionRating_NEUTRAL_FACE          ChatSessionRating_SmileyChatRating = 2
	ChatSessionRating_HAPPY_FACE            ChatSessionRating_SmileyChatRating = 3
	ChatSessionRating_OPEN_MOUTH_HAPPY_FACE ChatSessionRating_SmileyChatRating = 4
)

// Enum value maps for ChatSessionRating_SmileyChatRating.
var (
	ChatSessionRating_SmileyChatRating_name = map[int32]string{
		0: "MAD_FACE",
		1: "SAD_FACE",
		2: "NEUTRAL_FACE",
		3: "HAPPY_FACE",
		4: "OPEN_MOUTH_HAPPY_FACE",
	}
	ChatSessionRating_SmileyChatRating_value = map[string]int32{
		"MAD_FACE":              0,
		"SAD_FACE":              1,
		"NEUTRAL_FACE":          2,
		"HAPPY_FACE":            3,
		"OPEN_MOUTH_HAPPY_FACE": 4,
	}
)

func (x ChatSessionRating_SmileyChatRating) Enum() *ChatSessionRating_SmileyChatRating {
	p := new(ChatSessionRating_SmileyChatRating)
	*p = x
	return p
}

func (x ChatSessionRating_SmileyChatRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatSessionRating_SmileyChatRating) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[3].Descriptor()
}

func (ChatSessionRating_SmileyChatRating) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[3]
}

func (x ChatSessionRating_SmileyChatRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatSessionRating_SmileyChatRating.Descriptor instead.
func (ChatSessionRating_SmileyChatRating) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{7, 0}
}

type RateChatSessionResponse_Result int32

const (
	// Rating logged
	RateChatSessionResponse_OK RateChatSessionResponse_Result = 0
	// Chat session not found or expired.  Clients should not retry this.
	RateChatSessionResponse_NOT_FOUND RateChatSessionResponse_Result = 1
)

// Enum value maps for RateChatSessionResponse_Result.
var (
	RateChatSessionResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	RateChatSessionResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x RateChatSessionResponse_Result) Enum() *RateChatSessionResponse_Result {
	p := new(RateChatSessionResponse_Result)
	*p = x
	return p
}

func (x RateChatSessionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateChatSessionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[4].Descriptor()
}

func (RateChatSessionResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[4]
}

func (x RateChatSessionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateChatSessionResponse_Result.Descriptor instead.
func (RateChatSessionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{8, 0}
}

type EndChatSessionResponse_Result int32

const (
	EndChatSessionResponse_OK EndChatSessionResponse_Result = 0
)

// Enum value maps for EndChatSessionResponse_Result.
var (
	EndChatSessionResponse_Result_name = map[int32]string{
		0: "OK",
	}
	EndChatSessionResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x EndChatSessionResponse_Result) Enum() *EndChatSessionResponse_Result {
	p := new(EndChatSessionResponse_Result)
	*p = x
	return p
}

func (x EndChatSessionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndChatSessionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[5].Descriptor()
}

func (EndChatSessionResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[5]
}

func (x EndChatSessionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndChatSessionResponse_Result.Descriptor instead.
func (EndChatSessionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{10, 0}
}

type GetRemainingAnonChatsResponse_Result int32

const (
	GetRemainingAnonChatsResponse_OK GetRemainingAnonChatsResponse_Result = 0
)

// Enum value maps for GetRemainingAnonChatsResponse_Result.
var (
	GetRemainingAnonChatsResponse_Result_name = map[int32]string{
		0: "OK",
	}
	GetRemainingAnonChatsResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x GetRemainingAnonChatsResponse_Result) Enum() *GetRemainingAnonChatsResponse_Result {
	p := new(GetRemainingAnonChatsResponse_Result)
	*p = x
	return p
}

func (x GetRemainingAnonChatsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRemainingAnonChatsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[6].Descriptor()
}

func (GetRemainingAnonChatsResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[6]
}

func (x GetRemainingAnonChatsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRemainingAnonChatsResponse_Result.Descriptor instead.
func (GetRemainingAnonChatsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{12, 0}
}

type InitiateFriendingResponse_Result int32

const (
	// Friending has been initiated successfully
	InitiateFriendingResponse_OK InitiateFriendingResponse_Result = 0
)

// Enum value maps for InitiateFriendingResponse_Result.
var (
	InitiateFriendingResponse_Result_name = map[int32]string{
		0: "OK",
	}
	InitiateFriendingResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x InitiateFriendingResponse_Result) Enum() *InitiateFriendingResponse_Result {
	p := new(InitiateFriendingResponse_Result)
	*p = x
	return p
}

func (x InitiateFriendingResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitiateFriendingResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[7].Descriptor()
}

func (InitiateFriendingResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[7]
}

func (x InitiateFriendingResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitiateFriendingResponse_Result.Descriptor instead.
func (InitiateFriendingResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{14, 0}
}

type SubmitUserGeneratedInterestResponse_Result int32

const (
	SubmitUserGeneratedInterestResponse_OK           SubmitUserGeneratedInterestResponse_Result = 0
	SubmitUserGeneratedInterestResponse_RATE_LIMITED SubmitUserGeneratedInterestResponse_Result = 1
)

// Enum value maps for SubmitUserGeneratedInterestResponse_Result.
var (
	SubmitUserGeneratedInterestResponse_Result_name = map[int32]string{
		0: "OK",
		1: "RATE_LIMITED",
	}
	SubmitUserGeneratedInterestResponse_Result_value = map[string]int32{
		"OK":           0,
		"RATE_LIMITED": 1,
	}
)

func (x SubmitUserGeneratedInterestResponse_Result) Enum() *SubmitUserGeneratedInterestResponse_Result {
	p := new(SubmitUserGeneratedInterestResponse_Result)
	*p = x
	return p
}

func (x SubmitUserGeneratedInterestResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitUserGeneratedInterestResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v1_anon_matching_service_proto_enumTypes[8].Descriptor()
}

func (SubmitUserGeneratedInterestResponse_Result) Type() protoreflect.EnumType {
	return &file_matching_v1_anon_matching_service_proto_enumTypes[8]
}

func (x SubmitUserGeneratedInterestResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitUserGeneratedInterestResponse_Result.Descriptor instead.
func (SubmitUserGeneratedInterestResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{16, 0}
}

// If the user already has an ongoing search in the queue, it will be updated
// by sending another FindChatPartnerRequest. It is considered normal behaviour and
// no exception or warning or special status code is returned
type FindChatPartnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If no interests are included in this request, this is considered a "quick chat",
	// and users will be matched with anyone.
	Interests []*ChatInterest `protobuf:"bytes,1,rep,name=interests,proto3" json:"interests,omitempty"`
	// Matching Variant defines the queue to search a partner.
	// If a value is not provided, the default queue will be used.
	// For certain whitelisted accounts (QA accounts), a different queue is used.
	// Providing a value for matching_variant will override any other default queue setting.
	MatchingVariant string `protobuf:"bytes,2,opt,name=matching_variant,json=matchingVariant,proto3" json:"matching_variant,omitempty"`
}

func (x *FindChatPartnerRequest) Reset() {
	*x = FindChatPartnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindChatPartnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindChatPartnerRequest) ProtoMessage() {}

func (x *FindChatPartnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindChatPartnerRequest.ProtoReflect.Descriptor instead.
func (*FindChatPartnerRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{0}
}

func (x *FindChatPartnerRequest) GetInterests() []*ChatInterest {
	if x != nil {
		return x.Interests
	}
	return nil
}

func (x *FindChatPartnerRequest) GetMatchingVariant() string {
	if x != nil {
		return x.MatchingVariant
	}
	return ""
}

type FindChatPartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result FindChatPartnerResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.FindChatPartnerResponse_Result" json:"result,omitempty"`
	// The optional id of the request, can be used to cancel this request if in queue
	// Will not be present unless result = (PARTNER_FOUND or IN_QUEUE)
	FindChatRequestId *_go.XiUuid `protobuf:"bytes,2,opt,name=find_chat_request_id,json=findChatRequestId,proto3" json:"find_chat_request_id,omitempty"`
	// optional, will only be present if result = PARTNER_FOUND
	SessionDetails *SessionDetails `protobuf:"bytes,3,opt,name=session_details,json=sessionDetails,proto3" json:"session_details,omitempty"`
	// In case of a rejection, this is the (UTC) timestamp of when the user
	// will be allowed to return and request a new anon-chat.
	//
	// Will only be present if the rejection is for any reason that can expire
	// such as REJECTED_NO_REMAINING_SESSIONS or REJECTED_TEMPORARILY_BANNED
	RejectedExpiryTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=rejected_expiry_time,json=rejectedExpiryTime,proto3" json:"rejected_expiry_time,omitempty"`
}

func (x *FindChatPartnerResponse) Reset() {
	*x = FindChatPartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindChatPartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindChatPartnerResponse) ProtoMessage() {}

func (x *FindChatPartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindChatPartnerResponse.ProtoReflect.Descriptor instead.
func (*FindChatPartnerResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{1}
}

func (x *FindChatPartnerResponse) GetResult() FindChatPartnerResponse_Result {
	if x != nil {
		return x.Result
	}
	return FindChatPartnerResponse_PARTNER_FOUND
}

func (x *FindChatPartnerResponse) GetFindChatRequestId() *_go.XiUuid {
	if x != nil {
		return x.FindChatRequestId
	}
	return nil
}

func (x *FindChatPartnerResponse) GetSessionDetails() *SessionDetails {
	if x != nil {
		return x.SessionDetails
	}
	return nil
}

func (x *FindChatPartnerResponse) GetRejectedExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.RejectedExpiryTime
	}
	return nil
}

type CancelFindChatPartnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id that was returned by the FindChatPartnerResponse should be used here to cancel the request
	FindChatRequestId *_go.XiUuid `protobuf:"bytes,1,opt,name=find_chat_request_id,json=findChatRequestId,proto3" json:"find_chat_request_id,omitempty"`
}

func (x *CancelFindChatPartnerRequest) Reset() {
	*x = CancelFindChatPartnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelFindChatPartnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelFindChatPartnerRequest) ProtoMessage() {}

func (x *CancelFindChatPartnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelFindChatPartnerRequest.ProtoReflect.Descriptor instead.
func (*CancelFindChatPartnerRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{2}
}

func (x *CancelFindChatPartnerRequest) GetFindChatRequestId() *_go.XiUuid {
	if x != nil {
		return x.FindChatRequestId
	}
	return nil
}

type CancelFindChatPartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CancelFindChatPartnerResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.CancelFindChatPartnerResponse_Result" json:"result,omitempty"`
}

func (x *CancelFindChatPartnerResponse) Reset() {
	*x = CancelFindChatPartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelFindChatPartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelFindChatPartnerResponse) ProtoMessage() {}

func (x *CancelFindChatPartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelFindChatPartnerResponse.ProtoReflect.Descriptor instead.
func (*CancelFindChatPartnerResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{3}
}

func (x *CancelFindChatPartnerResponse) GetResult() CancelFindChatPartnerResponse_Result {
	if x != nil {
		return x.Result
	}
	return CancelFindChatPartnerResponse_OK
}

type GetChatSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey *v1.AnonMatchingSessionKey `protobuf:"bytes,1,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
}

func (x *GetChatSessionRequest) Reset() {
	*x = GetChatSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatSessionRequest) ProtoMessage() {}

func (x *GetChatSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatSessionRequest.ProtoReflect.Descriptor instead.
func (*GetChatSessionRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetChatSessionRequest) GetSessionKey() *v1.AnonMatchingSessionKey {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

type GetChatSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatSessionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.GetChatSessionResponse_Result" json:"result,omitempty"`
	// Will only be present if Result = OK
	SessionDetails *SessionDetails `protobuf:"bytes,2,opt,name=session_details,json=sessionDetails,proto3" json:"session_details,omitempty"`
}

func (x *GetChatSessionResponse) Reset() {
	*x = GetChatSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatSessionResponse) ProtoMessage() {}

func (x *GetChatSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatSessionResponse.ProtoReflect.Descriptor instead.
func (*GetChatSessionResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetChatSessionResponse) GetResult() GetChatSessionResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatSessionResponse_OK
}

func (x *GetChatSessionResponse) GetSessionDetails() *SessionDetails {
	if x != nil {
		return x.SessionDetails
	}
	return nil
}

type RateChatSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chat session key
	SessionKey *v1.AnonMatchingSessionKey `protobuf:"bytes,1,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	// How the user has rated this session
	ChatRating *ChatSessionRating `protobuf:"bytes,2,opt,name=chat_rating,json=chatRating,proto3" json:"chat_rating,omitempty"`
}

func (x *RateChatSessionRequest) Reset() {
	*x = RateChatSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateChatSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateChatSessionRequest) ProtoMessage() {}

func (x *RateChatSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateChatSessionRequest.ProtoReflect.Descriptor instead.
func (*RateChatSessionRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{6}
}

func (x *RateChatSessionRequest) GetSessionKey() *v1.AnonMatchingSessionKey {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *RateChatSessionRequest) GetChatRating() *ChatSessionRating {
	if x != nil {
		return x.ChatRating
	}
	return nil
}

type ChatSessionRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rating provided by the user.
	Rating ChatSessionRating_SmileyChatRating `protobuf:"varint,1,opt,name=rating,proto3,enum=mobile.matching.v1.ChatSessionRating_SmileyChatRating" json:"rating,omitempty"`
}

func (x *ChatSessionRating) Reset() {
	*x = ChatSessionRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSessionRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSessionRating) ProtoMessage() {}

func (x *ChatSessionRating) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSessionRating.ProtoReflect.Descriptor instead.
func (*ChatSessionRating) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{7}
}

func (x *ChatSessionRating) GetRating() ChatSessionRating_SmileyChatRating {
	if x != nil {
		return x.Rating
	}
	return ChatSessionRating_MAD_FACE
}

type RateChatSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RateChatSessionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.RateChatSessionResponse_Result" json:"result,omitempty"`
}

func (x *RateChatSessionResponse) Reset() {
	*x = RateChatSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateChatSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateChatSessionResponse) ProtoMessage() {}

func (x *RateChatSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateChatSessionResponse.ProtoReflect.Descriptor instead.
func (*RateChatSessionResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{8}
}

func (x *RateChatSessionResponse) GetResult() RateChatSessionResponse_Result {
	if x != nil {
		return x.Result
	}
	return RateChatSessionResponse_OK
}

type EndChatSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey *v1.AnonMatchingSessionKey `protobuf:"bytes,1,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	// If true, the user is choosing to skip the session before they have started chatting,
	// their chat is counted towards their daily chat total, but the other participant that
	// is being skipped, won't be counted.
	// This is only available for iOS expanded profile sessions
	SkipChat bool `protobuf:"varint,2,opt,name=skip_chat,json=skipChat,proto3" json:"skip_chat,omitempty"`
}

func (x *EndChatSessionRequest) Reset() {
	*x = EndChatSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndChatSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndChatSessionRequest) ProtoMessage() {}

func (x *EndChatSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndChatSessionRequest.ProtoReflect.Descriptor instead.
func (*EndChatSessionRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{9}
}

func (x *EndChatSessionRequest) GetSessionKey() *v1.AnonMatchingSessionKey {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *EndChatSessionRequest) GetSkipChat() bool {
	if x != nil {
		return x.SkipChat
	}
	return false
}

type EndChatSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result EndChatSessionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.EndChatSessionResponse_Result" json:"result,omitempty"`
}

func (x *EndChatSessionResponse) Reset() {
	*x = EndChatSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndChatSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndChatSessionResponse) ProtoMessage() {}

func (x *EndChatSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndChatSessionResponse.ProtoReflect.Descriptor instead.
func (*EndChatSessionResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{10}
}

func (x *EndChatSessionResponse) GetResult() EndChatSessionResponse_Result {
	if x != nil {
		return x.Result
	}
	return EndChatSessionResponse_OK
}

type GetRemainingAnonChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRemainingAnonChatsRequest) Reset() {
	*x = GetRemainingAnonChatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemainingAnonChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemainingAnonChatsRequest) ProtoMessage() {}

func (x *GetRemainingAnonChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemainingAnonChatsRequest.ProtoReflect.Descriptor instead.
func (*GetRemainingAnonChatsRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{11}
}

type GetRemainingAnonChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetRemainingAnonChatsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.GetRemainingAnonChatsResponse_Result" json:"result,omitempty"`
	// The number of chats remaining in a (configurable) time period.
	RemainingChats int32 `protobuf:"varint,2,opt,name=remaining_chats,json=remainingChats,proto3" json:"remaining_chats,omitempty"`
}

func (x *GetRemainingAnonChatsResponse) Reset() {
	*x = GetRemainingAnonChatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemainingAnonChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemainingAnonChatsResponse) ProtoMessage() {}

func (x *GetRemainingAnonChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemainingAnonChatsResponse.ProtoReflect.Descriptor instead.
func (*GetRemainingAnonChatsResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetRemainingAnonChatsResponse) GetResult() GetRemainingAnonChatsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetRemainingAnonChatsResponse_OK
}

func (x *GetRemainingAnonChatsResponse) GetRemainingChats() int32 {
	if x != nil {
		return x.RemainingChats
	}
	return 0
}

// The caller's userJid will be in the request, and must be part of the associated session, else error
type InitiateFriendingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey *v1.AnonMatchingSessionKey `protobuf:"bytes,1,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
}

func (x *InitiateFriendingRequest) Reset() {
	*x = InitiateFriendingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateFriendingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateFriendingRequest) ProtoMessage() {}

func (x *InitiateFriendingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateFriendingRequest.ProtoReflect.Descriptor instead.
func (*InitiateFriendingRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{13}
}

func (x *InitiateFriendingRequest) GetSessionKey() *v1.AnonMatchingSessionKey {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

type InitiateFriendingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result InitiateFriendingResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.InitiateFriendingResponse_Result" json:"result,omitempty"`
}

func (x *InitiateFriendingResponse) Reset() {
	*x = InitiateFriendingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateFriendingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateFriendingResponse) ProtoMessage() {}

func (x *InitiateFriendingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateFriendingResponse.ProtoReflect.Descriptor instead.
func (*InitiateFriendingResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{14}
}

func (x *InitiateFriendingResponse) GetResult() InitiateFriendingResponse_Result {
	if x != nil {
		return x.Result
	}
	return InitiateFriendingResponse_OK
}

// Users send this to submit a new interest
// Send the text in exactly as the user typed it, including white space
type SubmitUserGeneratedInterestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interest string `protobuf:"bytes,1,opt,name=interest,proto3" json:"interest,omitempty"`
}

func (x *SubmitUserGeneratedInterestRequest) Reset() {
	*x = SubmitUserGeneratedInterestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitUserGeneratedInterestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitUserGeneratedInterestRequest) ProtoMessage() {}

func (x *SubmitUserGeneratedInterestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitUserGeneratedInterestRequest.ProtoReflect.Descriptor instead.
func (*SubmitUserGeneratedInterestRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{15}
}

func (x *SubmitUserGeneratedInterestRequest) GetInterest() string {
	if x != nil {
		return x.Interest
	}
	return ""
}

// Users receive this response after submitting a new interest
// OK means the request was received without error
// It does not mean the interest was approved by moderation or it
// will be trending anytime soon
// RATE_LIMITED means the user has submitted too many interests recently
// and should wait before trying again
type SubmitUserGeneratedInterestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SubmitUserGeneratedInterestResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.matching.v1.SubmitUserGeneratedInterestResponse_Result" json:"result,omitempty"`
}

func (x *SubmitUserGeneratedInterestResponse) Reset() {
	*x = SubmitUserGeneratedInterestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitUserGeneratedInterestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitUserGeneratedInterestResponse) ProtoMessage() {}

func (x *SubmitUserGeneratedInterestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitUserGeneratedInterestResponse.ProtoReflect.Descriptor instead.
func (*SubmitUserGeneratedInterestResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{16}
}

func (x *SubmitUserGeneratedInterestResponse) GetResult() SubmitUserGeneratedInterestResponse_Result {
	if x != nil {
		return x.Result
	}
	return SubmitUserGeneratedInterestResponse_OK
}

type GetEarnOfferDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEarnOfferDetailsRequest) Reset() {
	*x = GetEarnOfferDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEarnOfferDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEarnOfferDetailsRequest) ProtoMessage() {}

func (x *GetEarnOfferDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEarnOfferDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetEarnOfferDetailsRequest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{17}
}

type GetEarnOfferDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of daily challenges succesfully completed for the current week
	CompletedDailyChallenges int32 `protobuf:"varint,1,opt,name=completed_daily_challenges,json=completedDailyChallenges,proto3" json:"completed_daily_challenges,omitempty"`
	// the total number of completed daily challenges required to finish the weekly challenge
	RequiredDailyChallenges int32 `protobuf:"varint,2,opt,name=required_daily_challenges,json=requiredDailyChallenges,proto3" json:"required_daily_challenges,omitempty"`
	// the amount of kin a user should earn by completing a daily chat challenge
	DailyEarnKinAmount *v11.KinAmount `protobuf:"bytes,3,opt,name=daily_earn_kin_amount,json=dailyEarnKinAmount,proto3" json:"daily_earn_kin_amount,omitempty"`
}

func (x *GetEarnOfferDetailsResponse) Reset() {
	*x = GetEarnOfferDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEarnOfferDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEarnOfferDetailsResponse) ProtoMessage() {}

func (x *GetEarnOfferDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEarnOfferDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetEarnOfferDetailsResponse) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetEarnOfferDetailsResponse) GetCompletedDailyChallenges() int32 {
	if x != nil {
		return x.CompletedDailyChallenges
	}
	return 0
}

func (x *GetEarnOfferDetailsResponse) GetRequiredDailyChallenges() int32 {
	if x != nil {
		return x.RequiredDailyChallenges
	}
	return 0
}

func (x *GetEarnOfferDetailsResponse) GetDailyEarnKinAmount() *v11.KinAmount {
	if x != nil {
		return x.DailyEarnKinAmount
	}
	return nil
}

// Represents a chat interest that the user optionally selects for chat matching
type ChatInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterestId   string `protobuf:"bytes,1,opt,name=interest_id,json=interestId,proto3" json:"interest_id,omitempty"`
	InterestName string `protobuf:"bytes,2,opt,name=interest_name,json=interestName,proto3" json:"interest_name,omitempty"`
}

func (x *ChatInterest) Reset() {
	*x = ChatInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInterest) ProtoMessage() {}

func (x *ChatInterest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInterest.ProtoReflect.Descriptor instead.
func (*ChatInterest) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{19}
}

func (x *ChatInterest) GetInterestId() string {
	if x != nil {
		return x.InterestId
	}
	return ""
}

func (x *ChatInterest) GetInterestName() string {
	if x != nil {
		return x.InterestName
	}
	return ""
}

// Contains details of a 1on1 anonymous chat match session
type SessionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session id
	SessionId *_go.XiUuid `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The alias jid of the chat partner.
	ChatPartnerAlias *v12.XiAliasJid `protobuf:"bytes,3,opt,name=chat_partner_alias,json=chatPartnerAlias,proto3" json:"chat_partner_alias,omitempty"`
	// Chat session end time (UTC)
	SessionEndTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=session_end_time,json=sessionEndTime,proto3" json:"session_end_time,omitempty"`
	// Session vote expiry (UTC), the session could be cleaned up any time after this. no further actions can be
	// taken on this session after this time.
	SessionExpiryTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=session_expiry_time,json=sessionExpiryTime,proto3" json:"session_expiry_time,omitempty"`
	SessionState      v1.ChatSessionState  `protobuf:"varint,6,opt,name=session_state,json=sessionState,proto3,enum=common.matching.v1.ChatSessionState" json:"session_state,omitempty"`
}

func (x *SessionDetails) Reset() {
	*x = SessionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v1_anon_matching_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDetails) ProtoMessage() {}

func (x *SessionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v1_anon_matching_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDetails.ProtoReflect.Descriptor instead.
func (*SessionDetails) Descriptor() ([]byte, []int) {
	return file_matching_v1_anon_matching_service_proto_rawDescGZIP(), []int{20}
}

func (x *SessionDetails) GetSessionId() *_go.XiUuid {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *SessionDetails) GetChatPartnerAlias() *v12.XiAliasJid {
	if x != nil {
		return x.ChatPartnerAlias
	}
	return nil
}

func (x *SessionDetails) GetSessionEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionEndTime
	}
	return nil
}

func (x *SessionDetails) GetSessionExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionExpiryTime
	}
	return nil
}

func (x *SessionDetails) GetSessionState() v1.ChatSessionState {
	if x != nil {
		return x.SessionState
	}
	return v1.ChatSessionState(0)
}

var File_matching_v1_anon_matching_service_proto protoreflect.FileDescriptor

var file_matching_v1_anon_matching_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x07, 0xca, 0x9d,
	0x25, 0x03, 0x80, 0x01, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x17,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x7c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52,
	0x54, 0x4e, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41,
	0x52, 0x49, 0x4c, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x22, 0x67, 0x0a,
	0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x14, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a,
	0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x16,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xd0, 0x01, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x6b, 0x0a, 0x10, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x4f, 0x55, 0x54,
	0x48, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x04, 0x22, 0x86,
	0x01, 0x0a, 0x17, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x22, 0x75, 0x0a, 0x16, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0x6f, 0x0a, 0x18, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x19, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0x4d, 0x0a, 0x22, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x28, 0x01, 0x30, 0xff, 0x01, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x45, 0x61, 0x72, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x45, 0x61, 0x72, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x12, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x45, 0x61, 0x72, 0x6e, 0x4b, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x6e, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x28, 0x01, 0x30, 0xff,
	0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x28, 0x01, 0x30, 0xff,
	0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xf1, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x58, 0x69, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x58, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x32, 0xaf, 0x08, 0x0a, 0x0c, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7c, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x61, 0x72,
	0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x61, 0x72,
	0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x49, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74,
	0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2d,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_matching_v1_anon_matching_service_proto_rawDescOnce sync.Once
	file_matching_v1_anon_matching_service_proto_rawDescData = file_matching_v1_anon_matching_service_proto_rawDesc
)

func file_matching_v1_anon_matching_service_proto_rawDescGZIP() []byte {
	file_matching_v1_anon_matching_service_proto_rawDescOnce.Do(func() {
		file_matching_v1_anon_matching_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_matching_v1_anon_matching_service_proto_rawDescData)
	})
	return file_matching_v1_anon_matching_service_proto_rawDescData
}

var file_matching_v1_anon_matching_service_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_matching_v1_anon_matching_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_matching_v1_anon_matching_service_proto_goTypes = []interface{}{
	(FindChatPartnerResponse_Result)(0),             // 0: mobile.matching.v1.FindChatPartnerResponse.Result
	(CancelFindChatPartnerResponse_Result)(0),       // 1: mobile.matching.v1.CancelFindChatPartnerResponse.Result
	(GetChatSessionResponse_Result)(0),              // 2: mobile.matching.v1.GetChatSessionResponse.Result
	(ChatSessionRating_SmileyChatRating)(0),         // 3: mobile.matching.v1.ChatSessionRating.SmileyChatRating
	(RateChatSessionResponse_Result)(0),             // 4: mobile.matching.v1.RateChatSessionResponse.Result
	(EndChatSessionResponse_Result)(0),              // 5: mobile.matching.v1.EndChatSessionResponse.Result
	(GetRemainingAnonChatsResponse_Result)(0),       // 6: mobile.matching.v1.GetRemainingAnonChatsResponse.Result
	(InitiateFriendingResponse_Result)(0),           // 7: mobile.matching.v1.InitiateFriendingResponse.Result
	(SubmitUserGeneratedInterestResponse_Result)(0), // 8: mobile.matching.v1.SubmitUserGeneratedInterestResponse.Result
	(*FindChatPartnerRequest)(nil),                  // 9: mobile.matching.v1.FindChatPartnerRequest
	(*FindChatPartnerResponse)(nil),                 // 10: mobile.matching.v1.FindChatPartnerResponse
	(*CancelFindChatPartnerRequest)(nil),            // 11: mobile.matching.v1.CancelFindChatPartnerRequest
	(*CancelFindChatPartnerResponse)(nil),           // 12: mobile.matching.v1.CancelFindChatPartnerResponse
	(*GetChatSessionRequest)(nil),                   // 13: mobile.matching.v1.GetChatSessionRequest
	(*GetChatSessionResponse)(nil),                  // 14: mobile.matching.v1.GetChatSessionResponse
	(*RateChatSessionRequest)(nil),                  // 15: mobile.matching.v1.RateChatSessionRequest
	(*ChatSessionRating)(nil),                       // 16: mobile.matching.v1.ChatSessionRating
	(*RateChatSessionResponse)(nil),                 // 17: mobile.matching.v1.RateChatSessionResponse
	(*EndChatSessionRequest)(nil),                   // 18: mobile.matching.v1.EndChatSessionRequest
	(*EndChatSessionResponse)(nil),                  // 19: mobile.matching.v1.EndChatSessionResponse
	(*GetRemainingAnonChatsRequest)(nil),            // 20: mobile.matching.v1.GetRemainingAnonChatsRequest
	(*GetRemainingAnonChatsResponse)(nil),           // 21: mobile.matching.v1.GetRemainingAnonChatsResponse
	(*InitiateFriendingRequest)(nil),                // 22: mobile.matching.v1.InitiateFriendingRequest
	(*InitiateFriendingResponse)(nil),               // 23: mobile.matching.v1.InitiateFriendingResponse
	(*SubmitUserGeneratedInterestRequest)(nil),      // 24: mobile.matching.v1.SubmitUserGeneratedInterestRequest
	(*SubmitUserGeneratedInterestResponse)(nil),     // 25: mobile.matching.v1.SubmitUserGeneratedInterestResponse
	(*GetEarnOfferDetailsRequest)(nil),              // 26: mobile.matching.v1.GetEarnOfferDetailsRequest
	(*GetEarnOfferDetailsResponse)(nil),             // 27: mobile.matching.v1.GetEarnOfferDetailsResponse
	(*ChatInterest)(nil),                            // 28: mobile.matching.v1.ChatInterest
	(*SessionDetails)(nil),                          // 29: mobile.matching.v1.SessionDetails
	(*_go.XiUuid)(nil),                              // 30: common.XiUuid
	(*timestamp.Timestamp)(nil),                     // 31: google.protobuf.Timestamp
	(*v1.AnonMatchingSessionKey)(nil),               // 32: common.matching.v1.AnonMatchingSessionKey
	(*v11.KinAmount)(nil),                           // 33: common.kin.payment.v1.KinAmount
	(*v12.XiAliasJid)(nil),                          // 34: common.v1.XiAliasJid
	(v1.ChatSessionState)(0),                        // 35: common.matching.v1.ChatSessionState
}
var file_matching_v1_anon_matching_service_proto_depIdxs = []int32{
	28, // 0: mobile.matching.v1.FindChatPartnerRequest.interests:type_name -> mobile.matching.v1.ChatInterest
	0,  // 1: mobile.matching.v1.FindChatPartnerResponse.result:type_name -> mobile.matching.v1.FindChatPartnerResponse.Result
	30, // 2: mobile.matching.v1.FindChatPartnerResponse.find_chat_request_id:type_name -> common.XiUuid
	29, // 3: mobile.matching.v1.FindChatPartnerResponse.session_details:type_name -> mobile.matching.v1.SessionDetails
	31, // 4: mobile.matching.v1.FindChatPartnerResponse.rejected_expiry_time:type_name -> google.protobuf.Timestamp
	30, // 5: mobile.matching.v1.CancelFindChatPartnerRequest.find_chat_request_id:type_name -> common.XiUuid
	1,  // 6: mobile.matching.v1.CancelFindChatPartnerResponse.result:type_name -> mobile.matching.v1.CancelFindChatPartnerResponse.Result
	32, // 7: mobile.matching.v1.GetChatSessionRequest.session_key:type_name -> common.matching.v1.AnonMatchingSessionKey
	2,  // 8: mobile.matching.v1.GetChatSessionResponse.result:type_name -> mobile.matching.v1.GetChatSessionResponse.Result
	29, // 9: mobile.matching.v1.GetChatSessionResponse.session_details:type_name -> mobile.matching.v1.SessionDetails
	32, // 10: mobile.matching.v1.RateChatSessionRequest.session_key:type_name -> common.matching.v1.AnonMatchingSessionKey
	16, // 11: mobile.matching.v1.RateChatSessionRequest.chat_rating:type_name -> mobile.matching.v1.ChatSessionRating
	3,  // 12: mobile.matching.v1.ChatSessionRating.rating:type_name -> mobile.matching.v1.ChatSessionRating.SmileyChatRating
	4,  // 13: mobile.matching.v1.RateChatSessionResponse.result:type_name -> mobile.matching.v1.RateChatSessionResponse.Result
	32, // 14: mobile.matching.v1.EndChatSessionRequest.session_key:type_name -> common.matching.v1.AnonMatchingSessionKey
	5,  // 15: mobile.matching.v1.EndChatSessionResponse.result:type_name -> mobile.matching.v1.EndChatSessionResponse.Result
	6,  // 16: mobile.matching.v1.GetRemainingAnonChatsResponse.result:type_name -> mobile.matching.v1.GetRemainingAnonChatsResponse.Result
	32, // 17: mobile.matching.v1.InitiateFriendingRequest.session_key:type_name -> common.matching.v1.AnonMatchingSessionKey
	7,  // 18: mobile.matching.v1.InitiateFriendingResponse.result:type_name -> mobile.matching.v1.InitiateFriendingResponse.Result
	8,  // 19: mobile.matching.v1.SubmitUserGeneratedInterestResponse.result:type_name -> mobile.matching.v1.SubmitUserGeneratedInterestResponse.Result
	33, // 20: mobile.matching.v1.GetEarnOfferDetailsResponse.daily_earn_kin_amount:type_name -> common.kin.payment.v1.KinAmount
	30, // 21: mobile.matching.v1.SessionDetails.session_id:type_name -> common.XiUuid
	34, // 22: mobile.matching.v1.SessionDetails.chat_partner_alias:type_name -> common.v1.XiAliasJid
	31, // 23: mobile.matching.v1.SessionDetails.session_end_time:type_name -> google.protobuf.Timestamp
	31, // 24: mobile.matching.v1.SessionDetails.session_expiry_time:type_name -> google.protobuf.Timestamp
	35, // 25: mobile.matching.v1.SessionDetails.session_state:type_name -> common.matching.v1.ChatSessionState
	9,  // 26: mobile.matching.v1.AnonMatching.FindChatPartner:input_type -> mobile.matching.v1.FindChatPartnerRequest
	11, // 27: mobile.matching.v1.AnonMatching.CancelFindChatPartner:input_type -> mobile.matching.v1.CancelFindChatPartnerRequest
	18, // 28: mobile.matching.v1.AnonMatching.EndChatSession:input_type -> mobile.matching.v1.EndChatSessionRequest
	13, // 29: mobile.matching.v1.AnonMatching.GetChatSession:input_type -> mobile.matching.v1.GetChatSessionRequest
	15, // 30: mobile.matching.v1.AnonMatching.RateChatSession:input_type -> mobile.matching.v1.RateChatSessionRequest
	20, // 31: mobile.matching.v1.AnonMatching.GetRemainingAnonChats:input_type -> mobile.matching.v1.GetRemainingAnonChatsRequest
	22, // 32: mobile.matching.v1.AnonMatching.InitiateFriending:input_type -> mobile.matching.v1.InitiateFriendingRequest
	24, // 33: mobile.matching.v1.AnonMatching.SubmitUserGeneratedInterest:input_type -> mobile.matching.v1.SubmitUserGeneratedInterestRequest
	26, // 34: mobile.matching.v1.AnonMatching.GetEarnOfferDetails:input_type -> mobile.matching.v1.GetEarnOfferDetailsRequest
	10, // 35: mobile.matching.v1.AnonMatching.FindChatPartner:output_type -> mobile.matching.v1.FindChatPartnerResponse
	12, // 36: mobile.matching.v1.AnonMatching.CancelFindChatPartner:output_type -> mobile.matching.v1.CancelFindChatPartnerResponse
	19, // 37: mobile.matching.v1.AnonMatching.EndChatSession:output_type -> mobile.matching.v1.EndChatSessionResponse
	14, // 38: mobile.matching.v1.AnonMatching.GetChatSession:output_type -> mobile.matching.v1.GetChatSessionResponse
	17, // 39: mobile.matching.v1.AnonMatching.RateChatSession:output_type -> mobile.matching.v1.RateChatSessionResponse
	21, // 40: mobile.matching.v1.AnonMatching.GetRemainingAnonChats:output_type -> mobile.matching.v1.GetRemainingAnonChatsResponse
	23, // 41: mobile.matching.v1.AnonMatching.InitiateFriending:output_type -> mobile.matching.v1.InitiateFriendingResponse
	25, // 42: mobile.matching.v1.AnonMatching.SubmitUserGeneratedInterest:output_type -> mobile.matching.v1.SubmitUserGeneratedInterestResponse
	27, // 43: mobile.matching.v1.AnonMatching.GetEarnOfferDetails:output_type -> mobile.matching.v1.GetEarnOfferDetailsResponse
	35, // [35:44] is the sub-list for method output_type
	26, // [26:35] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_matching_v1_anon_matching_service_proto_init() }
func file_matching_v1_anon_matching_service_proto_init() {
	if File_matching_v1_anon_matching_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_matching_v1_anon_matching_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindChatPartnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindChatPartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelFindChatPartnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelFindChatPartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateChatSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSessionRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateChatSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndChatSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndChatSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemainingAnonChatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemainingAnonChatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateFriendingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateFriendingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitUserGeneratedInterestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitUserGeneratedInterestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEarnOfferDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEarnOfferDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v1_anon_matching_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matching_v1_anon_matching_service_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matching_v1_anon_matching_service_proto_goTypes,
		DependencyIndexes: file_matching_v1_anon_matching_service_proto_depIdxs,
		EnumInfos:         file_matching_v1_anon_matching_service_proto_enumTypes,
		MessageInfos:      file_matching_v1_anon_matching_service_proto_msgTypes,
	}.Build()
	File_matching_v1_anon_matching_service_proto = out.File
	file_matching_v1_anon_matching_service_proto_rawDesc = nil
	file_matching_v1_anon_matching_service_proto_goTypes = nil
	file_matching_v1_anon_matching_service_proto_depIdxs = nil
}
