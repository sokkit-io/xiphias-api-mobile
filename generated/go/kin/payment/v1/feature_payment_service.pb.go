// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: kin/payment/v1/feature_payment_service.proto

package payment

import (
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	v11 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v1"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v13 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/authentication/v1"
	v12 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/payment/v1"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/offer/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetKikOfferJwtResponse_Result int32

const (
	GetKikOfferJwtResponse_OK       GetKikOfferJwtResponse_Result = 0
	GetKikOfferJwtResponse_REJECTED GetKikOfferJwtResponse_Result = 1
)

// Enum value maps for GetKikOfferJwtResponse_Result.
var (
	GetKikOfferJwtResponse_Result_name = map[int32]string{
		0: "OK",
		1: "REJECTED",
	}
	GetKikOfferJwtResponse_Result_value = map[string]int32{
		"OK":       0,
		"REJECTED": 1,
	}
)

func (x GetKikOfferJwtResponse_Result) Enum() *GetKikOfferJwtResponse_Result {
	p := new(GetKikOfferJwtResponse_Result)
	*p = x
	return p
}

func (x GetKikOfferJwtResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetKikOfferJwtResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[0].Descriptor()
}

func (GetKikOfferJwtResponse_Result) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[0]
}

func (x GetKikOfferJwtResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetKikOfferJwtResponse_Result.Descriptor instead.
func (GetKikOfferJwtResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{1, 0}
}

type GetKikOfferJwtResponse_RejectionReason int32

const (
	GetKikOfferJwtResponse_UNKNOWN GetKikOfferJwtResponse_RejectionReason = 0
	// The requesting user is not authorized to make this request
	GetKikOfferJwtResponse_USER_NOT_AUTHORIZED GetKikOfferJwtResponse_RejectionReason = 1
	// An attribute required for a specific offer is missing
	GetKikOfferJwtResponse_MISSING_ATTRIBUTE GetKikOfferJwtResponse_RejectionReason = 2
	// An attribute is invalid or extraneous
	GetKikOfferJwtResponse_INVALID_ATTRIBUTE GetKikOfferJwtResponse_RejectionReason = 3
	// The requested offer is not valid
	GetKikOfferJwtResponse_INVALID_OFFER GetKikOfferJwtResponse_RejectionReason = 4
	// The requested offer has expired
	GetKikOfferJwtResponse_OFFER_EXPIRED GetKikOfferJwtResponse_RejectionReason = 5
	// The attached feature data is invalid
	GetKikOfferJwtResponse_INVALID_FEATURE_DATA GetKikOfferJwtResponse_RejectionReason = 6
	// The alias jid is either not registered or is not valid for the requested feature
	GetKikOfferJwtResponse_INVALID_ALIAS_JID GetKikOfferJwtResponse_RejectionReason = 7
	// Transaction amount exceeds the max amount for a single spend transaction
	GetKikOfferJwtResponse_MAX_SPEND_AMOUNT_EXCEEDED GetKikOfferJwtResponse_RejectionReason = 8
	// Transaction amount + previous cumulative spend transactions exceed the sender's daily spend quota
	GetKikOfferJwtResponse_DAILY_SPEND_LIMIT_EXCEEDED GetKikOfferJwtResponse_RejectionReason = 9
	// The recipient doesn't have any remaining daily spend quota
	GetKikOfferJwtResponse_DAILY_RECEIVE_LIMIT_EXCEEDED GetKikOfferJwtResponse_RejectionReason = 10
)

// Enum value maps for GetKikOfferJwtResponse_RejectionReason.
var (
	GetKikOfferJwtResponse_RejectionReason_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "USER_NOT_AUTHORIZED",
		2:  "MISSING_ATTRIBUTE",
		3:  "INVALID_ATTRIBUTE",
		4:  "INVALID_OFFER",
		5:  "OFFER_EXPIRED",
		6:  "INVALID_FEATURE_DATA",
		7:  "INVALID_ALIAS_JID",
		8:  "MAX_SPEND_AMOUNT_EXCEEDED",
		9:  "DAILY_SPEND_LIMIT_EXCEEDED",
		10: "DAILY_RECEIVE_LIMIT_EXCEEDED",
	}
	GetKikOfferJwtResponse_RejectionReason_value = map[string]int32{
		"UNKNOWN":                      0,
		"USER_NOT_AUTHORIZED":          1,
		"MISSING_ATTRIBUTE":            2,
		"INVALID_ATTRIBUTE":            3,
		"INVALID_OFFER":                4,
		"OFFER_EXPIRED":                5,
		"INVALID_FEATURE_DATA":         6,
		"INVALID_ALIAS_JID":            7,
		"MAX_SPEND_AMOUNT_EXCEEDED":    8,
		"DAILY_SPEND_LIMIT_EXCEEDED":   9,
		"DAILY_RECEIVE_LIMIT_EXCEEDED": 10,
	}
)

func (x GetKikOfferJwtResponse_RejectionReason) Enum() *GetKikOfferJwtResponse_RejectionReason {
	p := new(GetKikOfferJwtResponse_RejectionReason)
	*p = x
	return p
}

func (x GetKikOfferJwtResponse_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetKikOfferJwtResponse_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[1].Descriptor()
}

func (GetKikOfferJwtResponse_RejectionReason) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[1]
}

func (x GetKikOfferJwtResponse_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetKikOfferJwtResponse_RejectionReason.Descriptor instead.
func (GetKikOfferJwtResponse_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{1, 1}
}

type ProcessKikOfferTransactionConfirmationResponse_Result int32

const (
	ProcessKikOfferTransactionConfirmationResponse_OK       ProcessKikOfferTransactionConfirmationResponse_Result = 0
	ProcessKikOfferTransactionConfirmationResponse_REJECTED ProcessKikOfferTransactionConfirmationResponse_Result = 1
)

// Enum value maps for ProcessKikOfferTransactionConfirmationResponse_Result.
var (
	ProcessKikOfferTransactionConfirmationResponse_Result_name = map[int32]string{
		0: "OK",
		1: "REJECTED",
	}
	ProcessKikOfferTransactionConfirmationResponse_Result_value = map[string]int32{
		"OK":       0,
		"REJECTED": 1,
	}
)

func (x ProcessKikOfferTransactionConfirmationResponse_Result) Enum() *ProcessKikOfferTransactionConfirmationResponse_Result {
	p := new(ProcessKikOfferTransactionConfirmationResponse_Result)
	*p = x
	return p
}

func (x ProcessKikOfferTransactionConfirmationResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessKikOfferTransactionConfirmationResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[2].Descriptor()
}

func (ProcessKikOfferTransactionConfirmationResponse_Result) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[2]
}

func (x ProcessKikOfferTransactionConfirmationResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessKikOfferTransactionConfirmationResponse_Result.Descriptor instead.
func (ProcessKikOfferTransactionConfirmationResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{3, 0}
}

type ProcessKikOfferTransactionConfirmationResponse_RejectionReason int32

const (
	ProcessKikOfferTransactionConfirmationResponse_UNKNOWN ProcessKikOfferTransactionConfirmationResponse_RejectionReason = 0
	// The requested offer is not valid
	ProcessKikOfferTransactionConfirmationResponse_INVALID_OFFER ProcessKikOfferTransactionConfirmationResponse_RejectionReason = 1
	// The requested offer has expired
	ProcessKikOfferTransactionConfirmationResponse_OFFER_EXPIRED ProcessKikOfferTransactionConfirmationResponse_RejectionReason = 2
	// The JWT is corrupt or not valid
	ProcessKikOfferTransactionConfirmationResponse_INVALID_JWT ProcessKikOfferTransactionConfirmationResponse_RejectionReason = 3
	// The information provided in the request does not match the information in the JWT
	ProcessKikOfferTransactionConfirmationResponse_OFFER_JWT_MISMATCH ProcessKikOfferTransactionConfirmationResponse_RejectionReason = 4
)

// Enum value maps for ProcessKikOfferTransactionConfirmationResponse_RejectionReason.
var (
	ProcessKikOfferTransactionConfirmationResponse_RejectionReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_OFFER",
		2: "OFFER_EXPIRED",
		3: "INVALID_JWT",
		4: "OFFER_JWT_MISMATCH",
	}
	ProcessKikOfferTransactionConfirmationResponse_RejectionReason_value = map[string]int32{
		"UNKNOWN":            0,
		"INVALID_OFFER":      1,
		"OFFER_EXPIRED":      2,
		"INVALID_JWT":        3,
		"OFFER_JWT_MISMATCH": 4,
	}
)

func (x ProcessKikOfferTransactionConfirmationResponse_RejectionReason) Enum() *ProcessKikOfferTransactionConfirmationResponse_RejectionReason {
	p := new(ProcessKikOfferTransactionConfirmationResponse_RejectionReason)
	*p = x
	return p
}

func (x ProcessKikOfferTransactionConfirmationResponse_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessKikOfferTransactionConfirmationResponse_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[3].Descriptor()
}

func (ProcessKikOfferTransactionConfirmationResponse_RejectionReason) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[3]
}

func (x ProcessKikOfferTransactionConfirmationResponse_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessKikOfferTransactionConfirmationResponse_RejectionReason.Descriptor instead.
func (ProcessKikOfferTransactionConfirmationResponse_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{3, 1}
}

type GetPayToUserJwtResponse_Result int32

const (
	GetPayToUserJwtResponse_OK       GetPayToUserJwtResponse_Result = 0
	GetPayToUserJwtResponse_REJECTED GetPayToUserJwtResponse_Result = 1
)

// Enum value maps for GetPayToUserJwtResponse_Result.
var (
	GetPayToUserJwtResponse_Result_name = map[int32]string{
		0: "OK",
		1: "REJECTED",
	}
	GetPayToUserJwtResponse_Result_value = map[string]int32{
		"OK":       0,
		"REJECTED": 1,
	}
)

func (x GetPayToUserJwtResponse_Result) Enum() *GetPayToUserJwtResponse_Result {
	p := new(GetPayToUserJwtResponse_Result)
	*p = x
	return p
}

func (x GetPayToUserJwtResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPayToUserJwtResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[4].Descriptor()
}

func (GetPayToUserJwtResponse_Result) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[4]
}

func (x GetPayToUserJwtResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPayToUserJwtResponse_Result.Descriptor instead.
func (GetPayToUserJwtResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{5, 0}
}

type GetPayToUserJwtResponse_RejectionReason int32

const (
	GetPayToUserJwtResponse_UNKNOWN GetPayToUserJwtResponse_RejectionReason = 0
	// The requested feature is not valid
	GetPayToUserJwtResponse_INVALID_FEATURE GetPayToUserJwtResponse_RejectionReason = 1
	// The alias jid is either not registered or is not valid for the requested feature
	GetPayToUserJwtResponse_INVALID_ALIAS_JID GetPayToUserJwtResponse_RejectionReason = 2
	// Transaction amount exceeds the max amount for a single spend transaction
	GetPayToUserJwtResponse_MAX_SPEND_AMOUNT_EXCEEDED GetPayToUserJwtResponse_RejectionReason = 3
	// Transaction amount + previous cumulative spend transactions exceed the sender's daily spend quota
	GetPayToUserJwtResponse_DAILY_SPEND_LIMIT_EXCEEDED GetPayToUserJwtResponse_RejectionReason = 4
	// The recipient doesn't have any remaining daily spend quota
	GetPayToUserJwtResponse_DAILY_RECEIVE_LIMIT_EXCEEDED GetPayToUserJwtResponse_RejectionReason = 5
	// The requesting user is not authorized to make this request
	GetPayToUserJwtResponse_USER_NOT_AUTHORIZED GetPayToUserJwtResponse_RejectionReason = 6
)

// Enum value maps for GetPayToUserJwtResponse_RejectionReason.
var (
	GetPayToUserJwtResponse_RejectionReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_FEATURE",
		2: "INVALID_ALIAS_JID",
		3: "MAX_SPEND_AMOUNT_EXCEEDED",
		4: "DAILY_SPEND_LIMIT_EXCEEDED",
		5: "DAILY_RECEIVE_LIMIT_EXCEEDED",
		6: "USER_NOT_AUTHORIZED",
	}
	GetPayToUserJwtResponse_RejectionReason_value = map[string]int32{
		"UNKNOWN":                      0,
		"INVALID_FEATURE":              1,
		"INVALID_ALIAS_JID":            2,
		"MAX_SPEND_AMOUNT_EXCEEDED":    3,
		"DAILY_SPEND_LIMIT_EXCEEDED":   4,
		"DAILY_RECEIVE_LIMIT_EXCEEDED": 5,
		"USER_NOT_AUTHORIZED":          6,
	}
)

func (x GetPayToUserJwtResponse_RejectionReason) Enum() *GetPayToUserJwtResponse_RejectionReason {
	p := new(GetPayToUserJwtResponse_RejectionReason)
	*p = x
	return p
}

func (x GetPayToUserJwtResponse_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPayToUserJwtResponse_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[5].Descriptor()
}

func (GetPayToUserJwtResponse_RejectionReason) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[5]
}

func (x GetPayToUserJwtResponse_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPayToUserJwtResponse_RejectionReason.Descriptor instead.
func (GetPayToUserJwtResponse_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{5, 1}
}

type ProcessPaymentToUserResponse_Result int32

const (
	ProcessPaymentToUserResponse_OK       ProcessPaymentToUserResponse_Result = 0
	ProcessPaymentToUserResponse_REJECTED ProcessPaymentToUserResponse_Result = 1
)

// Enum value maps for ProcessPaymentToUserResponse_Result.
var (
	ProcessPaymentToUserResponse_Result_name = map[int32]string{
		0: "OK",
		1: "REJECTED",
	}
	ProcessPaymentToUserResponse_Result_value = map[string]int32{
		"OK":       0,
		"REJECTED": 1,
	}
)

func (x ProcessPaymentToUserResponse_Result) Enum() *ProcessPaymentToUserResponse_Result {
	p := new(ProcessPaymentToUserResponse_Result)
	*p = x
	return p
}

func (x ProcessPaymentToUserResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessPaymentToUserResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[6].Descriptor()
}

func (ProcessPaymentToUserResponse_Result) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[6]
}

func (x ProcessPaymentToUserResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessPaymentToUserResponse_Result.Descriptor instead.
func (ProcessPaymentToUserResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{7, 0}
}

type ProcessPaymentToUserResponse_RejectionReason int32

const (
	ProcessPaymentToUserResponse_UNKNOWN ProcessPaymentToUserResponse_RejectionReason = 0
	// The requested feature is not valid
	ProcessPaymentToUserResponse_INVALID_FEATURE ProcessPaymentToUserResponse_RejectionReason = 1
	// The JWT is corrupt or not valid
	ProcessPaymentToUserResponse_INVALID_JWT ProcessPaymentToUserResponse_RejectionReason = 2
	// The information provided in the request does not match the information in the JWT
	ProcessPaymentToUserResponse_REQUEST_JWT_MISMATCH ProcessPaymentToUserResponse_RejectionReason = 3
)

// Enum value maps for ProcessPaymentToUserResponse_RejectionReason.
var (
	ProcessPaymentToUserResponse_RejectionReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_FEATURE",
		2: "INVALID_JWT",
		3: "REQUEST_JWT_MISMATCH",
	}
	ProcessPaymentToUserResponse_RejectionReason_value = map[string]int32{
		"UNKNOWN":              0,
		"INVALID_FEATURE":      1,
		"INVALID_JWT":          2,
		"REQUEST_JWT_MISMATCH": 3,
	}
)

func (x ProcessPaymentToUserResponse_RejectionReason) Enum() *ProcessPaymentToUserResponse_RejectionReason {
	p := new(ProcessPaymentToUserResponse_RejectionReason)
	*p = x
	return p
}

func (x ProcessPaymentToUserResponse_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessPaymentToUserResponse_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[7].Descriptor()
}

func (ProcessPaymentToUserResponse_RejectionReason) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[7]
}

func (x ProcessPaymentToUserResponse_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessPaymentToUserResponse_RejectionReason.Descriptor instead.
func (ProcessPaymentToUserResponse_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{7, 1}
}

type GetUserSpendTransactionLimitsResponse_Result int32

const (
	GetUserSpendTransactionLimitsResponse_OK       GetUserSpendTransactionLimitsResponse_Result = 0
	GetUserSpendTransactionLimitsResponse_REJECTED GetUserSpendTransactionLimitsResponse_Result = 1
)

// Enum value maps for GetUserSpendTransactionLimitsResponse_Result.
var (
	GetUserSpendTransactionLimitsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "REJECTED",
	}
	GetUserSpendTransactionLimitsResponse_Result_value = map[string]int32{
		"OK":       0,
		"REJECTED": 1,
	}
)

func (x GetUserSpendTransactionLimitsResponse_Result) Enum() *GetUserSpendTransactionLimitsResponse_Result {
	p := new(GetUserSpendTransactionLimitsResponse_Result)
	*p = x
	return p
}

func (x GetUserSpendTransactionLimitsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserSpendTransactionLimitsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[8].Descriptor()
}

func (GetUserSpendTransactionLimitsResponse_Result) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[8]
}

func (x GetUserSpendTransactionLimitsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserSpendTransactionLimitsResponse_Result.Descriptor instead.
func (GetUserSpendTransactionLimitsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{9, 0}
}

type GetUserSpendTransactionLimitsResponse_RejectionReason int32

const (
	GetUserSpendTransactionLimitsResponse_UNKNOWN GetUserSpendTransactionLimitsResponse_RejectionReason = 0
	// The requested feature is not valid
	GetUserSpendTransactionLimitsResponse_INVALID_FEATURE GetUserSpendTransactionLimitsResponse_RejectionReason = 1
	// The requesting user is not authorized to make this request
	GetUserSpendTransactionLimitsResponse_USER_NOT_AUTHORIZED GetUserSpendTransactionLimitsResponse_RejectionReason = 2
)

// Enum value maps for GetUserSpendTransactionLimitsResponse_RejectionReason.
var (
	GetUserSpendTransactionLimitsResponse_RejectionReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_FEATURE",
		2: "USER_NOT_AUTHORIZED",
	}
	GetUserSpendTransactionLimitsResponse_RejectionReason_value = map[string]int32{
		"UNKNOWN":             0,
		"INVALID_FEATURE":     1,
		"USER_NOT_AUTHORIZED": 2,
	}
)

func (x GetUserSpendTransactionLimitsResponse_RejectionReason) Enum() *GetUserSpendTransactionLimitsResponse_RejectionReason {
	p := new(GetUserSpendTransactionLimitsResponse_RejectionReason)
	*p = x
	return p
}

func (x GetUserSpendTransactionLimitsResponse_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserSpendTransactionLimitsResponse_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[9].Descriptor()
}

func (GetUserSpendTransactionLimitsResponse_RejectionReason) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[9]
}

func (x GetUserSpendTransactionLimitsResponse_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserSpendTransactionLimitsResponse_RejectionReason.Descriptor instead.
func (GetUserSpendTransactionLimitsResponse_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{9, 1}
}

type GetUsersReceiveTransactionLimitsResponse_Result int32

const (
	GetUsersReceiveTransactionLimitsResponse_OK       GetUsersReceiveTransactionLimitsResponse_Result = 0
	GetUsersReceiveTransactionLimitsResponse_REJECTED GetUsersReceiveTransactionLimitsResponse_Result = 1
)

// Enum value maps for GetUsersReceiveTransactionLimitsResponse_Result.
var (
	GetUsersReceiveTransactionLimitsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "REJECTED",
	}
	GetUsersReceiveTransactionLimitsResponse_Result_value = map[string]int32{
		"OK":       0,
		"REJECTED": 1,
	}
)

func (x GetUsersReceiveTransactionLimitsResponse_Result) Enum() *GetUsersReceiveTransactionLimitsResponse_Result {
	p := new(GetUsersReceiveTransactionLimitsResponse_Result)
	*p = x
	return p
}

func (x GetUsersReceiveTransactionLimitsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUsersReceiveTransactionLimitsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[10].Descriptor()
}

func (GetUsersReceiveTransactionLimitsResponse_Result) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[10]
}

func (x GetUsersReceiveTransactionLimitsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUsersReceiveTransactionLimitsResponse_Result.Descriptor instead.
func (GetUsersReceiveTransactionLimitsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{11, 0}
}

type GetUsersReceiveTransactionLimitsResponse_RejectionReason int32

const (
	GetUsersReceiveTransactionLimitsResponse_UNKNOWN GetUsersReceiveTransactionLimitsResponse_RejectionReason = 0
	// The requested feature is not valid
	GetUsersReceiveTransactionLimitsResponse_INVALID_FEATURE GetUsersReceiveTransactionLimitsResponse_RejectionReason = 1
	// One or more of the requested alias jids are either not registered or are not valid for the requested feature
	GetUsersReceiveTransactionLimitsResponse_INVALID_ALIAS_JID GetUsersReceiveTransactionLimitsResponse_RejectionReason = 2
	// The requesting user is not authorized to make this request
	GetUsersReceiveTransactionLimitsResponse_USER_NOT_AUTHORIZED GetUsersReceiveTransactionLimitsResponse_RejectionReason = 3
)

// Enum value maps for GetUsersReceiveTransactionLimitsResponse_RejectionReason.
var (
	GetUsersReceiveTransactionLimitsResponse_RejectionReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_FEATURE",
		2: "INVALID_ALIAS_JID",
		3: "USER_NOT_AUTHORIZED",
	}
	GetUsersReceiveTransactionLimitsResponse_RejectionReason_value = map[string]int32{
		"UNKNOWN":             0,
		"INVALID_FEATURE":     1,
		"INVALID_ALIAS_JID":   2,
		"USER_NOT_AUTHORIZED": 3,
	}
)

func (x GetUsersReceiveTransactionLimitsResponse_RejectionReason) Enum() *GetUsersReceiveTransactionLimitsResponse_RejectionReason {
	p := new(GetUsersReceiveTransactionLimitsResponse_RejectionReason)
	*p = x
	return p
}

func (x GetUsersReceiveTransactionLimitsResponse_RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUsersReceiveTransactionLimitsResponse_RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kin_payment_v1_feature_payment_service_proto_enumTypes[11].Descriptor()
}

func (GetUsersReceiveTransactionLimitsResponse_RejectionReason) Type() protoreflect.EnumType {
	return &file_kin_payment_v1_feature_payment_service_proto_enumTypes[11]
}

func (x GetUsersReceiveTransactionLimitsResponse_RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUsersReceiveTransactionLimitsResponse_RejectionReason.Descriptor instead.
func (GetUsersReceiveTransactionLimitsResponse_RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{11, 1}
}

type GetKikOfferJwtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the offer the user has claimed. Offer can be a public offer, available for all user, or
	// personalized offer that's available for that user only.
	OfferId *v1.KikOfferIdOrUserOfferId `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	// Any user offer offer data that could be included (Ex. group jid for group_tipping)
	UserOfferData *v1.UserOfferData `protobuf:"bytes,2,opt,name=user_offer_data,json=userOfferData,proto3" json:"user_offer_data,omitempty"`
	// User or alias jid of the receiving user. This will only be included for PAY_TO_USER type of offers.
	// Will be one-way hashed before being included in the JWT.
	RecipientJid *v11.XiBareUserJidOrAliasJid `protobuf:"bytes,3,opt,name=recipient_jid,json=recipientJid,proto3" json:"recipient_jid,omitempty"`
	// User specified amount for a transaction. This amount should only be included in the case of recurring offers
	// that don't have a preset value, such as public_group_admin_tipping
	Amount *v12.KinAmount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GetKikOfferJwtRequest) Reset() {
	*x = GetKikOfferJwtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKikOfferJwtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKikOfferJwtRequest) ProtoMessage() {}

func (x *GetKikOfferJwtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKikOfferJwtRequest.ProtoReflect.Descriptor instead.
func (*GetKikOfferJwtRequest) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetKikOfferJwtRequest) GetOfferId() *v1.KikOfferIdOrUserOfferId {
	if x != nil {
		return x.OfferId
	}
	return nil
}

func (x *GetKikOfferJwtRequest) GetUserOfferData() *v1.UserOfferData {
	if x != nil {
		return x.UserOfferData
	}
	return nil
}

func (x *GetKikOfferJwtRequest) GetRecipientJid() *v11.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.RecipientJid
	}
	return nil
}

func (x *GetKikOfferJwtRequest) GetAmount() *v12.KinAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type GetKikOfferJwtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          GetKikOfferJwtResponse_Result          `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.kin.payment.v1.GetKikOfferJwtResponse_Result" json:"result,omitempty"`
	RejectionReason GetKikOfferJwtResponse_RejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=mobile.kin.payment.v1.GetKikOfferJwtResponse_RejectionReason" json:"rejection_reason,omitempty"`
	// The generated offer JWT. JWT payload types are defined in the Kin ecosystem API:
	// https://github.com/kinecosystem/ecosystem-api
	OfferJwt *v11.XiJWT `protobuf:"bytes,3,opt,name=offer_jwt,json=offerJwt,proto3" json:"offer_jwt,omitempty"`
	// KikUserOfferId uniquely identifies an offer for a user and can be used to uniquely ID a transaction in progress
	UserOfferId *v1.KikUserOfferId `protobuf:"bytes,4,opt,name=user_offer_id,json=userOfferId,proto3" json:"user_offer_id,omitempty"`
}

func (x *GetKikOfferJwtResponse) Reset() {
	*x = GetKikOfferJwtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKikOfferJwtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKikOfferJwtResponse) ProtoMessage() {}

func (x *GetKikOfferJwtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKikOfferJwtResponse.ProtoReflect.Descriptor instead.
func (*GetKikOfferJwtResponse) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetKikOfferJwtResponse) GetResult() GetKikOfferJwtResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetKikOfferJwtResponse_OK
}

func (x *GetKikOfferJwtResponse) GetRejectionReason() GetKikOfferJwtResponse_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return GetKikOfferJwtResponse_UNKNOWN
}

func (x *GetKikOfferJwtResponse) GetOfferJwt() *v11.XiJWT {
	if x != nil {
		return x.OfferJwt
	}
	return nil
}

func (x *GetKikOfferJwtResponse) GetUserOfferId() *v1.KikUserOfferId {
	if x != nil {
		return x.UserOfferId
	}
	return nil
}

type ProcessKikOfferTransactionConfirmationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PaymentConfirmation JWT (https://github.com/kinecosystem/ecosystem-api#paymentconfirmation-payload) originating
	// from the Kin SDK. The information in the JWT will be verified against the other information contained in the
	// request. The block-chain transaction ID in the JWT will also be stored in the transaction record.
	PaymentConfirmationJwt *v11.XiJWT `protobuf:"bytes,1,opt,name=payment_confirmation_jwt,json=paymentConfirmationJwt,proto3" json:"payment_confirmation_jwt,omitempty"`
	// KikUserOfferId uniquely identifies an offer for a user and can be used to uniquely ID a transaction in progress
	UserOfferId *v1.KikUserOfferId `protobuf:"bytes,2,opt,name=user_offer_id,json=userOfferId,proto3" json:"user_offer_id,omitempty"`
}

func (x *ProcessKikOfferTransactionConfirmationRequest) Reset() {
	*x = ProcessKikOfferTransactionConfirmationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessKikOfferTransactionConfirmationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessKikOfferTransactionConfirmationRequest) ProtoMessage() {}

func (x *ProcessKikOfferTransactionConfirmationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessKikOfferTransactionConfirmationRequest.ProtoReflect.Descriptor instead.
func (*ProcessKikOfferTransactionConfirmationRequest) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessKikOfferTransactionConfirmationRequest) GetPaymentConfirmationJwt() *v11.XiJWT {
	if x != nil {
		return x.PaymentConfirmationJwt
	}
	return nil
}

func (x *ProcessKikOfferTransactionConfirmationRequest) GetUserOfferId() *v1.KikUserOfferId {
	if x != nil {
		return x.UserOfferId
	}
	return nil
}

type ProcessKikOfferTransactionConfirmationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          ProcessKikOfferTransactionConfirmationResponse_Result          `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse_Result" json:"result,omitempty"`
	RejectionReason ProcessKikOfferTransactionConfirmationResponse_RejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse_RejectionReason" json:"rejection_reason,omitempty"`
}

func (x *ProcessKikOfferTransactionConfirmationResponse) Reset() {
	*x = ProcessKikOfferTransactionConfirmationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessKikOfferTransactionConfirmationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessKikOfferTransactionConfirmationResponse) ProtoMessage() {}

func (x *ProcessKikOfferTransactionConfirmationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessKikOfferTransactionConfirmationResponse.ProtoReflect.Descriptor instead.
func (*ProcessKikOfferTransactionConfirmationResponse) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessKikOfferTransactionConfirmationResponse) GetResult() ProcessKikOfferTransactionConfirmationResponse_Result {
	if x != nil {
		return x.Result
	}
	return ProcessKikOfferTransactionConfirmationResponse_OK
}

func (x *ProcessKikOfferTransactionConfirmationResponse) GetRejectionReason() ProcessKikOfferTransactionConfirmationResponse_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return ProcessKikOfferTransactionConfirmationResponse_UNKNOWN
}

// DEPRECATED
type GetPayToUserJwtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User jid of the sending user. Will be one-way hashed before being included in the JWT.
	SenderUserJid *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=sender_user_jid,json=senderUserJid,proto3" json:"sender_user_jid,omitempty"`
	// User or alias jid of the receiving user, depending on the chat type (public group payments will use alias jids).
	// Will be one-way hashed before being included in the JWT.
	RecipientJid *v11.XiBareUserJidOrAliasJid `protobuf:"bytes,2,opt,name=recipient_jid,json=recipientJid,proto3" json:"recipient_jid,omitempty"`
	// Contains information about the payment being requested, including feature and amount.
	PaymentInfo *v12.PaymentInfo `protobuf:"bytes,3,opt,name=payment_info,json=paymentInfo,proto3" json:"payment_info,omitempty"`
}

func (x *GetPayToUserJwtRequest) Reset() {
	*x = GetPayToUserJwtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayToUserJwtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayToUserJwtRequest) ProtoMessage() {}

func (x *GetPayToUserJwtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayToUserJwtRequest.ProtoReflect.Descriptor instead.
func (*GetPayToUserJwtRequest) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetPayToUserJwtRequest) GetSenderUserJid() *_go.XiBareUserJid {
	if x != nil {
		return x.SenderUserJid
	}
	return nil
}

func (x *GetPayToUserJwtRequest) GetRecipientJid() *v11.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.RecipientJid
	}
	return nil
}

func (x *GetPayToUserJwtRequest) GetPaymentInfo() *v12.PaymentInfo {
	if x != nil {
		return x.PaymentInfo
	}
	return nil
}

// DEPRECATED
type GetPayToUserJwtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          GetPayToUserJwtResponse_Result          `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.kin.payment.v1.GetPayToUserJwtResponse_Result" json:"result,omitempty"`
	RejectionReason GetPayToUserJwtResponse_RejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=mobile.kin.payment.v1.GetPayToUserJwtResponse_RejectionReason" json:"rejection_reason,omitempty"`
	// The generated PayToUser JWT. The JWT payload is defined in the Kin ecosystem API:
	// https://github.com/kinecosystem/ecosystem-api#paytouser-payload.
	PayToUserOfferJwt *v13.OfferJwt `protobuf:"bytes,3,opt,name=pay_to_user_offer_jwt,json=payToUserOfferJwt,proto3" json:"pay_to_user_offer_jwt,omitempty"`
}

func (x *GetPayToUserJwtResponse) Reset() {
	*x = GetPayToUserJwtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayToUserJwtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayToUserJwtResponse) ProtoMessage() {}

func (x *GetPayToUserJwtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayToUserJwtResponse.ProtoReflect.Descriptor instead.
func (*GetPayToUserJwtResponse) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetPayToUserJwtResponse) GetResult() GetPayToUserJwtResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetPayToUserJwtResponse_OK
}

func (x *GetPayToUserJwtResponse) GetRejectionReason() GetPayToUserJwtResponse_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return GetPayToUserJwtResponse_UNKNOWN
}

func (x *GetPayToUserJwtResponse) GetPayToUserOfferJwt() *v13.OfferJwt {
	if x != nil {
		return x.PayToUserOfferJwt
	}
	return nil
}

// DEPRECATED
type ProcessPaymentToUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User jid of the sending user. Used to verify and process the payment_confirmation_jwt.
	SenderUserJid *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=sender_user_jid,json=senderUserJid,proto3" json:"sender_user_jid,omitempty"`
	// User or alias jid of the receiving user, depending on the chat type (public group payments will use alias jids).
	// Used to verify and process the payment_confirmation_jwt.
	RecipientJid *v11.XiBareUserJidOrAliasJid `protobuf:"bytes,2,opt,name=recipient_jid,json=recipientJid,proto3" json:"recipient_jid,omitempty"`
	// Contains information about the payment being requested, including feature and amount. Used to verify and process
	// the payment_confirmation_jwt.
	PaymentInfo *v12.PaymentInfo `protobuf:"bytes,3,opt,name=payment_info,json=paymentInfo,proto3" json:"payment_info,omitempty"`
	// PaymentConfirmation JWT (https://github.com/kinecosystem/ecosystem-api#paymentconfirmation-payload) originating
	// from the Kin SDK. The information in the JWT will be verified against the other information contained in the
	// request. The stellar blockchain transaction ID in the JWT will be used to store the transaction record.
	PaymentConfirmationJwt *v11.XiJWT `protobuf:"bytes,4,opt,name=payment_confirmation_jwt,json=paymentConfirmationJwt,proto3" json:"payment_confirmation_jwt,omitempty"`
}

func (x *ProcessPaymentToUserRequest) Reset() {
	*x = ProcessPaymentToUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessPaymentToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPaymentToUserRequest) ProtoMessage() {}

func (x *ProcessPaymentToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessPaymentToUserRequest.ProtoReflect.Descriptor instead.
func (*ProcessPaymentToUserRequest) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessPaymentToUserRequest) GetSenderUserJid() *_go.XiBareUserJid {
	if x != nil {
		return x.SenderUserJid
	}
	return nil
}

func (x *ProcessPaymentToUserRequest) GetRecipientJid() *v11.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.RecipientJid
	}
	return nil
}

func (x *ProcessPaymentToUserRequest) GetPaymentInfo() *v12.PaymentInfo {
	if x != nil {
		return x.PaymentInfo
	}
	return nil
}

func (x *ProcessPaymentToUserRequest) GetPaymentConfirmationJwt() *v11.XiJWT {
	if x != nil {
		return x.PaymentConfirmationJwt
	}
	return nil
}

// DEPRECATED
type ProcessPaymentToUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          ProcessPaymentToUserResponse_Result          `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.kin.payment.v1.ProcessPaymentToUserResponse_Result" json:"result,omitempty"`
	RejectionReason ProcessPaymentToUserResponse_RejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=mobile.kin.payment.v1.ProcessPaymentToUserResponse_RejectionReason" json:"rejection_reason,omitempty"`
}

func (x *ProcessPaymentToUserResponse) Reset() {
	*x = ProcessPaymentToUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessPaymentToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPaymentToUserResponse) ProtoMessage() {}

func (x *ProcessPaymentToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessPaymentToUserResponse.ProtoReflect.Descriptor instead.
func (*ProcessPaymentToUserResponse) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessPaymentToUserResponse) GetResult() ProcessPaymentToUserResponse_Result {
	if x != nil {
		return x.Result
	}
	return ProcessPaymentToUserResponse_OK
}

func (x *ProcessPaymentToUserResponse) GetRejectionReason() ProcessPaymentToUserResponse_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return ProcessPaymentToUserResponse_UNKNOWN
}

type GetUserSpendTransactionLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user whose limits we're retrieving
	UserJid *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=user_jid,json=userJid,proto3" json:"user_jid,omitempty"`
	// The feature to retrieve limits for
	Feature v12.Feature `protobuf:"varint,2,opt,name=feature,proto3,enum=common.kin.payment.v1.Feature" json:"feature,omitempty"`
}

func (x *GetUserSpendTransactionLimitsRequest) Reset() {
	*x = GetUserSpendTransactionLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpendTransactionLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpendTransactionLimitsRequest) ProtoMessage() {}

func (x *GetUserSpendTransactionLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpendTransactionLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetUserSpendTransactionLimitsRequest) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserSpendTransactionLimitsRequest) GetUserJid() *_go.XiBareUserJid {
	if x != nil {
		return x.UserJid
	}
	return nil
}

func (x *GetUserSpendTransactionLimitsRequest) GetFeature() v12.Feature {
	if x != nil {
		return x.Feature
	}
	return v12.Feature(0)
}

type GetUserSpendTransactionLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          GetUserSpendTransactionLimitsResponse_Result          `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse_Result" json:"result,omitempty"`
	RejectionReason GetUserSpendTransactionLimitsResponse_RejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse_RejectionReason" json:"rejection_reason,omitempty"`
	// Limits related to the amount of a single transaction
	TransactionAmountLimits *TransactionAmountLimits `protobuf:"bytes,3,opt,name=transaction_amount_limits,json=transactionAmountLimits,proto3" json:"transaction_amount_limits,omitempty"`
}

func (x *GetUserSpendTransactionLimitsResponse) Reset() {
	*x = GetUserSpendTransactionLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpendTransactionLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpendTransactionLimitsResponse) ProtoMessage() {}

func (x *GetUserSpendTransactionLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpendTransactionLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetUserSpendTransactionLimitsResponse) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserSpendTransactionLimitsResponse) GetResult() GetUserSpendTransactionLimitsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetUserSpendTransactionLimitsResponse_OK
}

func (x *GetUserSpendTransactionLimitsResponse) GetRejectionReason() GetUserSpendTransactionLimitsResponse_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return GetUserSpendTransactionLimitsResponse_UNKNOWN
}

func (x *GetUserSpendTransactionLimitsResponse) GetTransactionAmountLimits() *TransactionAmountLimits {
	if x != nil {
		return x.TransactionAmountLimits
	}
	return nil
}

type GetUsersReceiveTransactionLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bare or alias jids of the users whose limits are being retrieved
	UserJids []*v11.XiBareUserJidOrAliasJid `protobuf:"bytes,1,rep,name=user_jids,json=userJids,proto3" json:"user_jids,omitempty"`
	// The feature to retrieve limits for
	Feature v12.Feature `protobuf:"varint,2,opt,name=feature,proto3,enum=common.kin.payment.v1.Feature" json:"feature,omitempty"`
}

func (x *GetUsersReceiveTransactionLimitsRequest) Reset() {
	*x = GetUsersReceiveTransactionLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersReceiveTransactionLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersReceiveTransactionLimitsRequest) ProtoMessage() {}

func (x *GetUsersReceiveTransactionLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersReceiveTransactionLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetUsersReceiveTransactionLimitsRequest) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetUsersReceiveTransactionLimitsRequest) GetUserJids() []*v11.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.UserJids
	}
	return nil
}

func (x *GetUsersReceiveTransactionLimitsRequest) GetFeature() v12.Feature {
	if x != nil {
		return x.Feature
	}
	return v12.Feature(0)
}

type GetUsersReceiveTransactionLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          GetUsersReceiveTransactionLimitsResponse_Result          `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse_Result" json:"result,omitempty"`
	RejectionReason GetUsersReceiveTransactionLimitsResponse_RejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse_RejectionReason" json:"rejection_reason,omitempty"`
	// Sanity bound. There may be situations where the client needs to retrieve limits for more than this number of
	// users, but in those cases the client should batch the users.
	UserTransactionLimits []*UserTransactionLimits `protobuf:"bytes,3,rep,name=user_transaction_limits,json=userTransactionLimits,proto3" json:"user_transaction_limits,omitempty"`
}

func (x *GetUsersReceiveTransactionLimitsResponse) Reset() {
	*x = GetUsersReceiveTransactionLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersReceiveTransactionLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersReceiveTransactionLimitsResponse) ProtoMessage() {}

func (x *GetUsersReceiveTransactionLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersReceiveTransactionLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetUsersReceiveTransactionLimitsResponse) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetUsersReceiveTransactionLimitsResponse) GetResult() GetUsersReceiveTransactionLimitsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetUsersReceiveTransactionLimitsResponse_OK
}

func (x *GetUsersReceiveTransactionLimitsResponse) GetRejectionReason() GetUsersReceiveTransactionLimitsResponse_RejectionReason {
	if x != nil {
		return x.RejectionReason
	}
	return GetUsersReceiveTransactionLimitsResponse_UNKNOWN
}

func (x *GetUsersReceiveTransactionLimitsResponse) GetUserTransactionLimits() []*UserTransactionLimits {
	if x != nil {
		return x.UserTransactionLimits
	}
	return nil
}

type UserTransactionLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserJid *v11.XiBareUserJidOrAliasJid `protobuf:"bytes,1,opt,name=user_jid,json=userJid,proto3" json:"user_jid,omitempty"`
	// Limits related to the transaction Kin amount
	TransactionAmountLimits *TransactionAmountLimits `protobuf:"bytes,2,opt,name=transaction_amount_limits,json=transactionAmountLimits,proto3" json:"transaction_amount_limits,omitempty"`
}

func (x *UserTransactionLimits) Reset() {
	*x = UserTransactionLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTransactionLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTransactionLimits) ProtoMessage() {}

func (x *UserTransactionLimits) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTransactionLimits.ProtoReflect.Descriptor instead.
func (*UserTransactionLimits) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{12}
}

func (x *UserTransactionLimits) GetUserJid() *v11.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.UserJid
	}
	return nil
}

func (x *UserTransactionLimits) GetTransactionAmountLimits() *TransactionAmountLimits {
	if x != nil {
		return x.TransactionAmountLimits
	}
	return nil
}

type TransactionAmountLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The max amount of a transaction
	MaxAmount *v12.KinAmount `protobuf:"bytes,1,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// The daily transaction quota of a user
	DailyLimit *v12.KinAmount `protobuf:"bytes,2,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`
	// The remaining daily transaction quota of a user
	RemainingDailyLimit *v12.KinAmount `protobuf:"bytes,3,opt,name=remaining_daily_limit,json=remainingDailyLimit,proto3" json:"remaining_daily_limit,omitempty"`
}

func (x *TransactionAmountLimits) Reset() {
	*x = TransactionAmountLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAmountLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAmountLimits) ProtoMessage() {}

func (x *TransactionAmountLimits) ProtoReflect() protoreflect.Message {
	mi := &file_kin_payment_v1_feature_payment_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAmountLimits.ProtoReflect.Descriptor instead.
func (*TransactionAmountLimits) Descriptor() ([]byte, []int) {
	return file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP(), []int{13}
}

func (x *TransactionAmountLimits) GetMaxAmount() *v12.KinAmount {
	if x != nil {
		return x.MaxAmount
	}
	return nil
}

func (x *TransactionAmountLimits) GetDailyLimit() *v12.KinAmount {
	if x != nil {
		return x.DailyLimit
	}
	return nil
}

func (x *TransactionAmountLimits) GetRemainingDailyLimit() *v12.KinAmount {
	if x != nil {
		return x.RemainingDailyLimit
	}
	return nil
}

var File_kin_payment_v1_feature_payment_service_proto protoreflect.FileDescriptor

var file_kin_payment_v1_feature_payment_service_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6b, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x69, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x69,
	0x6e, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x31, 0x6b, 0x69, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6b, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6a, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x69,
	0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6b,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x68, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x4a, 0x57, 0x54, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x69, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x9d, 0x02,
	0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x4a, 0x49, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x41, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0a, 0x22, 0xd0, 0x01,
	0x0a, 0x2d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69,
	0x4a, 0x57, 0x54, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x16, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x77, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa8, 0x03, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6b, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x6d, 0x0a, 0x0f,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x57,
	0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x4a, 0x57, 0x54,
	0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x22, 0xff, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x4f, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x4f, 0x72,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x69, 0x64, 0x12, 0x4d,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x04,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x11, 0x70, 0x61, 0x79, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x22, 0x1e, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0xc4, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x4c, 0x49, 0x41, 0x53, 0x5f, 0x4a, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41,
	0x58, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x06, 0x22, 0xd8, 0x02, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58,
	0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x18, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x4a, 0x57, 0x54, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x77, 0x74, 0x22,
	0xe2, 0x02, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x22, 0x5e, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4a, 0x57, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x03, 0x22, 0x9a, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xd7, 0x03, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x1e, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x4c, 0x0a,
	0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x22, 0xaf, 0x01, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6a, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x42, 0x09,
	0xca, 0x9d, 0x25, 0x05, 0x78, 0x01, 0x80, 0x01, 0x32, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4a,
	0x69, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xfa, 0x03,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7a, 0x0a, 0x10, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x80, 0x01, 0x32, 0x52, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x1e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x63, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x4a, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x22, 0xca, 0x01, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64,
	0x4f, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x17,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0xf8, 0x06,
	0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a,
	0x77, 0x74, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69,
	0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6b, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xb5, 0x01, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6b, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x77, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x84,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x66, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x69, 0x6b, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x72, 0x70, 0x63, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61,
	0x73, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x69, 0x6e, 0x2f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kin_payment_v1_feature_payment_service_proto_rawDescOnce sync.Once
	file_kin_payment_v1_feature_payment_service_proto_rawDescData = file_kin_payment_v1_feature_payment_service_proto_rawDesc
)

func file_kin_payment_v1_feature_payment_service_proto_rawDescGZIP() []byte {
	file_kin_payment_v1_feature_payment_service_proto_rawDescOnce.Do(func() {
		file_kin_payment_v1_feature_payment_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kin_payment_v1_feature_payment_service_proto_rawDescData)
	})
	return file_kin_payment_v1_feature_payment_service_proto_rawDescData
}

var file_kin_payment_v1_feature_payment_service_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_kin_payment_v1_feature_payment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_kin_payment_v1_feature_payment_service_proto_goTypes = []interface{}{
	(GetKikOfferJwtResponse_Result)(0),                                  // 0: mobile.kin.payment.v1.GetKikOfferJwtResponse.Result
	(GetKikOfferJwtResponse_RejectionReason)(0),                         // 1: mobile.kin.payment.v1.GetKikOfferJwtResponse.RejectionReason
	(ProcessKikOfferTransactionConfirmationResponse_Result)(0),          // 2: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse.Result
	(ProcessKikOfferTransactionConfirmationResponse_RejectionReason)(0), // 3: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse.RejectionReason
	(GetPayToUserJwtResponse_Result)(0),                                 // 4: mobile.kin.payment.v1.GetPayToUserJwtResponse.Result
	(GetPayToUserJwtResponse_RejectionReason)(0),                        // 5: mobile.kin.payment.v1.GetPayToUserJwtResponse.RejectionReason
	(ProcessPaymentToUserResponse_Result)(0),                            // 6: mobile.kin.payment.v1.ProcessPaymentToUserResponse.Result
	(ProcessPaymentToUserResponse_RejectionReason)(0),                   // 7: mobile.kin.payment.v1.ProcessPaymentToUserResponse.RejectionReason
	(GetUserSpendTransactionLimitsResponse_Result)(0),                   // 8: mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.Result
	(GetUserSpendTransactionLimitsResponse_RejectionReason)(0),          // 9: mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.RejectionReason
	(GetUsersReceiveTransactionLimitsResponse_Result)(0),                // 10: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.Result
	(GetUsersReceiveTransactionLimitsResponse_RejectionReason)(0),       // 11: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.RejectionReason
	(*GetKikOfferJwtRequest)(nil),                                       // 12: mobile.kin.payment.v1.GetKikOfferJwtRequest
	(*GetKikOfferJwtResponse)(nil),                                      // 13: mobile.kin.payment.v1.GetKikOfferJwtResponse
	(*ProcessKikOfferTransactionConfirmationRequest)(nil),               // 14: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationRequest
	(*ProcessKikOfferTransactionConfirmationResponse)(nil),              // 15: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse
	(*GetPayToUserJwtRequest)(nil),                                      // 16: mobile.kin.payment.v1.GetPayToUserJwtRequest
	(*GetPayToUserJwtResponse)(nil),                                     // 17: mobile.kin.payment.v1.GetPayToUserJwtResponse
	(*ProcessPaymentToUserRequest)(nil),                                 // 18: mobile.kin.payment.v1.ProcessPaymentToUserRequest
	(*ProcessPaymentToUserResponse)(nil),                                // 19: mobile.kin.payment.v1.ProcessPaymentToUserResponse
	(*GetUserSpendTransactionLimitsRequest)(nil),                        // 20: mobile.kin.payment.v1.GetUserSpendTransactionLimitsRequest
	(*GetUserSpendTransactionLimitsResponse)(nil),                       // 21: mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse
	(*GetUsersReceiveTransactionLimitsRequest)(nil),                     // 22: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsRequest
	(*GetUsersReceiveTransactionLimitsResponse)(nil),                    // 23: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse
	(*UserTransactionLimits)(nil),                                       // 24: mobile.kin.payment.v1.UserTransactionLimits
	(*TransactionAmountLimits)(nil),                                     // 25: mobile.kin.payment.v1.TransactionAmountLimits
	(*v1.KikOfferIdOrUserOfferId)(nil),                                  // 26: common.offer.v1.KikOfferIdOrUserOfferId
	(*v1.UserOfferData)(nil),                                            // 27: common.offer.v1.UserOfferData
	(*v11.XiBareUserJidOrAliasJid)(nil),                                 // 28: common.v1.XiBareUserJidOrAliasJid
	(*v12.KinAmount)(nil),                                               // 29: common.kin.payment.v1.KinAmount
	(*v11.XiJWT)(nil),                                                   // 30: common.v1.XiJWT
	(*v1.KikUserOfferId)(nil),                                           // 31: common.offer.v1.KikUserOfferId
	(*_go.XiBareUserJid)(nil),                                           // 32: common.XiBareUserJid
	(*v12.PaymentInfo)(nil),                                             // 33: common.kin.payment.v1.PaymentInfo
	(*v13.OfferJwt)(nil),                                                // 34: common.kin.authentication.v1.OfferJwt
	(v12.Feature)(0),                                                    // 35: common.kin.payment.v1.Feature
}
var file_kin_payment_v1_feature_payment_service_proto_depIdxs = []int32{
	26, // 0: mobile.kin.payment.v1.GetKikOfferJwtRequest.offer_id:type_name -> common.offer.v1.KikOfferIdOrUserOfferId
	27, // 1: mobile.kin.payment.v1.GetKikOfferJwtRequest.user_offer_data:type_name -> common.offer.v1.UserOfferData
	28, // 2: mobile.kin.payment.v1.GetKikOfferJwtRequest.recipient_jid:type_name -> common.v1.XiBareUserJidOrAliasJid
	29, // 3: mobile.kin.payment.v1.GetKikOfferJwtRequest.amount:type_name -> common.kin.payment.v1.KinAmount
	0,  // 4: mobile.kin.payment.v1.GetKikOfferJwtResponse.result:type_name -> mobile.kin.payment.v1.GetKikOfferJwtResponse.Result
	1,  // 5: mobile.kin.payment.v1.GetKikOfferJwtResponse.rejection_reason:type_name -> mobile.kin.payment.v1.GetKikOfferJwtResponse.RejectionReason
	30, // 6: mobile.kin.payment.v1.GetKikOfferJwtResponse.offer_jwt:type_name -> common.v1.XiJWT
	31, // 7: mobile.kin.payment.v1.GetKikOfferJwtResponse.user_offer_id:type_name -> common.offer.v1.KikUserOfferId
	30, // 8: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationRequest.payment_confirmation_jwt:type_name -> common.v1.XiJWT
	31, // 9: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationRequest.user_offer_id:type_name -> common.offer.v1.KikUserOfferId
	2,  // 10: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse.result:type_name -> mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse.Result
	3,  // 11: mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse.rejection_reason:type_name -> mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse.RejectionReason
	32, // 12: mobile.kin.payment.v1.GetPayToUserJwtRequest.sender_user_jid:type_name -> common.XiBareUserJid
	28, // 13: mobile.kin.payment.v1.GetPayToUserJwtRequest.recipient_jid:type_name -> common.v1.XiBareUserJidOrAliasJid
	33, // 14: mobile.kin.payment.v1.GetPayToUserJwtRequest.payment_info:type_name -> common.kin.payment.v1.PaymentInfo
	4,  // 15: mobile.kin.payment.v1.GetPayToUserJwtResponse.result:type_name -> mobile.kin.payment.v1.GetPayToUserJwtResponse.Result
	5,  // 16: mobile.kin.payment.v1.GetPayToUserJwtResponse.rejection_reason:type_name -> mobile.kin.payment.v1.GetPayToUserJwtResponse.RejectionReason
	34, // 17: mobile.kin.payment.v1.GetPayToUserJwtResponse.pay_to_user_offer_jwt:type_name -> common.kin.authentication.v1.OfferJwt
	32, // 18: mobile.kin.payment.v1.ProcessPaymentToUserRequest.sender_user_jid:type_name -> common.XiBareUserJid
	28, // 19: mobile.kin.payment.v1.ProcessPaymentToUserRequest.recipient_jid:type_name -> common.v1.XiBareUserJidOrAliasJid
	33, // 20: mobile.kin.payment.v1.ProcessPaymentToUserRequest.payment_info:type_name -> common.kin.payment.v1.PaymentInfo
	30, // 21: mobile.kin.payment.v1.ProcessPaymentToUserRequest.payment_confirmation_jwt:type_name -> common.v1.XiJWT
	6,  // 22: mobile.kin.payment.v1.ProcessPaymentToUserResponse.result:type_name -> mobile.kin.payment.v1.ProcessPaymentToUserResponse.Result
	7,  // 23: mobile.kin.payment.v1.ProcessPaymentToUserResponse.rejection_reason:type_name -> mobile.kin.payment.v1.ProcessPaymentToUserResponse.RejectionReason
	32, // 24: mobile.kin.payment.v1.GetUserSpendTransactionLimitsRequest.user_jid:type_name -> common.XiBareUserJid
	35, // 25: mobile.kin.payment.v1.GetUserSpendTransactionLimitsRequest.feature:type_name -> common.kin.payment.v1.Feature
	8,  // 26: mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.result:type_name -> mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.Result
	9,  // 27: mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.rejection_reason:type_name -> mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.RejectionReason
	25, // 28: mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse.transaction_amount_limits:type_name -> mobile.kin.payment.v1.TransactionAmountLimits
	28, // 29: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsRequest.user_jids:type_name -> common.v1.XiBareUserJidOrAliasJid
	35, // 30: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsRequest.feature:type_name -> common.kin.payment.v1.Feature
	10, // 31: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.result:type_name -> mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.Result
	11, // 32: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.rejection_reason:type_name -> mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.RejectionReason
	24, // 33: mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse.user_transaction_limits:type_name -> mobile.kin.payment.v1.UserTransactionLimits
	28, // 34: mobile.kin.payment.v1.UserTransactionLimits.user_jid:type_name -> common.v1.XiBareUserJidOrAliasJid
	25, // 35: mobile.kin.payment.v1.UserTransactionLimits.transaction_amount_limits:type_name -> mobile.kin.payment.v1.TransactionAmountLimits
	29, // 36: mobile.kin.payment.v1.TransactionAmountLimits.max_amount:type_name -> common.kin.payment.v1.KinAmount
	29, // 37: mobile.kin.payment.v1.TransactionAmountLimits.daily_limit:type_name -> common.kin.payment.v1.KinAmount
	29, // 38: mobile.kin.payment.v1.TransactionAmountLimits.remaining_daily_limit:type_name -> common.kin.payment.v1.KinAmount
	12, // 39: mobile.kin.payment.v1.FeaturePayment.GetKikOfferJwt:input_type -> mobile.kin.payment.v1.GetKikOfferJwtRequest
	14, // 40: mobile.kin.payment.v1.FeaturePayment.ProcessKikOfferTransactionConfirmation:input_type -> mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationRequest
	16, // 41: mobile.kin.payment.v1.FeaturePayment.GetPayToUserJwt:input_type -> mobile.kin.payment.v1.GetPayToUserJwtRequest
	18, // 42: mobile.kin.payment.v1.FeaturePayment.ProcessPaymentToUser:input_type -> mobile.kin.payment.v1.ProcessPaymentToUserRequest
	20, // 43: mobile.kin.payment.v1.FeaturePayment.GetUserSpendTransactionLimits:input_type -> mobile.kin.payment.v1.GetUserSpendTransactionLimitsRequest
	22, // 44: mobile.kin.payment.v1.FeaturePayment.GetUsersReceiveTransactionLimits:input_type -> mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsRequest
	13, // 45: mobile.kin.payment.v1.FeaturePayment.GetKikOfferJwt:output_type -> mobile.kin.payment.v1.GetKikOfferJwtResponse
	15, // 46: mobile.kin.payment.v1.FeaturePayment.ProcessKikOfferTransactionConfirmation:output_type -> mobile.kin.payment.v1.ProcessKikOfferTransactionConfirmationResponse
	17, // 47: mobile.kin.payment.v1.FeaturePayment.GetPayToUserJwt:output_type -> mobile.kin.payment.v1.GetPayToUserJwtResponse
	19, // 48: mobile.kin.payment.v1.FeaturePayment.ProcessPaymentToUser:output_type -> mobile.kin.payment.v1.ProcessPaymentToUserResponse
	21, // 49: mobile.kin.payment.v1.FeaturePayment.GetUserSpendTransactionLimits:output_type -> mobile.kin.payment.v1.GetUserSpendTransactionLimitsResponse
	23, // 50: mobile.kin.payment.v1.FeaturePayment.GetUsersReceiveTransactionLimits:output_type -> mobile.kin.payment.v1.GetUsersReceiveTransactionLimitsResponse
	45, // [45:51] is the sub-list for method output_type
	39, // [39:45] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_kin_payment_v1_feature_payment_service_proto_init() }
func file_kin_payment_v1_feature_payment_service_proto_init() {
	if File_kin_payment_v1_feature_payment_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKikOfferJwtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKikOfferJwtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessKikOfferTransactionConfirmationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessKikOfferTransactionConfirmationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayToUserJwtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayToUserJwtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessPaymentToUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessPaymentToUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpendTransactionLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpendTransactionLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersReceiveTransactionLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersReceiveTransactionLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTransactionLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kin_payment_v1_feature_payment_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAmountLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kin_payment_v1_feature_payment_service_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kin_payment_v1_feature_payment_service_proto_goTypes,
		DependencyIndexes: file_kin_payment_v1_feature_payment_service_proto_depIdxs,
		EnumInfos:         file_kin_payment_v1_feature_payment_service_proto_enumTypes,
		MessageInfos:      file_kin_payment_v1_feature_payment_service_proto_msgTypes,
	}.Build()
	File_kin_payment_v1_feature_payment_service_proto = out.File
	file_kin_payment_v1_feature_payment_service_proto_rawDesc = nil
	file_kin_payment_v1_feature_payment_service_proto_goTypes = nil
	file_kin_payment_v1_feature_payment_service_proto_depIdxs = nil
}
