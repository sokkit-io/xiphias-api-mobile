// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: groups/v2/group_service.proto

package groups

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/chats/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/groups/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetGroupInfoShortResponse_Result int32

const (
	GetGroupInfoShortResponse_OK GetGroupInfoShortResponse_Result = 0
	// No group was found in which requesting persona could retrieve short group info.
	GetGroupInfoShortResponse_NOT_FOUND GetGroupInfoShortResponse_Result = 1
)

// Enum value maps for GetGroupInfoShortResponse_Result.
var (
	GetGroupInfoShortResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetGroupInfoShortResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetGroupInfoShortResponse_Result) Enum() *GetGroupInfoShortResponse_Result {
	p := new(GetGroupInfoShortResponse_Result)
	*p = x
	return p
}

func (x GetGroupInfoShortResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetGroupInfoShortResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[0].Descriptor()
}

func (GetGroupInfoShortResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[0]
}

func (x GetGroupInfoShortResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetGroupInfoShortResponse_Result.Descriptor instead.
func (GetGroupInfoShortResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{2, 0}
}

type GetGroupInfoFullResponse_Result int32

const (
	GetGroupInfoFullResponse_OK GetGroupInfoFullResponse_Result = 0
	// No group was found in which requesting persona could retrieve full group info.
	GetGroupInfoFullResponse_NOT_FOUND GetGroupInfoFullResponse_Result = 1
)

// Enum value maps for GetGroupInfoFullResponse_Result.
var (
	GetGroupInfoFullResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetGroupInfoFullResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetGroupInfoFullResponse_Result) Enum() *GetGroupInfoFullResponse_Result {
	p := new(GetGroupInfoFullResponse_Result)
	*p = x
	return p
}

func (x GetGroupInfoFullResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetGroupInfoFullResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[1].Descriptor()
}

func (GetGroupInfoFullResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[1]
}

func (x GetGroupInfoFullResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetGroupInfoFullResponse_Result.Descriptor instead.
func (GetGroupInfoFullResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{4, 0}
}

type GetBannedGroupMembersStreamResponse_Result int32

const (
	GetBannedGroupMembersStreamResponse_OK GetBannedGroupMembersStreamResponse_Result = 0
	// No group was found in which requesting persona could retrieve banned members.
	GetBannedGroupMembersStreamResponse_NOT_FOUND GetBannedGroupMembersStreamResponse_Result = 1
)

// Enum value maps for GetBannedGroupMembersStreamResponse_Result.
var (
	GetBannedGroupMembersStreamResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetBannedGroupMembersStreamResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetBannedGroupMembersStreamResponse_Result) Enum() *GetBannedGroupMembersStreamResponse_Result {
	p := new(GetBannedGroupMembersStreamResponse_Result)
	*p = x
	return p
}

func (x GetBannedGroupMembersStreamResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBannedGroupMembersStreamResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[2].Descriptor()
}

func (GetBannedGroupMembersStreamResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[2]
}

func (x GetBannedGroupMembersStreamResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBannedGroupMembersStreamResponse_Result.Descriptor instead.
func (GetBannedGroupMembersStreamResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{6, 0}
}

type CreateGroupResponse_Result int32

const (
	// The group creation request was successful OR
	// The group is already created / is being created and the caller is a valid member of the group.
	CreateGroupResponse_OK CreateGroupResponse_Result = 0
	// The provided group creation request contained restricted values.
	// See restricted_field for details on what was rejected.
	CreateGroupResponse_POLICY_RESTRICTION CreateGroupResponse_Result = 2
	// The provided hashtag is not unique and has already been taken. Hashtags must be unique.
	CreateGroupResponse_HASHTAG_NOT_UNIQUE CreateGroupResponse_Result = 3
	// Creator persona was not permitted to create a group chat with the given request.
	CreateGroupResponse_NOT_PERMITTED CreateGroupResponse_Result = 4
	// Creation denied - Creator has been banned from public groups too frequently.
	CreateGroupResponse_BAN_FREQUENCY_THRESHOLD CreateGroupResponse_Result = 5
	// Creation denied - Creator has created too many public groups recently.
	// Default messaging should indicate to wait 24h before creating more.
	CreateGroupResponse_CREATE_FREQUENCY_THRESHOLD CreateGroupResponse_Result = 6
	// Creation denied - When creating a private group, at least one additional member must be specified.
	CreateGroupResponse_BELOW_MINIMUM_MEMBERS CreateGroupResponse_Result = 7
	// Creation denied - When creating a private group, all specified members had some form of status
	// making them ineligible to be directly invited into a group by the creator.
	CreateGroupResponse_BAD_RELATION_STATUS CreateGroupResponse_Result = 8
)

// Enum value maps for CreateGroupResponse_Result.
var (
	CreateGroupResponse_Result_name = map[int32]string{
		0: "OK",
		2: "POLICY_RESTRICTION",
		3: "HASHTAG_NOT_UNIQUE",
		4: "NOT_PERMITTED",
		5: "BAN_FREQUENCY_THRESHOLD",
		6: "CREATE_FREQUENCY_THRESHOLD",
		7: "BELOW_MINIMUM_MEMBERS",
		8: "BAD_RELATION_STATUS",
	}
	CreateGroupResponse_Result_value = map[string]int32{
		"OK":                         0,
		"POLICY_RESTRICTION":         2,
		"HASHTAG_NOT_UNIQUE":         3,
		"NOT_PERMITTED":              4,
		"BAN_FREQUENCY_THRESHOLD":    5,
		"CREATE_FREQUENCY_THRESHOLD": 6,
		"BELOW_MINIMUM_MEMBERS":      7,
		"BAD_RELATION_STATUS":        8,
	}
)

func (x CreateGroupResponse_Result) Enum() *CreateGroupResponse_Result {
	p := new(CreateGroupResponse_Result)
	*p = x
	return p
}

func (x CreateGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[3].Descriptor()
}

func (CreateGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[3]
}

func (x CreateGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateGroupResponse_Result.Descriptor instead.
func (CreateGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{9, 0}
}

type CreateGroupResponse_RestrictedField int32

const (
	CreateGroupResponse_UNSPECIFIED   CreateGroupResponse_RestrictedField = 0
	CreateGroupResponse_GROUP_NAME    CreateGroupResponse_RestrictedField = 1
	CreateGroupResponse_GROUP_HASHTAG CreateGroupResponse_RestrictedField = 2
)

// Enum value maps for CreateGroupResponse_RestrictedField.
var (
	CreateGroupResponse_RestrictedField_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "GROUP_NAME",
		2: "GROUP_HASHTAG",
	}
	CreateGroupResponse_RestrictedField_value = map[string]int32{
		"UNSPECIFIED":   0,
		"GROUP_NAME":    1,
		"GROUP_HASHTAG": 2,
	}
)

func (x CreateGroupResponse_RestrictedField) Enum() *CreateGroupResponse_RestrictedField {
	p := new(CreateGroupResponse_RestrictedField)
	*p = x
	return p
}

func (x CreateGroupResponse_RestrictedField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateGroupResponse_RestrictedField) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[4].Descriptor()
}

func (CreateGroupResponse_RestrictedField) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[4]
}

func (x CreateGroupResponse_RestrictedField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateGroupResponse_RestrictedField.Descriptor instead.
func (CreateGroupResponse_RestrictedField) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{9, 1}
}

type LeaveGroupResponse_Result int32

const (
	LeaveGroupResponse_OK LeaveGroupResponse_Result = 0
)

// Enum value maps for LeaveGroupResponse_Result.
var (
	LeaveGroupResponse_Result_name = map[int32]string{
		0: "OK",
	}
	LeaveGroupResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x LeaveGroupResponse_Result) Enum() *LeaveGroupResponse_Result {
	p := new(LeaveGroupResponse_Result)
	*p = x
	return p
}

func (x LeaveGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaveGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[5].Descriptor()
}

func (LeaveGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[5]
}

func (x LeaveGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaveGroupResponse_Result.Descriptor instead.
func (LeaveGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{11, 0}
}

type AddToGroupResponse_Result int32

const (
	// The request was successfully processed. Note that this does not mean all new member ids
	// specified in the request were successfully added to the group. See failure_details for any failures.
	AddToGroupResponse_OK AddToGroupResponse_Result = 0
	// Adder was not permitted to add other personas to this group chat.
	AddToGroupResponse_NOT_PERMITTED AddToGroupResponse_Result = 1
	// All specified new members had some form of status making them ineligible to be directly invited
	// into the group by the acting user.
	AddToGroupResponse_BAD_RELATION_STATUS AddToGroupResponse_Result = 2
)

// Enum value maps for AddToGroupResponse_Result.
var (
	AddToGroupResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
		2: "BAD_RELATION_STATUS",
	}
	AddToGroupResponse_Result_value = map[string]int32{
		"OK":                  0,
		"NOT_PERMITTED":       1,
		"BAD_RELATION_STATUS": 2,
	}
)

func (x AddToGroupResponse_Result) Enum() *AddToGroupResponse_Result {
	p := new(AddToGroupResponse_Result)
	*p = x
	return p
}

func (x AddToGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddToGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[6].Descriptor()
}

func (AddToGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[6]
}

func (x AddToGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddToGroupResponse_Result.Descriptor instead.
func (AddToGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{13, 0}
}

type AddToGroupResponse_FailureDetails_Reason int32

const (
	// An unknown/transient failure occurred while adding this persona. Caller should retry.
	AddToGroupResponse_FailureDetails_UNKNOWN AddToGroupResponse_FailureDetails_Reason = 0
	// Persona is banned from the chat.
	AddToGroupResponse_FailureDetails_BANNED AddToGroupResponse_FailureDetails_Reason = 1
	// Group member limit was reached.
	AddToGroupResponse_FailureDetails_GROUP_FULL AddToGroupResponse_FailureDetails_Reason = 2
	// Adder was not permitted to add this persona to the group chat.
	AddToGroupResponse_FailureDetails_NOT_PERMITTED AddToGroupResponse_FailureDetails_Reason = 3
	// Unable to add more bots to the group.  Existing bots must be removed before adding new ones.
	AddToGroupResponse_FailureDetails_BOT_LIMIT_REACHED AddToGroupResponse_FailureDetails_Reason = 4
)

// Enum value maps for AddToGroupResponse_FailureDetails_Reason.
var (
	AddToGroupResponse_FailureDetails_Reason_name = map[int32]string{
		0: "UNKNOWN",
		1: "BANNED",
		2: "GROUP_FULL",
		3: "NOT_PERMITTED",
		4: "BOT_LIMIT_REACHED",
	}
	AddToGroupResponse_FailureDetails_Reason_value = map[string]int32{
		"UNKNOWN":           0,
		"BANNED":            1,
		"GROUP_FULL":        2,
		"NOT_PERMITTED":     3,
		"BOT_LIMIT_REACHED": 4,
	}
)

func (x AddToGroupResponse_FailureDetails_Reason) Enum() *AddToGroupResponse_FailureDetails_Reason {
	p := new(AddToGroupResponse_FailureDetails_Reason)
	*p = x
	return p
}

func (x AddToGroupResponse_FailureDetails_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddToGroupResponse_FailureDetails_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[7].Descriptor()
}

func (AddToGroupResponse_FailureDetails_Reason) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[7]
}

func (x AddToGroupResponse_FailureDetails_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddToGroupResponse_FailureDetails_Reason.Descriptor instead.
func (AddToGroupResponse_FailureDetails_Reason) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{13, 0, 0}
}

type RemoveFromGroupResponse_Result int32

const (
	// The request was successfully processed. Note that this does not mean all removee ids
	// specified in the request were sucessfully removed to the group. See failure_details for any failures.
	RemoveFromGroupResponse_OK RemoveFromGroupResponse_Result = 0
	// Remover was not permitted to remove other personas from this group chat.
	RemoveFromGroupResponse_NOT_PERMITTED RemoveFromGroupResponse_Result = 1
)

// Enum value maps for RemoveFromGroupResponse_Result.
var (
	RemoveFromGroupResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
	}
	RemoveFromGroupResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
	}
)

func (x RemoveFromGroupResponse_Result) Enum() *RemoveFromGroupResponse_Result {
	p := new(RemoveFromGroupResponse_Result)
	*p = x
	return p
}

func (x RemoveFromGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveFromGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[8].Descriptor()
}

func (RemoveFromGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[8]
}

func (x RemoveFromGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveFromGroupResponse_Result.Descriptor instead.
func (RemoveFromGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{15, 0}
}

type RemoveFromGroupResponse_FailureDetails_Reason int32

const (
	// An unknown/transient failure occurred while removing this persona. Caller should retry.
	RemoveFromGroupResponse_FailureDetails_UNKNOWN RemoveFromGroupResponse_FailureDetails_Reason = 0
	// The remover was not permitted to remove this persona from the group chat.
	RemoveFromGroupResponse_FailureDetails_NOT_PERMITTED RemoveFromGroupResponse_FailureDetails_Reason = 1
)

// Enum value maps for RemoveFromGroupResponse_FailureDetails_Reason.
var (
	RemoveFromGroupResponse_FailureDetails_Reason_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOT_PERMITTED",
	}
	RemoveFromGroupResponse_FailureDetails_Reason_value = map[string]int32{
		"UNKNOWN":       0,
		"NOT_PERMITTED": 1,
	}
)

func (x RemoveFromGroupResponse_FailureDetails_Reason) Enum() *RemoveFromGroupResponse_FailureDetails_Reason {
	p := new(RemoveFromGroupResponse_FailureDetails_Reason)
	*p = x
	return p
}

func (x RemoveFromGroupResponse_FailureDetails_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveFromGroupResponse_FailureDetails_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[9].Descriptor()
}

func (RemoveFromGroupResponse_FailureDetails_Reason) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[9]
}

func (x RemoveFromGroupResponse_FailureDetails_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveFromGroupResponse_FailureDetails_Reason.Descriptor instead.
func (RemoveFromGroupResponse_FailureDetails_Reason) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{15, 0, 0}
}

type SetGroupNameResponse_Result int32

const (
	// The name was successfully changed.
	SetGroupNameResponse_OK SetGroupNameResponse_Result = 0
	// The caller was not permitted to change the group name.
	SetGroupNameResponse_NOT_PERMITTED SetGroupNameResponse_Result = 1
	// The new name was rejected due to its content.
	SetGroupNameResponse_NAME_RESTRICTED SetGroupNameResponse_Result = 2
)

// Enum value maps for SetGroupNameResponse_Result.
var (
	SetGroupNameResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
		2: "NAME_RESTRICTED",
	}
	SetGroupNameResponse_Result_value = map[string]int32{
		"OK":              0,
		"NOT_PERMITTED":   1,
		"NAME_RESTRICTED": 2,
	}
)

func (x SetGroupNameResponse_Result) Enum() *SetGroupNameResponse_Result {
	p := new(SetGroupNameResponse_Result)
	*p = x
	return p
}

func (x SetGroupNameResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetGroupNameResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[10].Descriptor()
}

func (SetGroupNameResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[10]
}

func (x SetGroupNameResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetGroupNameResponse_Result.Descriptor instead.
func (SetGroupNameResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{17, 0}
}

type GetGroupInfoByInviteCodeResponse_Result int32

const (
	// The group info has been returned if the caller is not a member of the group,
	// otherwise the group's ChatId is returned.
	GetGroupInfoByInviteCodeResponse_OK GetGroupInfoByInviteCodeResponse_Result = 0
	// No group found for the invite code, or group has been deleted, or the inviter is no longer
	// a member of the group, or has been banned, or is inactive.
	GetGroupInfoByInviteCodeResponse_NOT_FOUND GetGroupInfoByInviteCodeResponse_Result = 1
)

// Enum value maps for GetGroupInfoByInviteCodeResponse_Result.
var (
	GetGroupInfoByInviteCodeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetGroupInfoByInviteCodeResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetGroupInfoByInviteCodeResponse_Result) Enum() *GetGroupInfoByInviteCodeResponse_Result {
	p := new(GetGroupInfoByInviteCodeResponse_Result)
	*p = x
	return p
}

func (x GetGroupInfoByInviteCodeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetGroupInfoByInviteCodeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[11].Descriptor()
}

func (GetGroupInfoByInviteCodeResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[11]
}

func (x GetGroupInfoByInviteCodeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetGroupInfoByInviteCodeResponse_Result.Descriptor instead.
func (GetGroupInfoByInviteCodeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{19, 0}
}

type GetGroupInfoByJoinTokenResponse_Result int32

const (
	// The group info has been returned if the caller is not a member of the group,
	// otherwise the group's ChatId is returned.
	GetGroupInfoByJoinTokenResponse_OK GetGroupInfoByJoinTokenResponse_Result = 0
	// No group was found for the join token, or the token has expired, or the group has been deleted.
	GetGroupInfoByJoinTokenResponse_NOT_FOUND GetGroupInfoByJoinTokenResponse_Result = 1
)

// Enum value maps for GetGroupInfoByJoinTokenResponse_Result.
var (
	GetGroupInfoByJoinTokenResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetGroupInfoByJoinTokenResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetGroupInfoByJoinTokenResponse_Result) Enum() *GetGroupInfoByJoinTokenResponse_Result {
	p := new(GetGroupInfoByJoinTokenResponse_Result)
	*p = x
	return p
}

func (x GetGroupInfoByJoinTokenResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetGroupInfoByJoinTokenResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[12].Descriptor()
}

func (GetGroupInfoByJoinTokenResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[12]
}

func (x GetGroupInfoByJoinTokenResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetGroupInfoByJoinTokenResponse_Result.Descriptor instead.
func (GetGroupInfoByJoinTokenResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{21, 0}
}

type JoinPublicGroupResponse_Result int32

const (
	// The request was successfully processed.  Requestor is now a member of the requested group.
	// NOTE: this is also provided if the user was already a member of the group.
	JoinPublicGroupResponse_OK JoinPublicGroupResponse_Result = 0
	// There was a problem with the provided token.  Token is not usable.
	// NOTE: This is also the return code provided when the group no longer exists.
	JoinPublicGroupResponse_INVALID_TOKEN JoinPublicGroupResponse_Result = 1
	// Requestor was not permitted to join the group (reason intentionally unspecified).
	// Possible causes: Spam bouncer system denial, invalid/incorrect join token,
	// attempting to join a non-public group, etc.
	JoinPublicGroupResponse_NOT_PERMITTED JoinPublicGroupResponse_Result = 2
	// Requestor may not join the group due to a pre-existing banned status.
	JoinPublicGroupResponse_BANNED JoinPublicGroupResponse_Result = 3
	// Group member limit was reached.
	JoinPublicGroupResponse_GROUP_FULL JoinPublicGroupResponse_Result = 4
	// Requestor has Joined too many public groups recently.
	JoinPublicGroupResponse_JOIN_FREQUENCY_THRESHOLD JoinPublicGroupResponse_Result = 5
	// Requestor has been banned from too many public groups recently.
	JoinPublicGroupResponse_BAN_FREQUENCY_THRESHOLD JoinPublicGroupResponse_Result = 6
)

// Enum value maps for JoinPublicGroupResponse_Result.
var (
	JoinPublicGroupResponse_Result_name = map[int32]string{
		0: "OK",
		1: "INVALID_TOKEN",
		2: "NOT_PERMITTED",
		3: "BANNED",
		4: "GROUP_FULL",
		5: "JOIN_FREQUENCY_THRESHOLD",
		6: "BAN_FREQUENCY_THRESHOLD",
	}
	JoinPublicGroupResponse_Result_value = map[string]int32{
		"OK":                       0,
		"INVALID_TOKEN":            1,
		"NOT_PERMITTED":            2,
		"BANNED":                   3,
		"GROUP_FULL":               4,
		"JOIN_FREQUENCY_THRESHOLD": 5,
		"BAN_FREQUENCY_THRESHOLD":  6,
	}
)

func (x JoinPublicGroupResponse_Result) Enum() *JoinPublicGroupResponse_Result {
	p := new(JoinPublicGroupResponse_Result)
	*p = x
	return p
}

func (x JoinPublicGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinPublicGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[13].Descriptor()
}

func (JoinPublicGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[13]
}

func (x JoinPublicGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinPublicGroupResponse_Result.Descriptor instead.
func (JoinPublicGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{23, 0}
}

type JoinGroupByInviteCodeRequest_CodeSource int32

const (
	JoinGroupByInviteCodeRequest_CODE JoinGroupByInviteCodeRequest_CodeSource = 0
	JoinGroupByInviteCodeRequest_LINK JoinGroupByInviteCodeRequest_CodeSource = 1
)

// Enum value maps for JoinGroupByInviteCodeRequest_CodeSource.
var (
	JoinGroupByInviteCodeRequest_CodeSource_name = map[int32]string{
		0: "CODE",
		1: "LINK",
	}
	JoinGroupByInviteCodeRequest_CodeSource_value = map[string]int32{
		"CODE": 0,
		"LINK": 1,
	}
)

func (x JoinGroupByInviteCodeRequest_CodeSource) Enum() *JoinGroupByInviteCodeRequest_CodeSource {
	p := new(JoinGroupByInviteCodeRequest_CodeSource)
	*p = x
	return p
}

func (x JoinGroupByInviteCodeRequest_CodeSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinGroupByInviteCodeRequest_CodeSource) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[14].Descriptor()
}

func (JoinGroupByInviteCodeRequest_CodeSource) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[14]
}

func (x JoinGroupByInviteCodeRequest_CodeSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinGroupByInviteCodeRequest_CodeSource.Descriptor instead.
func (JoinGroupByInviteCodeRequest_CodeSource) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{24, 0}
}

type JoinGroupByInviteCodeResponse_Result int32

const (
	// The request was successfully processed.  Requestor is now a member of the group associated with the invite code.
	JoinGroupByInviteCodeResponse_OK JoinGroupByInviteCodeResponse_Result = 0
	// Invite code is not valid.
	// This may happen in a few cases:
	//  - Invite code not found
	//  - Group not found
	//  - User that generated the code is no longer a member of the group
	JoinGroupByInviteCodeResponse_INVALID_INVITE_CODE JoinGroupByInviteCodeResponse_Result = 1
	// Requestor was not permitted to join the group (reason intentionally unspecified).
	// Possible causes: Spam bouncer system denial, etc.
	JoinGroupByInviteCodeResponse_NOT_PERMITTED JoinGroupByInviteCodeResponse_Result = 2
	// Requestor may not join the group due to a pre-existing banned status.
	JoinGroupByInviteCodeResponse_BANNED JoinGroupByInviteCodeResponse_Result = 3
	// Group member limit was reached.
	JoinGroupByInviteCodeResponse_GROUP_FULL JoinGroupByInviteCodeResponse_Result = 4
)

// Enum value maps for JoinGroupByInviteCodeResponse_Result.
var (
	JoinGroupByInviteCodeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "INVALID_INVITE_CODE",
		2: "NOT_PERMITTED",
		3: "BANNED",
		4: "GROUP_FULL",
	}
	JoinGroupByInviteCodeResponse_Result_value = map[string]int32{
		"OK":                  0,
		"INVALID_INVITE_CODE": 1,
		"NOT_PERMITTED":       2,
		"BANNED":              3,
		"GROUP_FULL":          4,
	}
)

func (x JoinGroupByInviteCodeResponse_Result) Enum() *JoinGroupByInviteCodeResponse_Result {
	p := new(JoinGroupByInviteCodeResponse_Result)
	*p = x
	return p
}

func (x JoinGroupByInviteCodeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinGroupByInviteCodeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[15].Descriptor()
}

func (JoinGroupByInviteCodeResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[15]
}

func (x JoinGroupByInviteCodeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinGroupByInviteCodeResponse_Result.Descriptor instead.
func (JoinGroupByInviteCodeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{25, 0}
}

type CreateInviteCodeResponse_Result int32

const (
	// An invite code was successfully created and has been returned.
	CreateInviteCodeResponse_OK CreateInviteCodeResponse_Result = 0
	// Requestor was not permitted to create an invite code for the group (reason intentionally unspecified).
	// Possible causes: Not a member of the group, banned from the group, group is deleted.
	CreateInviteCodeResponse_NOT_PERMITTED CreateInviteCodeResponse_Result = 1
)

// Enum value maps for CreateInviteCodeResponse_Result.
var (
	CreateInviteCodeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
	}
	CreateInviteCodeResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
	}
)

func (x CreateInviteCodeResponse_Result) Enum() *CreateInviteCodeResponse_Result {
	p := new(CreateInviteCodeResponse_Result)
	*p = x
	return p
}

func (x CreateInviteCodeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateInviteCodeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[16].Descriptor()
}

func (CreateInviteCodeResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[16]
}

func (x CreateInviteCodeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateInviteCodeResponse_Result.Descriptor instead.
func (CreateInviteCodeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{27, 0}
}

type BanFromGroupResponse_Result int32

const (
	// Ban was successful, or persona was already banned.
	BanFromGroupResponse_OK BanFromGroupResponse_Result = 0
	// Acting user does not have the authority to ban.
	// Requires Admin status to ban regular members, or SuperAdmin status if target is an Admin.
	BanFromGroupResponse_NOT_PERMITTED BanFromGroupResponse_Result = 1
	// Ban list has a limited size, and is already full.
	// In order to succeed, other personas must first be removed from the ban list via UnBanFromGroup
	BanFromGroupResponse_BAN_LIST_FULL BanFromGroupResponse_Result = 2
)

// Enum value maps for BanFromGroupResponse_Result.
var (
	BanFromGroupResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
		2: "BAN_LIST_FULL",
	}
	BanFromGroupResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
		"BAN_LIST_FULL": 2,
	}
)

func (x BanFromGroupResponse_Result) Enum() *BanFromGroupResponse_Result {
	p := new(BanFromGroupResponse_Result)
	*p = x
	return p
}

func (x BanFromGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BanFromGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[17].Descriptor()
}

func (BanFromGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[17]
}

func (x BanFromGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BanFromGroupResponse_Result.Descriptor instead.
func (BanFromGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{29, 0}
}

type UnbanFromGroupResponse_Result int32

const (
	// Unban was successful, or persona not in the ban list.
	UnbanFromGroupResponse_OK UnbanFromGroupResponse_Result = 0
	// Acting user does not have the authority to unban.  Requires group Admin status.
	UnbanFromGroupResponse_NOT_PERMITTED UnbanFromGroupResponse_Result = 1
)

// Enum value maps for UnbanFromGroupResponse_Result.
var (
	UnbanFromGroupResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
	}
	UnbanFromGroupResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
	}
)

func (x UnbanFromGroupResponse_Result) Enum() *UnbanFromGroupResponse_Result {
	p := new(UnbanFromGroupResponse_Result)
	*p = x
	return p
}

func (x UnbanFromGroupResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnbanFromGroupResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[18].Descriptor()
}

func (UnbanFromGroupResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[18]
}

func (x UnbanFromGroupResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnbanFromGroupResponse_Result.Descriptor instead.
func (UnbanFromGroupResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{31, 0}
}

type PromoteMemberResponse_Result int32

const (
	// Promotion was successful, or persona already had Admin status.
	PromoteMemberResponse_OK PromoteMemberResponse_Result = 0
	// Acting user does not have the authority to promote.
	// Requires Admin or SuperAdmin status.
	PromoteMemberResponse_NOT_PERMITTED PromoteMemberResponse_Result = 1
)

// Enum value maps for PromoteMemberResponse_Result.
var (
	PromoteMemberResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
	}
	PromoteMemberResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
	}
)

func (x PromoteMemberResponse_Result) Enum() *PromoteMemberResponse_Result {
	p := new(PromoteMemberResponse_Result)
	*p = x
	return p
}

func (x PromoteMemberResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoteMemberResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[19].Descriptor()
}

func (PromoteMemberResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[19]
}

func (x PromoteMemberResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromoteMemberResponse_Result.Descriptor instead.
func (PromoteMemberResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{33, 0}
}

type DemoteMemberResponse_Result int32

const (
	// Demotion was successful, or persona was already a standard (non-Admin) member.
	DemoteMemberResponse_OK DemoteMemberResponse_Result = 0
	// Acting user does not have the authority to demote target.
	// Requires SuperAdmin status to demote an Admin; SuperAdmin cannot be demoted.
	DemoteMemberResponse_NOT_PERMITTED DemoteMemberResponse_Result = 1
)

// Enum value maps for DemoteMemberResponse_Result.
var (
	DemoteMemberResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
	}
	DemoteMemberResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
	}
)

func (x DemoteMemberResponse_Result) Enum() *DemoteMemberResponse_Result {
	p := new(DemoteMemberResponse_Result)
	*p = x
	return p
}

func (x DemoteMemberResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DemoteMemberResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[20].Descriptor()
}

func (DemoteMemberResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[20]
}

func (x DemoteMemberResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DemoteMemberResponse_Result.Descriptor instead.
func (DemoteMemberResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{35, 0}
}

type SetIsDirectMessagingBlockedResponse_Result int32

const (
	// Request was processed successfully.
	SetIsDirectMessagingBlockedResponse_OK SetIsDirectMessagingBlockedResponse_Result = 0
	// The provided ChatId was not a public group chat that the caller was a member of.
	SetIsDirectMessagingBlockedResponse_NOT_FOUND SetIsDirectMessagingBlockedResponse_Result = 1
)

// Enum value maps for SetIsDirectMessagingBlockedResponse_Result.
var (
	SetIsDirectMessagingBlockedResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	SetIsDirectMessagingBlockedResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x SetIsDirectMessagingBlockedResponse_Result) Enum() *SetIsDirectMessagingBlockedResponse_Result {
	p := new(SetIsDirectMessagingBlockedResponse_Result)
	*p = x
	return p
}

func (x SetIsDirectMessagingBlockedResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetIsDirectMessagingBlockedResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[21].Descriptor()
}

func (SetIsDirectMessagingBlockedResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[21]
}

func (x SetIsDirectMessagingBlockedResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetIsDirectMessagingBlockedResponse_Result.Descriptor instead.
func (SetIsDirectMessagingBlockedResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{37, 0}
}

type SetChatThemeLockRequest_Action int32

const (
	SetChatThemeLockRequest_LOCK   SetChatThemeLockRequest_Action = 0
	SetChatThemeLockRequest_UNLOCK SetChatThemeLockRequest_Action = 1
)

// Enum value maps for SetChatThemeLockRequest_Action.
var (
	SetChatThemeLockRequest_Action_name = map[int32]string{
		0: "LOCK",
		1: "UNLOCK",
	}
	SetChatThemeLockRequest_Action_value = map[string]int32{
		"LOCK":   0,
		"UNLOCK": 1,
	}
)

func (x SetChatThemeLockRequest_Action) Enum() *SetChatThemeLockRequest_Action {
	p := new(SetChatThemeLockRequest_Action)
	*p = x
	return p
}

func (x SetChatThemeLockRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetChatThemeLockRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[22].Descriptor()
}

func (SetChatThemeLockRequest_Action) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[22]
}

func (x SetChatThemeLockRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetChatThemeLockRequest_Action.Descriptor instead.
func (SetChatThemeLockRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{38, 0}
}

type SetChatThemeLockResponse_Result int32

const (
	// Set/unset chat theme lock was successful
	SetChatThemeLockResponse_OK SetChatThemeLockResponse_Result = 0
	// Acting user does not have the authority to set/unset theme lock.
	// User must be either admin or super admin to perform this action.
	SetChatThemeLockResponse_NOT_PERMITTED SetChatThemeLockResponse_Result = 1
)

// Enum value maps for SetChatThemeLockResponse_Result.
var (
	SetChatThemeLockResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_PERMITTED",
	}
	SetChatThemeLockResponse_Result_value = map[string]int32{
		"OK":            0,
		"NOT_PERMITTED": 1,
	}
)

func (x SetChatThemeLockResponse_Result) Enum() *SetChatThemeLockResponse_Result {
	p := new(SetChatThemeLockResponse_Result)
	*p = x
	return p
}

func (x SetChatThemeLockResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetChatThemeLockResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_groups_v2_group_service_proto_enumTypes[23].Descriptor()
}

func (SetChatThemeLockResponse_Result) Type() protoreflect.EnumType {
	return &file_groups_v2_group_service_proto_enumTypes[23]
}

func (x SetChatThemeLockResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetChatThemeLockResponse_Result.Descriptor instead.
func (SetChatThemeLockResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{39, 0}
}

// FrequencyErrorDetails is used to describe the frequency limitations imposed on an API call when
// a specific error response code is returned.
// The intent is to describe "N operations per P"
type FrequencyErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of operations that are permitted in a particular period of time.
	FrequencyLimit uint32 `protobuf:"varint,4,opt,name=frequency_limit,json=frequencyLimit,proto3" json:"frequency_limit,omitempty"`
	// Time period over which the number of operations is restricted.
	FrequencyLimitDuration *duration.Duration `protobuf:"bytes,5,opt,name=frequency_limit_duration,json=frequencyLimitDuration,proto3" json:"frequency_limit_duration,omitempty"`
}

func (x *FrequencyErrorDetails) Reset() {
	*x = FrequencyErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyErrorDetails) ProtoMessage() {}

func (x *FrequencyErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyErrorDetails.ProtoReflect.Descriptor instead.
func (*FrequencyErrorDetails) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{0}
}

func (x *FrequencyErrorDetails) GetFrequencyLimit() uint32 {
	if x != nil {
		return x.FrequencyLimit
	}
	return 0
}

func (x *FrequencyErrorDetails) GetFrequencyLimitDuration() *duration.Duration {
	if x != nil {
		return x.FrequencyLimitDuration
	}
	return nil
}

type GetGroupInfoShortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona with the necessary permissions in the group chat to view short group chat info.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Requestor *v2.PersonaId `protobuf:"bytes,2,opt,name=requestor,proto3" json:"requestor,omitempty"`
}

func (x *GetGroupInfoShortRequest) Reset() {
	*x = GetGroupInfoShortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoShortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoShortRequest) ProtoMessage() {}

func (x *GetGroupInfoShortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoShortRequest.ProtoReflect.Descriptor instead.
func (*GetGroupInfoShortRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetGroupInfoShortRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetGroupInfoShortRequest) GetRequestor() *v2.PersonaId {
	if x != nil {
		return x.Requestor
	}
	return nil
}

type GetGroupInfoShortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetGroupInfoShortResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.GetGroupInfoShortResponse_Result" json:"result,omitempty"`
	// Set if result == OK.
	Info *v21.GroupInfoShort `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetGroupInfoShortResponse) Reset() {
	*x = GetGroupInfoShortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoShortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoShortResponse) ProtoMessage() {}

func (x *GetGroupInfoShortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoShortResponse.ProtoReflect.Descriptor instead.
func (*GetGroupInfoShortResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupInfoShortResponse) GetResult() GetGroupInfoShortResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetGroupInfoShortResponse_OK
}

func (x *GetGroupInfoShortResponse) GetInfo() *v21.GroupInfoShort {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGroupInfoFullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona with the necessary permissions in the group chat to view full group chat info.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Requestor *v2.PersonaId `protobuf:"bytes,2,opt,name=requestor,proto3" json:"requestor,omitempty"`
}

func (x *GetGroupInfoFullRequest) Reset() {
	*x = GetGroupInfoFullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoFullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoFullRequest) ProtoMessage() {}

func (x *GetGroupInfoFullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoFullRequest.ProtoReflect.Descriptor instead.
func (*GetGroupInfoFullRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupInfoFullRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetGroupInfoFullRequest) GetRequestor() *v2.PersonaId {
	if x != nil {
		return x.Requestor
	}
	return nil
}

type GetGroupInfoFullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetGroupInfoFullResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.GetGroupInfoFullResponse_Result" json:"result,omitempty"`
	// Set if result == OK.
	Info *v21.GroupInfoFull `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetGroupInfoFullResponse) Reset() {
	*x = GetGroupInfoFullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoFullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoFullResponse) ProtoMessage() {}

func (x *GetGroupInfoFullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoFullResponse.ProtoReflect.Descriptor instead.
func (*GetGroupInfoFullResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetGroupInfoFullResponse) GetResult() GetGroupInfoFullResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetGroupInfoFullResponse_OK
}

func (x *GetGroupInfoFullResponse) GetInfo() *v21.GroupInfoFull {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetBannedGroupMembersStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona with the necessary permissions in the group chat to view banned members.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Requestor *v2.PersonaId `protobuf:"bytes,2,opt,name=requestor,proto3" json:"requestor,omitempty"`
}

func (x *GetBannedGroupMembersStreamRequest) Reset() {
	*x = GetBannedGroupMembersStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannedGroupMembersStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannedGroupMembersStreamRequest) ProtoMessage() {}

func (x *GetBannedGroupMembersStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannedGroupMembersStreamRequest.ProtoReflect.Descriptor instead.
func (*GetBannedGroupMembersStreamRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetBannedGroupMembersStreamRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetBannedGroupMembersStreamRequest) GetRequestor() *v2.PersonaId {
	if x != nil {
		return x.Requestor
	}
	return nil
}

type GetBannedGroupMembersStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetBannedGroupMembersStreamResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.GetBannedGroupMembersStreamResponse_Result" json:"result,omitempty"`
	// Set if result == OK
	BannedGroupMembers []*BannedGroupMember `protobuf:"bytes,2,rep,name=banned_group_members,json=bannedGroupMembers,proto3" json:"banned_group_members,omitempty"`
}

func (x *GetBannedGroupMembersStreamResponse) Reset() {
	*x = GetBannedGroupMembersStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannedGroupMembersStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannedGroupMembersStreamResponse) ProtoMessage() {}

func (x *GetBannedGroupMembersStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannedGroupMembersStreamResponse.ProtoReflect.Descriptor instead.
func (*GetBannedGroupMembersStreamResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetBannedGroupMembersStreamResponse) GetResult() GetBannedGroupMembersStreamResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetBannedGroupMembersStreamResponse_OK
}

func (x *GetBannedGroupMembersStreamResponse) GetBannedGroupMembers() []*BannedGroupMember {
	if x != nil {
		return x.BannedGroupMembers
	}
	return nil
}

// Banned Member of a group
type BannedGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of group member
	// Keep this field compatible with the common.groups.v2.GroupMember message
	PersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
}

func (x *BannedGroupMember) Reset() {
	*x = BannedGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedGroupMember) ProtoMessage() {}

func (x *BannedGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedGroupMember.ProtoReflect.Descriptor instead.
func (*BannedGroupMember) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{7}
}

func (x *BannedGroupMember) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

type CreateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creator of the group.
	Creator *v2.PersonaId `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// Initial members of the group NOT including the group creator.
	// Note that the upper bound on the number of members in a group is a
	// configuration setting and likely to be less than 1024.
	InitialMembers []*v2.PersonaId `protobuf:"bytes,2,rep,name=initial_members,json=initialMembers,proto3" json:"initial_members,omitempty"`
	// Optional name of the group.
	GroupName *v22.GroupName `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Set this if creating a public group.
	PublicGroupFields *v22.PublicGroupFields `protobuf:"bytes,4,opt,name=public_group_fields,json=publicGroupFields,proto3" json:"public_group_fields,omitempty"`
	// Mandatory request id used to make this call idempotent and avoid races.
	// The request id should be unique and randomly generated by the client for each group to be created.
	// The request will fail if this id is not unique, meaning the group
	// is already created/being created.
	RequestId *v2.Uuid `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateGroupRequest) GetCreator() *v2.PersonaId {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *CreateGroupRequest) GetInitialMembers() []*v2.PersonaId {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

func (x *CreateGroupRequest) GetGroupName() *v22.GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *CreateGroupRequest) GetPublicGroupFields() *v22.PublicGroupFields {
	if x != nil {
		return x.PublicGroupFields
	}
	return nil
}

func (x *CreateGroupRequest) GetRequestId() *v2.Uuid {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type CreateGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CreateGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.CreateGroupResponse_Result" json:"result,omitempty"`
	// Chat info for the newly created chat. This will only be set if result == OK.
	Chat *v21.Chat `protobuf:"bytes,2,opt,name=chat,proto3" json:"chat,omitempty"`
	// This field is set if result == POLICY_RESTRICTION.
	// Will contain the all RestrictedFields in the request that caused the request to fail with POLICY_RESTRICTION.
	RestrictedFields []CreateGroupResponse_RestrictedField `protobuf:"varint,3,rep,packed,name=restricted_fields,json=restrictedFields,proto3,enum=mobile.groups.v2.CreateGroupResponse_RestrictedField" json:"restricted_fields,omitempty"`
	// Error details provided when response Result is BAN_FREQUENCY_THRESHOLD or CREATE_FREQUENCY_THRESHOLD
	// Field will be absent at all other times.
	CreateFrequencyErrorDetails *FrequencyErrorDetails `protobuf:"bytes,4,opt,name=create_frequency_error_details,json=createFrequencyErrorDetails,proto3" json:"create_frequency_error_details,omitempty"`
}

func (x *CreateGroupResponse) Reset() {
	*x = CreateGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResponse) ProtoMessage() {}

func (x *CreateGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateGroupResponse) GetResult() CreateGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return CreateGroupResponse_OK
}

func (x *CreateGroupResponse) GetChat() *v21.Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *CreateGroupResponse) GetRestrictedFields() []CreateGroupResponse_RestrictedField {
	if x != nil {
		return x.RestrictedFields
	}
	return nil
}

func (x *CreateGroupResponse) GetCreateFrequencyErrorDetails() *FrequencyErrorDetails {
	if x != nil {
		return x.CreateFrequencyErrorDetails
	}
	return nil
}

type LeaveGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group chat to leave.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona leaving group.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Leaver *v2.PersonaId `protobuf:"bytes,2,opt,name=leaver,proto3" json:"leaver,omitempty"`
}

func (x *LeaveGroupRequest) Reset() {
	*x = LeaveGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupRequest) ProtoMessage() {}

func (x *LeaveGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupRequest.ProtoReflect.Descriptor instead.
func (*LeaveGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{10}
}

func (x *LeaveGroupRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *LeaveGroupRequest) GetLeaver() *v2.PersonaId {
	if x != nil {
		return x.Leaver
	}
	return nil
}

type LeaveGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result LeaveGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.LeaveGroupResponse_Result" json:"result,omitempty"`
}

func (x *LeaveGroupResponse) Reset() {
	*x = LeaveGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupResponse) ProtoMessage() {}

func (x *LeaveGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupResponse.ProtoReflect.Descriptor instead.
func (*LeaveGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{11}
}

func (x *LeaveGroupResponse) GetResult() LeaveGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return LeaveGroupResponse_OK
}

// Adds a list of new members to the group.
// The caller must be a member of the group and have the necessary permissions
// to add other personas to the group.
type AddToGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat to add persona to.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona adding members to the group.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Adder *v2.PersonaId `protobuf:"bytes,2,opt,name=adder,proto3" json:"adder,omitempty"`
	// Persona ids to add to the group.
	NewMembers []*v2.PersonaId `protobuf:"bytes,3,rep,name=new_members,json=newMembers,proto3" json:"new_members,omitempty"`
}

func (x *AddToGroupRequest) Reset() {
	*x = AddToGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToGroupRequest) ProtoMessage() {}

func (x *AddToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToGroupRequest.ProtoReflect.Descriptor instead.
func (*AddToGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{12}
}

func (x *AddToGroupRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *AddToGroupRequest) GetAdder() *v2.PersonaId {
	if x != nil {
		return x.Adder
	}
	return nil
}

func (x *AddToGroupRequest) GetNewMembers() []*v2.PersonaId {
	if x != nil {
		return x.NewMembers
	}
	return nil
}

type AddToGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AddToGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.AddToGroupResponse_Result" json:"result,omitempty"`
	// Personas that failed to be added to the group.
	FailureDetails []*AddToGroupResponse_FailureDetails `protobuf:"bytes,2,rep,name=failure_details,json=failureDetails,proto3" json:"failure_details,omitempty"`
}

func (x *AddToGroupResponse) Reset() {
	*x = AddToGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToGroupResponse) ProtoMessage() {}

func (x *AddToGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToGroupResponse.ProtoReflect.Descriptor instead.
func (*AddToGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddToGroupResponse) GetResult() AddToGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return AddToGroupResponse_OK
}

func (x *AddToGroupResponse) GetFailureDetails() []*AddToGroupResponse_FailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type RemoveFromGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group to remove persona from.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona removing others from the group.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Remover *v2.PersonaId `protobuf:"bytes,2,opt,name=remover,proto3" json:"remover,omitempty"`
	// Personas to remove.
	Removees []*v2.PersonaId `protobuf:"bytes,3,rep,name=removees,proto3" json:"removees,omitempty"`
}

func (x *RemoveFromGroupRequest) Reset() {
	*x = RemoveFromGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromGroupRequest) ProtoMessage() {}

func (x *RemoveFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveFromGroupRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *RemoveFromGroupRequest) GetRemover() *v2.PersonaId {
	if x != nil {
		return x.Remover
	}
	return nil
}

func (x *RemoveFromGroupRequest) GetRemovees() []*v2.PersonaId {
	if x != nil {
		return x.Removees
	}
	return nil
}

type RemoveFromGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RemoveFromGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.RemoveFromGroupResponse_Result" json:"result,omitempty"`
	// Personas that failed to be removed from the group.
	FailureDetails []*RemoveFromGroupResponse_FailureDetails `protobuf:"bytes,2,rep,name=failure_details,json=failureDetails,proto3" json:"failure_details,omitempty"`
}

func (x *RemoveFromGroupResponse) Reset() {
	*x = RemoveFromGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromGroupResponse) ProtoMessage() {}

func (x *RemoveFromGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveFromGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveFromGroupResponse) GetResult() RemoveFromGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return RemoveFromGroupResponse_OK
}

func (x *RemoveFromGroupResponse) GetFailureDetails() []*RemoveFromGroupResponse_FailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type SetGroupNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group to set the name for.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Persona changing the name.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Changer *v2.PersonaId `protobuf:"bytes,2,opt,name=changer,proto3" json:"changer,omitempty"`
	// New name to set. If this field is not specified then the current name will be cleared.
	GroupName *v22.GroupName `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *SetGroupNameRequest) Reset() {
	*x = SetGroupNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupNameRequest) ProtoMessage() {}

func (x *SetGroupNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupNameRequest.ProtoReflect.Descriptor instead.
func (*SetGroupNameRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{16}
}

func (x *SetGroupNameRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetGroupNameRequest) GetChanger() *v2.PersonaId {
	if x != nil {
		return x.Changer
	}
	return nil
}

func (x *SetGroupNameRequest) GetGroupName() *v22.GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

type SetGroupNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetGroupNameResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.SetGroupNameResponse_Result" json:"result,omitempty"`
}

func (x *SetGroupNameResponse) Reset() {
	*x = SetGroupNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupNameResponse) ProtoMessage() {}

func (x *SetGroupNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupNameResponse.ProtoReflect.Descriptor instead.
func (*SetGroupNameResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{17}
}

func (x *SetGroupNameResponse) GetResult() SetGroupNameResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetGroupNameResponse_OK
}

type GetGroupInfoByInviteCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InviteCode of group to look up.  GroupId is inferred from the code.
	InviteCode *v22.GroupInviteCode `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
}

func (x *GetGroupInfoByInviteCodeRequest) Reset() {
	*x = GetGroupInfoByInviteCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoByInviteCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoByInviteCodeRequest) ProtoMessage() {}

func (x *GetGroupInfoByInviteCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoByInviteCodeRequest.ProtoReflect.Descriptor instead.
func (*GetGroupInfoByInviteCodeRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetGroupInfoByInviteCodeRequest) GetInviteCode() *v22.GroupInviteCode {
	if x != nil {
		return x.InviteCode
	}
	return nil
}

type GetGroupInfoByInviteCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetGroupInfoByInviteCodeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.GetGroupInfoByInviteCodeResponse_Result" json:"result,omitempty"`
	// Set if result == OK and the caller is not a member of the group.
	GroupInfo *v21.GroupInfoDisplayOnly `protobuf:"bytes,2,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	// Set if result == OK and the caller is already a member of the group.
	ChatId *v2.ChatId `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *GetGroupInfoByInviteCodeResponse) Reset() {
	*x = GetGroupInfoByInviteCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoByInviteCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoByInviteCodeResponse) ProtoMessage() {}

func (x *GetGroupInfoByInviteCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoByInviteCodeResponse.ProtoReflect.Descriptor instead.
func (*GetGroupInfoByInviteCodeResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetGroupInfoByInviteCodeResponse) GetResult() GetGroupInfoByInviteCodeResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetGroupInfoByInviteCodeResponse_OK
}

func (x *GetGroupInfoByInviteCodeResponse) GetGroupInfo() *v21.GroupInfoDisplayOnly {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *GetGroupInfoByInviteCodeResponse) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type GetGroupInfoByJoinTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JoinToken of group to look up.  GroupId is extracted from the token.
	JoinToken *v22.PublicGroupJoinToken `protobuf:"bytes,1,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *GetGroupInfoByJoinTokenRequest) Reset() {
	*x = GetGroupInfoByJoinTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoByJoinTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoByJoinTokenRequest) ProtoMessage() {}

func (x *GetGroupInfoByJoinTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoByJoinTokenRequest.ProtoReflect.Descriptor instead.
func (*GetGroupInfoByJoinTokenRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetGroupInfoByJoinTokenRequest) GetJoinToken() *v22.PublicGroupJoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

type GetGroupInfoByJoinTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetGroupInfoByJoinTokenResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.GetGroupInfoByJoinTokenResponse_Result" json:"result,omitempty"`
	// Set if result == OK and the caller is not a member of the group.
	GroupInfo *v21.GroupInfoDisplayOnly `protobuf:"bytes,2,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	// Set if result == OK and the caller is already a member of the group.
	ChatId *v2.ChatId `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *GetGroupInfoByJoinTokenResponse) Reset() {
	*x = GetGroupInfoByJoinTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoByJoinTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoByJoinTokenResponse) ProtoMessage() {}

func (x *GetGroupInfoByJoinTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoByJoinTokenResponse.ProtoReflect.Descriptor instead.
func (*GetGroupInfoByJoinTokenResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetGroupInfoByJoinTokenResponse) GetResult() GetGroupInfoByJoinTokenResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetGroupInfoByJoinTokenResponse_OK
}

func (x *GetGroupInfoByJoinTokenResponse) GetGroupInfo() *v21.GroupInfoDisplayOnly {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *GetGroupInfoByJoinTokenResponse) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type JoinPublicGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Join token, which clients can aquire from group search.
	//
	// NOTE: By requiring only the join token, we can restrict bad actors in any ability to farm group details.
	//       - Tokens are encrypted, so cannot be forged
	//       - Tokens are not transferrable between users
	//       - Tokens contain the group code, allowing group search results to omit group identification.
	//       - Tokens expire after 1 hour (configured), preventing them from being stockpiled/archived.
	JoinToken *v22.PublicGroupJoinToken `protobuf:"bytes,1,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *JoinPublicGroupRequest) Reset() {
	*x = JoinPublicGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPublicGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPublicGroupRequest) ProtoMessage() {}

func (x *JoinPublicGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPublicGroupRequest.ProtoReflect.Descriptor instead.
func (*JoinPublicGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{22}
}

func (x *JoinPublicGroupRequest) GetJoinToken() *v22.PublicGroupJoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

type JoinPublicGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result JoinPublicGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.JoinPublicGroupResponse_Result" json:"result,omitempty"`
	// ChatId of the group.  Only provided if the group was successfully joined.
	ChatId *v2.ChatId `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The persona assigned to the joining user within the context of the joined group.
	// Only provided if the group was successfully joined.
	MembershipPersona *v2.PersonaId `protobuf:"bytes,3,opt,name=membership_persona,json=membershipPersona,proto3" json:"membership_persona,omitempty"`
	// Error details provided when response Result is JOIN_FREQUENCY_THRESHOLD or BAN_FREQUENCY_THRESHOLD
	// Field will be absent at all other times.
	JoinFrequencyErrorDetails *FrequencyErrorDetails `protobuf:"bytes,4,opt,name=join_frequency_error_details,json=joinFrequencyErrorDetails,proto3" json:"join_frequency_error_details,omitempty"`
}

func (x *JoinPublicGroupResponse) Reset() {
	*x = JoinPublicGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPublicGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPublicGroupResponse) ProtoMessage() {}

func (x *JoinPublicGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPublicGroupResponse.ProtoReflect.Descriptor instead.
func (*JoinPublicGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{23}
}

func (x *JoinPublicGroupResponse) GetResult() JoinPublicGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return JoinPublicGroupResponse_OK
}

func (x *JoinPublicGroupResponse) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *JoinPublicGroupResponse) GetMembershipPersona() *v2.PersonaId {
	if x != nil {
		return x.MembershipPersona
	}
	return nil
}

func (x *JoinPublicGroupResponse) GetJoinFrequencyErrorDetails() *FrequencyErrorDetails {
	if x != nil {
		return x.JoinFrequencyErrorDetails
	}
	return nil
}

type JoinGroupByInviteCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Invite Code of group to join.  GroupId is inferred from the code.
	InviteCode *v22.GroupInviteCode `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	// Source of invite code (link or scan code)
	CodeSource JoinGroupByInviteCodeRequest_CodeSource `protobuf:"varint,2,opt,name=code_source,json=codeSource,proto3,enum=mobile.groups.v2.JoinGroupByInviteCodeRequest_CodeSource" json:"code_source,omitempty"`
}

func (x *JoinGroupByInviteCodeRequest) Reset() {
	*x = JoinGroupByInviteCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupByInviteCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupByInviteCodeRequest) ProtoMessage() {}

func (x *JoinGroupByInviteCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupByInviteCodeRequest.ProtoReflect.Descriptor instead.
func (*JoinGroupByInviteCodeRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{24}
}

func (x *JoinGroupByInviteCodeRequest) GetInviteCode() *v22.GroupInviteCode {
	if x != nil {
		return x.InviteCode
	}
	return nil
}

func (x *JoinGroupByInviteCodeRequest) GetCodeSource() JoinGroupByInviteCodeRequest_CodeSource {
	if x != nil {
		return x.CodeSource
	}
	return JoinGroupByInviteCodeRequest_CODE
}

type JoinGroupByInviteCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result JoinGroupByInviteCodeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.JoinGroupByInviteCodeResponse_Result" json:"result,omitempty"`
	// ChatId of the group.  Only provided if the group was successfully joined.
	ChatId *v2.ChatId `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The persona assigned to the joining user within the context of the joined group.
	// Only provided if the group was successfully joined.
	MembershipPersona *v2.PersonaId `protobuf:"bytes,3,opt,name=membership_persona,json=membershipPersona,proto3" json:"membership_persona,omitempty"`
}

func (x *JoinGroupByInviteCodeResponse) Reset() {
	*x = JoinGroupByInviteCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupByInviteCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupByInviteCodeResponse) ProtoMessage() {}

func (x *JoinGroupByInviteCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupByInviteCodeResponse.ProtoReflect.Descriptor instead.
func (*JoinGroupByInviteCodeResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{25}
}

func (x *JoinGroupByInviteCodeResponse) GetResult() JoinGroupByInviteCodeResponse_Result {
	if x != nil {
		return x.Result
	}
	return JoinGroupByInviteCodeResponse_OK
}

func (x *JoinGroupByInviteCodeResponse) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *JoinGroupByInviteCodeResponse) GetMembershipPersona() *v2.PersonaId {
	if x != nil {
		return x.MembershipPersona
	}
	return nil
}

type CreateInviteCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creator's persona in the group.
	// Optional.  When provided, this field is intended to disambiguate the caller's relation to the group.
	//            eg: If we allow a user to have multiple personas in a group.
	Creator *v2.PersonaId `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// The group the invitation is for.
	ChatId *v2.ChatId `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *CreateInviteCodeRequest) Reset() {
	*x = CreateInviteCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteCodeRequest) ProtoMessage() {}

func (x *CreateInviteCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateInviteCodeRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{26}
}

func (x *CreateInviteCodeRequest) GetCreator() *v2.PersonaId {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *CreateInviteCodeRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type CreateInviteCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CreateInviteCodeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.CreateInviteCodeResponse_Result" json:"result,omitempty"`
	// Invite code that maps to both the group and the inviter. Only provided if result is OK.
	// This code can be used by any user to join the group.
	// This code can be used by both KikX clients and classic clients.
	InviteCode *v22.GroupInviteCode `protobuf:"bytes,2,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
}

func (x *CreateInviteCodeResponse) Reset() {
	*x = CreateInviteCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteCodeResponse) ProtoMessage() {}

func (x *CreateInviteCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateInviteCodeResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{27}
}

func (x *CreateInviteCodeResponse) GetResult() CreateInviteCodeResponse_Result {
	if x != nil {
		return x.Result
	}
	return CreateInviteCodeResponse_OK
}

func (x *CreateInviteCodeResponse) GetInviteCode() *v22.GroupInviteCode {
	if x != nil {
		return x.InviteCode
	}
	return nil
}

type BanFromGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChatId of the group for which the persona is to be banned from.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// PersonaId to be banned from the group.
	// The PersonaId provided should be a PersonaId as found in the group roster entry.
	// Although the client shouldn't be aware of this, in practice this means that the persona will be a
	// Genesis PersonaId when the group is private (or the user is a bot) and an Alias PersonaId specific to
	// the combination of group + member when the group is public and the user is not a bot.
	// Note that this PersonaId doesn't need to be an current member of the group.  This allows admins to ban
	// a problem user even if they have already voluntarily left the group.
	PersonaToBan *v2.PersonaId `protobuf:"bytes,2,opt,name=persona_to_ban,json=personaToBan,proto3" json:"persona_to_ban,omitempty"`
}

func (x *BanFromGroupRequest) Reset() {
	*x = BanFromGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanFromGroupRequest) ProtoMessage() {}

func (x *BanFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanFromGroupRequest.ProtoReflect.Descriptor instead.
func (*BanFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{28}
}

func (x *BanFromGroupRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *BanFromGroupRequest) GetPersonaToBan() *v2.PersonaId {
	if x != nil {
		return x.PersonaToBan
	}
	return nil
}

type BanFromGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result BanFromGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.BanFromGroupResponse_Result" json:"result,omitempty"`
}

func (x *BanFromGroupResponse) Reset() {
	*x = BanFromGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanFromGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanFromGroupResponse) ProtoMessage() {}

func (x *BanFromGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanFromGroupResponse.ProtoReflect.Descriptor instead.
func (*BanFromGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{29}
}

func (x *BanFromGroupResponse) GetResult() BanFromGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return BanFromGroupResponse_OK
}

type UnbanFromGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChatId of the group for which the persona is to be banned from.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// PersonaId to be unbanned from the group.
	// This must be a PersonaId as found in the group's ban list.
	PersonaToUnban *v2.PersonaId `protobuf:"bytes,2,opt,name=persona_to_unban,json=personaToUnban,proto3" json:"persona_to_unban,omitempty"`
}

func (x *UnbanFromGroupRequest) Reset() {
	*x = UnbanFromGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbanFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanFromGroupRequest) ProtoMessage() {}

func (x *UnbanFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanFromGroupRequest.ProtoReflect.Descriptor instead.
func (*UnbanFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{30}
}

func (x *UnbanFromGroupRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *UnbanFromGroupRequest) GetPersonaToUnban() *v2.PersonaId {
	if x != nil {
		return x.PersonaToUnban
	}
	return nil
}

type UnbanFromGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result UnbanFromGroupResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.UnbanFromGroupResponse_Result" json:"result,omitempty"`
}

func (x *UnbanFromGroupResponse) Reset() {
	*x = UnbanFromGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbanFromGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanFromGroupResponse) ProtoMessage() {}

func (x *UnbanFromGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanFromGroupResponse.ProtoReflect.Descriptor instead.
func (*UnbanFromGroupResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{31}
}

func (x *UnbanFromGroupResponse) GetResult() UnbanFromGroupResponse_Result {
	if x != nil {
		return x.Result
	}
	return UnbanFromGroupResponse_OK
}

type PromoteMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChatId of the group within which the persona is to be promoted.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// PersonaId to be promoted.  Must be a personaId in the group's current/active membership.
	PersonaToPromote *v2.PersonaId `protobuf:"bytes,2,opt,name=persona_to_promote,json=personaToPromote,proto3" json:"persona_to_promote,omitempty"`
}

func (x *PromoteMemberRequest) Reset() {
	*x = PromoteMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteMemberRequest) ProtoMessage() {}

func (x *PromoteMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteMemberRequest.ProtoReflect.Descriptor instead.
func (*PromoteMemberRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{32}
}

func (x *PromoteMemberRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *PromoteMemberRequest) GetPersonaToPromote() *v2.PersonaId {
	if x != nil {
		return x.PersonaToPromote
	}
	return nil
}

type PromoteMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result PromoteMemberResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.PromoteMemberResponse_Result" json:"result,omitempty"`
}

func (x *PromoteMemberResponse) Reset() {
	*x = PromoteMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteMemberResponse) ProtoMessage() {}

func (x *PromoteMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteMemberResponse.ProtoReflect.Descriptor instead.
func (*PromoteMemberResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{33}
}

func (x *PromoteMemberResponse) GetResult() PromoteMemberResponse_Result {
	if x != nil {
		return x.Result
	}
	return PromoteMemberResponse_OK
}

type DemoteMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChatId of the group within which the persona is to be demoted.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// PersonaId to be demoted.  Must be a personaId in the group's current/active membership.
	PersonaToDemote *v2.PersonaId `protobuf:"bytes,2,opt,name=persona_to_demote,json=personaToDemote,proto3" json:"persona_to_demote,omitempty"`
}

func (x *DemoteMemberRequest) Reset() {
	*x = DemoteMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoteMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteMemberRequest) ProtoMessage() {}

func (x *DemoteMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteMemberRequest.ProtoReflect.Descriptor instead.
func (*DemoteMemberRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{34}
}

func (x *DemoteMemberRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *DemoteMemberRequest) GetPersonaToDemote() *v2.PersonaId {
	if x != nil {
		return x.PersonaToDemote
	}
	return nil
}

type DemoteMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result DemoteMemberResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.DemoteMemberResponse_Result" json:"result,omitempty"`
}

func (x *DemoteMemberResponse) Reset() {
	*x = DemoteMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoteMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteMemberResponse) ProtoMessage() {}

func (x *DemoteMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteMemberResponse.ProtoReflect.Descriptor instead.
func (*DemoteMemberResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{35}
}

func (x *DemoteMemberResponse) GetResult() DemoteMemberResponse_Result {
	if x != nil {
		return x.Result
	}
	return DemoteMemberResponse_OK
}

type SetIsDirectMessagingBlockedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChatId of the public group that the caller is a member of.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Whether or not the caller is blocking direct messaging.
	IsDirectMessagingBlocked bool `protobuf:"varint,2,opt,name=is_direct_messaging_blocked,json=isDirectMessagingBlocked,proto3" json:"is_direct_messaging_blocked,omitempty"`
}

func (x *SetIsDirectMessagingBlockedRequest) Reset() {
	*x = SetIsDirectMessagingBlockedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIsDirectMessagingBlockedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIsDirectMessagingBlockedRequest) ProtoMessage() {}

func (x *SetIsDirectMessagingBlockedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIsDirectMessagingBlockedRequest.ProtoReflect.Descriptor instead.
func (*SetIsDirectMessagingBlockedRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{36}
}

func (x *SetIsDirectMessagingBlockedRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetIsDirectMessagingBlockedRequest) GetIsDirectMessagingBlocked() bool {
	if x != nil {
		return x.IsDirectMessagingBlocked
	}
	return false
}

type SetIsDirectMessagingBlockedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetIsDirectMessagingBlockedResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.SetIsDirectMessagingBlockedResponse_Result" json:"result,omitempty"`
}

func (x *SetIsDirectMessagingBlockedResponse) Reset() {
	*x = SetIsDirectMessagingBlockedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIsDirectMessagingBlockedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIsDirectMessagingBlockedResponse) ProtoMessage() {}

func (x *SetIsDirectMessagingBlockedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIsDirectMessagingBlockedResponse.ProtoReflect.Descriptor instead.
func (*SetIsDirectMessagingBlockedResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{37}
}

func (x *SetIsDirectMessagingBlockedResponse) GetResult() SetIsDirectMessagingBlockedResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetIsDirectMessagingBlockedResponse_OK
}

type SetChatThemeLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChatId of the group that the caller is a member of.
	ChatId *v2.ChatId                     `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Action SetChatThemeLockRequest_Action `protobuf:"varint,2,opt,name=action,proto3,enum=mobile.groups.v2.SetChatThemeLockRequest_Action" json:"action,omitempty"`
}

func (x *SetChatThemeLockRequest) Reset() {
	*x = SetChatThemeLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatThemeLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatThemeLockRequest) ProtoMessage() {}

func (x *SetChatThemeLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatThemeLockRequest.ProtoReflect.Descriptor instead.
func (*SetChatThemeLockRequest) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{38}
}

func (x *SetChatThemeLockRequest) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetChatThemeLockRequest) GetAction() SetChatThemeLockRequest_Action {
	if x != nil {
		return x.Action
	}
	return SetChatThemeLockRequest_LOCK
}

type SetChatThemeLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetChatThemeLockResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.groups.v2.SetChatThemeLockResponse_Result" json:"result,omitempty"`
}

func (x *SetChatThemeLockResponse) Reset() {
	*x = SetChatThemeLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatThemeLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatThemeLockResponse) ProtoMessage() {}

func (x *SetChatThemeLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatThemeLockResponse.ProtoReflect.Descriptor instead.
func (*SetChatThemeLockResponse) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{39}
}

func (x *SetChatThemeLockResponse) GetResult() SetChatThemeLockResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetChatThemeLockResponse_OK
}

type AddToGroupResponse_FailureDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonaId *v2.PersonaId                            `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	Reason    AddToGroupResponse_FailureDetails_Reason `protobuf:"varint,2,opt,name=reason,proto3,enum=mobile.groups.v2.AddToGroupResponse_FailureDetails_Reason" json:"reason,omitempty"`
}

func (x *AddToGroupResponse_FailureDetails) Reset() {
	*x = AddToGroupResponse_FailureDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToGroupResponse_FailureDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToGroupResponse_FailureDetails) ProtoMessage() {}

func (x *AddToGroupResponse_FailureDetails) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToGroupResponse_FailureDetails.ProtoReflect.Descriptor instead.
func (*AddToGroupResponse_FailureDetails) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *AddToGroupResponse_FailureDetails) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *AddToGroupResponse_FailureDetails) GetReason() AddToGroupResponse_FailureDetails_Reason {
	if x != nil {
		return x.Reason
	}
	return AddToGroupResponse_FailureDetails_UNKNOWN
}

type RemoveFromGroupResponse_FailureDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonaId *v2.PersonaId                                 `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	Reason    RemoveFromGroupResponse_FailureDetails_Reason `protobuf:"varint,2,opt,name=reason,proto3,enum=mobile.groups.v2.RemoveFromGroupResponse_FailureDetails_Reason" json:"reason,omitempty"`
}

func (x *RemoveFromGroupResponse_FailureDetails) Reset() {
	*x = RemoveFromGroupResponse_FailureDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v2_group_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromGroupResponse_FailureDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromGroupResponse_FailureDetails) ProtoMessage() {}

func (x *RemoveFromGroupResponse_FailureDetails) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v2_group_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromGroupResponse_FailureDetails.ProtoReflect.Descriptor instead.
func (*RemoveFromGroupResponse_FailureDetails) Descriptor() ([]byte, []int) {
	return file_groups_v2_group_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *RemoveFromGroupResponse_FailureDetails) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *RemoveFromGroupResponse_FailureDetails) GetReason() RemoveFromGroupResponse_FailureDetails_Reason {
	if x != nil {
		return x.Reason
	}
	return RemoveFromGroupResponse_FailureDetails_UNKNOWN
}

var File_groups_v2_group_service_proto protoreflect.FileDescriptor

var file_groups_v2_group_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x16, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x14, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x80, 0x01,
	0x80, 0x08, 0x52, 0x12, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x50, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x80, 0x01, 0x80,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xee, 0x04, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63,
	0x68, 0x61, 0x74, 0x12, 0x62, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00,
	0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc4, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x53, 0x48,
	0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x05,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55,
	0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x08, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x54, 0x41, 0x47, 0x10, 0x02, 0x22, 0x75, 0x0a, 0x11, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x72, 0x22, 0x6b, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22,
	0xb7, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x05,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x78, 0x01, 0x80, 0x01, 0x64, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xee, 0x03, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0xf6, 0x01, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x5b, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x22, 0x3c, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49,
	0x64, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x78, 0x01, 0x80, 0x01, 0x64, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x65, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x23, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x49, 0x64, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x38, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x6d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x6f, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86,
	0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x67, 0x0a, 0x16, 0x4a, 0x6f, 0x69, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xe6, 0x03, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x12, 0x70, 0x0a, 0x1c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x19,
	0x6a, 0x6f, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x22, 0xe8, 0x01, 0x0a, 0x1c, 0x4a, 0x6f,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x01, 0x22, 0xca, 0x02, 0x0a, 0x1d, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x22, 0x58, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x04, 0x22, 0x7d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x49, 0x64, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x22, 0xce, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x23, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x54, 0x6f, 0x42, 0x61,
	0x6e, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x4e, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x55, 0x6e,
	0x62, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x54, 0x6f, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x22,
	0x86, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e,
	0x62, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x23, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x23, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x54, 0x6f, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x49, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x23, 0x53, 0x65, 0x74, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xb7, 0x01, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x32, 0xb9, 0x10, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6e, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c,
	0x6c, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x15, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x61, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x62,
	0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x26, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x49, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74,
	0x49, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x72, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78,
	0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xa2,
	0x02, 0x11, 0x4b, 0x50, 0x42, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_groups_v2_group_service_proto_rawDescOnce sync.Once
	file_groups_v2_group_service_proto_rawDescData = file_groups_v2_group_service_proto_rawDesc
)

func file_groups_v2_group_service_proto_rawDescGZIP() []byte {
	file_groups_v2_group_service_proto_rawDescOnce.Do(func() {
		file_groups_v2_group_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_groups_v2_group_service_proto_rawDescData)
	})
	return file_groups_v2_group_service_proto_rawDescData
}

var file_groups_v2_group_service_proto_enumTypes = make([]protoimpl.EnumInfo, 24)
var file_groups_v2_group_service_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_groups_v2_group_service_proto_goTypes = []interface{}{
	(GetGroupInfoShortResponse_Result)(0),              // 0: mobile.groups.v2.GetGroupInfoShortResponse.Result
	(GetGroupInfoFullResponse_Result)(0),               // 1: mobile.groups.v2.GetGroupInfoFullResponse.Result
	(GetBannedGroupMembersStreamResponse_Result)(0),    // 2: mobile.groups.v2.GetBannedGroupMembersStreamResponse.Result
	(CreateGroupResponse_Result)(0),                    // 3: mobile.groups.v2.CreateGroupResponse.Result
	(CreateGroupResponse_RestrictedField)(0),           // 4: mobile.groups.v2.CreateGroupResponse.RestrictedField
	(LeaveGroupResponse_Result)(0),                     // 5: mobile.groups.v2.LeaveGroupResponse.Result
	(AddToGroupResponse_Result)(0),                     // 6: mobile.groups.v2.AddToGroupResponse.Result
	(AddToGroupResponse_FailureDetails_Reason)(0),      // 7: mobile.groups.v2.AddToGroupResponse.FailureDetails.Reason
	(RemoveFromGroupResponse_Result)(0),                // 8: mobile.groups.v2.RemoveFromGroupResponse.Result
	(RemoveFromGroupResponse_FailureDetails_Reason)(0), // 9: mobile.groups.v2.RemoveFromGroupResponse.FailureDetails.Reason
	(SetGroupNameResponse_Result)(0),                   // 10: mobile.groups.v2.SetGroupNameResponse.Result
	(GetGroupInfoByInviteCodeResponse_Result)(0),       // 11: mobile.groups.v2.GetGroupInfoByInviteCodeResponse.Result
	(GetGroupInfoByJoinTokenResponse_Result)(0),        // 12: mobile.groups.v2.GetGroupInfoByJoinTokenResponse.Result
	(JoinPublicGroupResponse_Result)(0),                // 13: mobile.groups.v2.JoinPublicGroupResponse.Result
	(JoinGroupByInviteCodeRequest_CodeSource)(0),       // 14: mobile.groups.v2.JoinGroupByInviteCodeRequest.CodeSource
	(JoinGroupByInviteCodeResponse_Result)(0),          // 15: mobile.groups.v2.JoinGroupByInviteCodeResponse.Result
	(CreateInviteCodeResponse_Result)(0),               // 16: mobile.groups.v2.CreateInviteCodeResponse.Result
	(BanFromGroupResponse_Result)(0),                   // 17: mobile.groups.v2.BanFromGroupResponse.Result
	(UnbanFromGroupResponse_Result)(0),                 // 18: mobile.groups.v2.UnbanFromGroupResponse.Result
	(PromoteMemberResponse_Result)(0),                  // 19: mobile.groups.v2.PromoteMemberResponse.Result
	(DemoteMemberResponse_Result)(0),                   // 20: mobile.groups.v2.DemoteMemberResponse.Result
	(SetIsDirectMessagingBlockedResponse_Result)(0),    // 21: mobile.groups.v2.SetIsDirectMessagingBlockedResponse.Result
	(SetChatThemeLockRequest_Action)(0),                // 22: mobile.groups.v2.SetChatThemeLockRequest.Action
	(SetChatThemeLockResponse_Result)(0),               // 23: mobile.groups.v2.SetChatThemeLockResponse.Result
	(*FrequencyErrorDetails)(nil),                      // 24: mobile.groups.v2.FrequencyErrorDetails
	(*GetGroupInfoShortRequest)(nil),                   // 25: mobile.groups.v2.GetGroupInfoShortRequest
	(*GetGroupInfoShortResponse)(nil),                  // 26: mobile.groups.v2.GetGroupInfoShortResponse
	(*GetGroupInfoFullRequest)(nil),                    // 27: mobile.groups.v2.GetGroupInfoFullRequest
	(*GetGroupInfoFullResponse)(nil),                   // 28: mobile.groups.v2.GetGroupInfoFullResponse
	(*GetBannedGroupMembersStreamRequest)(nil),         // 29: mobile.groups.v2.GetBannedGroupMembersStreamRequest
	(*GetBannedGroupMembersStreamResponse)(nil),        // 30: mobile.groups.v2.GetBannedGroupMembersStreamResponse
	(*BannedGroupMember)(nil),                          // 31: mobile.groups.v2.BannedGroupMember
	(*CreateGroupRequest)(nil),                         // 32: mobile.groups.v2.CreateGroupRequest
	(*CreateGroupResponse)(nil),                        // 33: mobile.groups.v2.CreateGroupResponse
	(*LeaveGroupRequest)(nil),                          // 34: mobile.groups.v2.LeaveGroupRequest
	(*LeaveGroupResponse)(nil),                         // 35: mobile.groups.v2.LeaveGroupResponse
	(*AddToGroupRequest)(nil),                          // 36: mobile.groups.v2.AddToGroupRequest
	(*AddToGroupResponse)(nil),                         // 37: mobile.groups.v2.AddToGroupResponse
	(*RemoveFromGroupRequest)(nil),                     // 38: mobile.groups.v2.RemoveFromGroupRequest
	(*RemoveFromGroupResponse)(nil),                    // 39: mobile.groups.v2.RemoveFromGroupResponse
	(*SetGroupNameRequest)(nil),                        // 40: mobile.groups.v2.SetGroupNameRequest
	(*SetGroupNameResponse)(nil),                       // 41: mobile.groups.v2.SetGroupNameResponse
	(*GetGroupInfoByInviteCodeRequest)(nil),            // 42: mobile.groups.v2.GetGroupInfoByInviteCodeRequest
	(*GetGroupInfoByInviteCodeResponse)(nil),           // 43: mobile.groups.v2.GetGroupInfoByInviteCodeResponse
	(*GetGroupInfoByJoinTokenRequest)(nil),             // 44: mobile.groups.v2.GetGroupInfoByJoinTokenRequest
	(*GetGroupInfoByJoinTokenResponse)(nil),            // 45: mobile.groups.v2.GetGroupInfoByJoinTokenResponse
	(*JoinPublicGroupRequest)(nil),                     // 46: mobile.groups.v2.JoinPublicGroupRequest
	(*JoinPublicGroupResponse)(nil),                    // 47: mobile.groups.v2.JoinPublicGroupResponse
	(*JoinGroupByInviteCodeRequest)(nil),               // 48: mobile.groups.v2.JoinGroupByInviteCodeRequest
	(*JoinGroupByInviteCodeResponse)(nil),              // 49: mobile.groups.v2.JoinGroupByInviteCodeResponse
	(*CreateInviteCodeRequest)(nil),                    // 50: mobile.groups.v2.CreateInviteCodeRequest
	(*CreateInviteCodeResponse)(nil),                   // 51: mobile.groups.v2.CreateInviteCodeResponse
	(*BanFromGroupRequest)(nil),                        // 52: mobile.groups.v2.BanFromGroupRequest
	(*BanFromGroupResponse)(nil),                       // 53: mobile.groups.v2.BanFromGroupResponse
	(*UnbanFromGroupRequest)(nil),                      // 54: mobile.groups.v2.UnbanFromGroupRequest
	(*UnbanFromGroupResponse)(nil),                     // 55: mobile.groups.v2.UnbanFromGroupResponse
	(*PromoteMemberRequest)(nil),                       // 56: mobile.groups.v2.PromoteMemberRequest
	(*PromoteMemberResponse)(nil),                      // 57: mobile.groups.v2.PromoteMemberResponse
	(*DemoteMemberRequest)(nil),                        // 58: mobile.groups.v2.DemoteMemberRequest
	(*DemoteMemberResponse)(nil),                       // 59: mobile.groups.v2.DemoteMemberResponse
	(*SetIsDirectMessagingBlockedRequest)(nil),         // 60: mobile.groups.v2.SetIsDirectMessagingBlockedRequest
	(*SetIsDirectMessagingBlockedResponse)(nil),        // 61: mobile.groups.v2.SetIsDirectMessagingBlockedResponse
	(*SetChatThemeLockRequest)(nil),                    // 62: mobile.groups.v2.SetChatThemeLockRequest
	(*SetChatThemeLockResponse)(nil),                   // 63: mobile.groups.v2.SetChatThemeLockResponse
	(*AddToGroupResponse_FailureDetails)(nil),          // 64: mobile.groups.v2.AddToGroupResponse.FailureDetails
	(*RemoveFromGroupResponse_FailureDetails)(nil),     // 65: mobile.groups.v2.RemoveFromGroupResponse.FailureDetails
	(*duration.Duration)(nil),                          // 66: google.protobuf.Duration
	(*v2.ChatId)(nil),                                  // 67: common.v2.ChatId
	(*v2.PersonaId)(nil),                               // 68: common.v2.PersonaId
	(*v21.GroupInfoShort)(nil),                         // 69: common.chats.v2.GroupInfoShort
	(*v21.GroupInfoFull)(nil),                          // 70: common.chats.v2.GroupInfoFull
	(*v22.GroupName)(nil),                              // 71: common.groups.v2.GroupName
	(*v22.PublicGroupFields)(nil),                      // 72: common.groups.v2.PublicGroupFields
	(*v2.Uuid)(nil),                                    // 73: common.v2.Uuid
	(*v21.Chat)(nil),                                   // 74: common.chats.v2.Chat
	(*v22.GroupInviteCode)(nil),                        // 75: common.groups.v2.GroupInviteCode
	(*v21.GroupInfoDisplayOnly)(nil),                   // 76: common.chats.v2.GroupInfoDisplayOnly
	(*v22.PublicGroupJoinToken)(nil),                   // 77: common.groups.v2.PublicGroupJoinToken
}
var file_groups_v2_group_service_proto_depIdxs = []int32{
	66,  // 0: mobile.groups.v2.FrequencyErrorDetails.frequency_limit_duration:type_name -> google.protobuf.Duration
	67,  // 1: mobile.groups.v2.GetGroupInfoShortRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 2: mobile.groups.v2.GetGroupInfoShortRequest.requestor:type_name -> common.v2.PersonaId
	0,   // 3: mobile.groups.v2.GetGroupInfoShortResponse.result:type_name -> mobile.groups.v2.GetGroupInfoShortResponse.Result
	69,  // 4: mobile.groups.v2.GetGroupInfoShortResponse.info:type_name -> common.chats.v2.GroupInfoShort
	67,  // 5: mobile.groups.v2.GetGroupInfoFullRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 6: mobile.groups.v2.GetGroupInfoFullRequest.requestor:type_name -> common.v2.PersonaId
	1,   // 7: mobile.groups.v2.GetGroupInfoFullResponse.result:type_name -> mobile.groups.v2.GetGroupInfoFullResponse.Result
	70,  // 8: mobile.groups.v2.GetGroupInfoFullResponse.info:type_name -> common.chats.v2.GroupInfoFull
	67,  // 9: mobile.groups.v2.GetBannedGroupMembersStreamRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 10: mobile.groups.v2.GetBannedGroupMembersStreamRequest.requestor:type_name -> common.v2.PersonaId
	2,   // 11: mobile.groups.v2.GetBannedGroupMembersStreamResponse.result:type_name -> mobile.groups.v2.GetBannedGroupMembersStreamResponse.Result
	31,  // 12: mobile.groups.v2.GetBannedGroupMembersStreamResponse.banned_group_members:type_name -> mobile.groups.v2.BannedGroupMember
	68,  // 13: mobile.groups.v2.BannedGroupMember.persona_id:type_name -> common.v2.PersonaId
	68,  // 14: mobile.groups.v2.CreateGroupRequest.creator:type_name -> common.v2.PersonaId
	68,  // 15: mobile.groups.v2.CreateGroupRequest.initial_members:type_name -> common.v2.PersonaId
	71,  // 16: mobile.groups.v2.CreateGroupRequest.group_name:type_name -> common.groups.v2.GroupName
	72,  // 17: mobile.groups.v2.CreateGroupRequest.public_group_fields:type_name -> common.groups.v2.PublicGroupFields
	73,  // 18: mobile.groups.v2.CreateGroupRequest.request_id:type_name -> common.v2.Uuid
	3,   // 19: mobile.groups.v2.CreateGroupResponse.result:type_name -> mobile.groups.v2.CreateGroupResponse.Result
	74,  // 20: mobile.groups.v2.CreateGroupResponse.chat:type_name -> common.chats.v2.Chat
	4,   // 21: mobile.groups.v2.CreateGroupResponse.restricted_fields:type_name -> mobile.groups.v2.CreateGroupResponse.RestrictedField
	24,  // 22: mobile.groups.v2.CreateGroupResponse.create_frequency_error_details:type_name -> mobile.groups.v2.FrequencyErrorDetails
	67,  // 23: mobile.groups.v2.LeaveGroupRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 24: mobile.groups.v2.LeaveGroupRequest.leaver:type_name -> common.v2.PersonaId
	5,   // 25: mobile.groups.v2.LeaveGroupResponse.result:type_name -> mobile.groups.v2.LeaveGroupResponse.Result
	67,  // 26: mobile.groups.v2.AddToGroupRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 27: mobile.groups.v2.AddToGroupRequest.adder:type_name -> common.v2.PersonaId
	68,  // 28: mobile.groups.v2.AddToGroupRequest.new_members:type_name -> common.v2.PersonaId
	6,   // 29: mobile.groups.v2.AddToGroupResponse.result:type_name -> mobile.groups.v2.AddToGroupResponse.Result
	64,  // 30: mobile.groups.v2.AddToGroupResponse.failure_details:type_name -> mobile.groups.v2.AddToGroupResponse.FailureDetails
	67,  // 31: mobile.groups.v2.RemoveFromGroupRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 32: mobile.groups.v2.RemoveFromGroupRequest.remover:type_name -> common.v2.PersonaId
	68,  // 33: mobile.groups.v2.RemoveFromGroupRequest.removees:type_name -> common.v2.PersonaId
	8,   // 34: mobile.groups.v2.RemoveFromGroupResponse.result:type_name -> mobile.groups.v2.RemoveFromGroupResponse.Result
	65,  // 35: mobile.groups.v2.RemoveFromGroupResponse.failure_details:type_name -> mobile.groups.v2.RemoveFromGroupResponse.FailureDetails
	67,  // 36: mobile.groups.v2.SetGroupNameRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 37: mobile.groups.v2.SetGroupNameRequest.changer:type_name -> common.v2.PersonaId
	71,  // 38: mobile.groups.v2.SetGroupNameRequest.group_name:type_name -> common.groups.v2.GroupName
	10,  // 39: mobile.groups.v2.SetGroupNameResponse.result:type_name -> mobile.groups.v2.SetGroupNameResponse.Result
	75,  // 40: mobile.groups.v2.GetGroupInfoByInviteCodeRequest.invite_code:type_name -> common.groups.v2.GroupInviteCode
	11,  // 41: mobile.groups.v2.GetGroupInfoByInviteCodeResponse.result:type_name -> mobile.groups.v2.GetGroupInfoByInviteCodeResponse.Result
	76,  // 42: mobile.groups.v2.GetGroupInfoByInviteCodeResponse.group_info:type_name -> common.chats.v2.GroupInfoDisplayOnly
	67,  // 43: mobile.groups.v2.GetGroupInfoByInviteCodeResponse.chat_id:type_name -> common.v2.ChatId
	77,  // 44: mobile.groups.v2.GetGroupInfoByJoinTokenRequest.join_token:type_name -> common.groups.v2.PublicGroupJoinToken
	12,  // 45: mobile.groups.v2.GetGroupInfoByJoinTokenResponse.result:type_name -> mobile.groups.v2.GetGroupInfoByJoinTokenResponse.Result
	76,  // 46: mobile.groups.v2.GetGroupInfoByJoinTokenResponse.group_info:type_name -> common.chats.v2.GroupInfoDisplayOnly
	67,  // 47: mobile.groups.v2.GetGroupInfoByJoinTokenResponse.chat_id:type_name -> common.v2.ChatId
	77,  // 48: mobile.groups.v2.JoinPublicGroupRequest.join_token:type_name -> common.groups.v2.PublicGroupJoinToken
	13,  // 49: mobile.groups.v2.JoinPublicGroupResponse.result:type_name -> mobile.groups.v2.JoinPublicGroupResponse.Result
	67,  // 50: mobile.groups.v2.JoinPublicGroupResponse.chat_id:type_name -> common.v2.ChatId
	68,  // 51: mobile.groups.v2.JoinPublicGroupResponse.membership_persona:type_name -> common.v2.PersonaId
	24,  // 52: mobile.groups.v2.JoinPublicGroupResponse.join_frequency_error_details:type_name -> mobile.groups.v2.FrequencyErrorDetails
	75,  // 53: mobile.groups.v2.JoinGroupByInviteCodeRequest.invite_code:type_name -> common.groups.v2.GroupInviteCode
	14,  // 54: mobile.groups.v2.JoinGroupByInviteCodeRequest.code_source:type_name -> mobile.groups.v2.JoinGroupByInviteCodeRequest.CodeSource
	15,  // 55: mobile.groups.v2.JoinGroupByInviteCodeResponse.result:type_name -> mobile.groups.v2.JoinGroupByInviteCodeResponse.Result
	67,  // 56: mobile.groups.v2.JoinGroupByInviteCodeResponse.chat_id:type_name -> common.v2.ChatId
	68,  // 57: mobile.groups.v2.JoinGroupByInviteCodeResponse.membership_persona:type_name -> common.v2.PersonaId
	68,  // 58: mobile.groups.v2.CreateInviteCodeRequest.creator:type_name -> common.v2.PersonaId
	67,  // 59: mobile.groups.v2.CreateInviteCodeRequest.chat_id:type_name -> common.v2.ChatId
	16,  // 60: mobile.groups.v2.CreateInviteCodeResponse.result:type_name -> mobile.groups.v2.CreateInviteCodeResponse.Result
	75,  // 61: mobile.groups.v2.CreateInviteCodeResponse.invite_code:type_name -> common.groups.v2.GroupInviteCode
	67,  // 62: mobile.groups.v2.BanFromGroupRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 63: mobile.groups.v2.BanFromGroupRequest.persona_to_ban:type_name -> common.v2.PersonaId
	17,  // 64: mobile.groups.v2.BanFromGroupResponse.result:type_name -> mobile.groups.v2.BanFromGroupResponse.Result
	67,  // 65: mobile.groups.v2.UnbanFromGroupRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 66: mobile.groups.v2.UnbanFromGroupRequest.persona_to_unban:type_name -> common.v2.PersonaId
	18,  // 67: mobile.groups.v2.UnbanFromGroupResponse.result:type_name -> mobile.groups.v2.UnbanFromGroupResponse.Result
	67,  // 68: mobile.groups.v2.PromoteMemberRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 69: mobile.groups.v2.PromoteMemberRequest.persona_to_promote:type_name -> common.v2.PersonaId
	19,  // 70: mobile.groups.v2.PromoteMemberResponse.result:type_name -> mobile.groups.v2.PromoteMemberResponse.Result
	67,  // 71: mobile.groups.v2.DemoteMemberRequest.chat_id:type_name -> common.v2.ChatId
	68,  // 72: mobile.groups.v2.DemoteMemberRequest.persona_to_demote:type_name -> common.v2.PersonaId
	20,  // 73: mobile.groups.v2.DemoteMemberResponse.result:type_name -> mobile.groups.v2.DemoteMemberResponse.Result
	67,  // 74: mobile.groups.v2.SetIsDirectMessagingBlockedRequest.chat_id:type_name -> common.v2.ChatId
	21,  // 75: mobile.groups.v2.SetIsDirectMessagingBlockedResponse.result:type_name -> mobile.groups.v2.SetIsDirectMessagingBlockedResponse.Result
	67,  // 76: mobile.groups.v2.SetChatThemeLockRequest.chat_id:type_name -> common.v2.ChatId
	22,  // 77: mobile.groups.v2.SetChatThemeLockRequest.action:type_name -> mobile.groups.v2.SetChatThemeLockRequest.Action
	23,  // 78: mobile.groups.v2.SetChatThemeLockResponse.result:type_name -> mobile.groups.v2.SetChatThemeLockResponse.Result
	68,  // 79: mobile.groups.v2.AddToGroupResponse.FailureDetails.persona_id:type_name -> common.v2.PersonaId
	7,   // 80: mobile.groups.v2.AddToGroupResponse.FailureDetails.reason:type_name -> mobile.groups.v2.AddToGroupResponse.FailureDetails.Reason
	68,  // 81: mobile.groups.v2.RemoveFromGroupResponse.FailureDetails.persona_id:type_name -> common.v2.PersonaId
	9,   // 82: mobile.groups.v2.RemoveFromGroupResponse.FailureDetails.reason:type_name -> mobile.groups.v2.RemoveFromGroupResponse.FailureDetails.Reason
	25,  // 83: mobile.groups.v2.Group.GetGroupInfoShort:input_type -> mobile.groups.v2.GetGroupInfoShortRequest
	27,  // 84: mobile.groups.v2.Group.GetGroupInfoFull:input_type -> mobile.groups.v2.GetGroupInfoFullRequest
	29,  // 85: mobile.groups.v2.Group.GetBannedGroupMembersStream:input_type -> mobile.groups.v2.GetBannedGroupMembersStreamRequest
	32,  // 86: mobile.groups.v2.Group.CreateGroup:input_type -> mobile.groups.v2.CreateGroupRequest
	34,  // 87: mobile.groups.v2.Group.LeaveGroup:input_type -> mobile.groups.v2.LeaveGroupRequest
	36,  // 88: mobile.groups.v2.Group.AddToGroup:input_type -> mobile.groups.v2.AddToGroupRequest
	38,  // 89: mobile.groups.v2.Group.RemoveFromGroup:input_type -> mobile.groups.v2.RemoveFromGroupRequest
	40,  // 90: mobile.groups.v2.Group.SetGroupName:input_type -> mobile.groups.v2.SetGroupNameRequest
	42,  // 91: mobile.groups.v2.Group.GetGroupInfoByInviteCode:input_type -> mobile.groups.v2.GetGroupInfoByInviteCodeRequest
	44,  // 92: mobile.groups.v2.Group.GetGroupInfoByJoinToken:input_type -> mobile.groups.v2.GetGroupInfoByJoinTokenRequest
	46,  // 93: mobile.groups.v2.Group.JoinPublicGroup:input_type -> mobile.groups.v2.JoinPublicGroupRequest
	48,  // 94: mobile.groups.v2.Group.JoinGroupByInviteCode:input_type -> mobile.groups.v2.JoinGroupByInviteCodeRequest
	50,  // 95: mobile.groups.v2.Group.CreateInviteCode:input_type -> mobile.groups.v2.CreateInviteCodeRequest
	52,  // 96: mobile.groups.v2.Group.BanFromGroup:input_type -> mobile.groups.v2.BanFromGroupRequest
	54,  // 97: mobile.groups.v2.Group.UnbanFromGroup:input_type -> mobile.groups.v2.UnbanFromGroupRequest
	56,  // 98: mobile.groups.v2.Group.PromoteMember:input_type -> mobile.groups.v2.PromoteMemberRequest
	58,  // 99: mobile.groups.v2.Group.DemoteMember:input_type -> mobile.groups.v2.DemoteMemberRequest
	60,  // 100: mobile.groups.v2.Group.SetIsDirectMessagingBlocked:input_type -> mobile.groups.v2.SetIsDirectMessagingBlockedRequest
	62,  // 101: mobile.groups.v2.Group.SetChatThemeLock:input_type -> mobile.groups.v2.SetChatThemeLockRequest
	26,  // 102: mobile.groups.v2.Group.GetGroupInfoShort:output_type -> mobile.groups.v2.GetGroupInfoShortResponse
	28,  // 103: mobile.groups.v2.Group.GetGroupInfoFull:output_type -> mobile.groups.v2.GetGroupInfoFullResponse
	30,  // 104: mobile.groups.v2.Group.GetBannedGroupMembersStream:output_type -> mobile.groups.v2.GetBannedGroupMembersStreamResponse
	33,  // 105: mobile.groups.v2.Group.CreateGroup:output_type -> mobile.groups.v2.CreateGroupResponse
	35,  // 106: mobile.groups.v2.Group.LeaveGroup:output_type -> mobile.groups.v2.LeaveGroupResponse
	37,  // 107: mobile.groups.v2.Group.AddToGroup:output_type -> mobile.groups.v2.AddToGroupResponse
	39,  // 108: mobile.groups.v2.Group.RemoveFromGroup:output_type -> mobile.groups.v2.RemoveFromGroupResponse
	41,  // 109: mobile.groups.v2.Group.SetGroupName:output_type -> mobile.groups.v2.SetGroupNameResponse
	43,  // 110: mobile.groups.v2.Group.GetGroupInfoByInviteCode:output_type -> mobile.groups.v2.GetGroupInfoByInviteCodeResponse
	45,  // 111: mobile.groups.v2.Group.GetGroupInfoByJoinToken:output_type -> mobile.groups.v2.GetGroupInfoByJoinTokenResponse
	47,  // 112: mobile.groups.v2.Group.JoinPublicGroup:output_type -> mobile.groups.v2.JoinPublicGroupResponse
	49,  // 113: mobile.groups.v2.Group.JoinGroupByInviteCode:output_type -> mobile.groups.v2.JoinGroupByInviteCodeResponse
	51,  // 114: mobile.groups.v2.Group.CreateInviteCode:output_type -> mobile.groups.v2.CreateInviteCodeResponse
	53,  // 115: mobile.groups.v2.Group.BanFromGroup:output_type -> mobile.groups.v2.BanFromGroupResponse
	55,  // 116: mobile.groups.v2.Group.UnbanFromGroup:output_type -> mobile.groups.v2.UnbanFromGroupResponse
	57,  // 117: mobile.groups.v2.Group.PromoteMember:output_type -> mobile.groups.v2.PromoteMemberResponse
	59,  // 118: mobile.groups.v2.Group.DemoteMember:output_type -> mobile.groups.v2.DemoteMemberResponse
	61,  // 119: mobile.groups.v2.Group.SetIsDirectMessagingBlocked:output_type -> mobile.groups.v2.SetIsDirectMessagingBlockedResponse
	63,  // 120: mobile.groups.v2.Group.SetChatThemeLock:output_type -> mobile.groups.v2.SetChatThemeLockResponse
	102, // [102:121] is the sub-list for method output_type
	83,  // [83:102] is the sub-list for method input_type
	83,  // [83:83] is the sub-list for extension type_name
	83,  // [83:83] is the sub-list for extension extendee
	0,   // [0:83] is the sub-list for field type_name
}

func init() { file_groups_v2_group_service_proto_init() }
func file_groups_v2_group_service_proto_init() {
	if File_groups_v2_group_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_groups_v2_group_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoShortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoShortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoFullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoFullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannedGroupMembersStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannedGroupMembersStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFromGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFromGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoByInviteCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoByInviteCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoByJoinTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoByJoinTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPublicGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPublicGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupByInviteCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupByInviteCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInviteCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInviteCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanFromGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanFromGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbanFromGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbanFromGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoteMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoteMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIsDirectMessagingBlockedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIsDirectMessagingBlockedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatThemeLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatThemeLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToGroupResponse_FailureDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v2_group_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFromGroupResponse_FailureDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_groups_v2_group_service_proto_rawDesc,
			NumEnums:      24,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_groups_v2_group_service_proto_goTypes,
		DependencyIndexes: file_groups_v2_group_service_proto_depIdxs,
		EnumInfos:         file_groups_v2_group_service_proto_enumTypes,
		MessageInfos:      file_groups_v2_group_service_proto_msgTypes,
	}.Build()
	File_groups_v2_group_service_proto = out.File
	file_groups_v2_group_service_proto_rawDesc = nil
	file_groups_v2_group_service_proto_goTypes = nil
	file_groups_v2_group_service_proto_depIdxs = nil
}
