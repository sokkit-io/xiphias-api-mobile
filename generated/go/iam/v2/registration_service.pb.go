// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: iam/v2/registration_service.proto

package iam

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/client/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidateForRegisterResponse_Result int32

const (
	// All provided request elements have been verified as unique
	ValidateForRegisterResponse_OK ValidateForRegisterResponse_Result = 0
	// One or more provided request elements have been determined to be NOT acceptable for registration.
	// Problematic request elements are indicated in invalid_elements response field.
	ValidateForRegisterResponse_FAILED ValidateForRegisterResponse_Result = 1
	// No input values were provided.
	ValidateForRegisterResponse_MISSING_INPUT ValidateForRegisterResponse_Result = 2
)

// Enum value maps for ValidateForRegisterResponse_Result.
var (
	ValidateForRegisterResponse_Result_name = map[int32]string{
		0: "OK",
		1: "FAILED",
		2: "MISSING_INPUT",
	}
	ValidateForRegisterResponse_Result_value = map[string]int32{
		"OK":            0,
		"FAILED":        1,
		"MISSING_INPUT": 2,
	}
)

func (x ValidateForRegisterResponse_Result) Enum() *ValidateForRegisterResponse_Result {
	p := new(ValidateForRegisterResponse_Result)
	*p = x
	return p
}

func (x ValidateForRegisterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidateForRegisterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v2_registration_service_proto_enumTypes[0].Descriptor()
}

func (ValidateForRegisterResponse_Result) Type() protoreflect.EnumType {
	return &file_iam_v2_registration_service_proto_enumTypes[0]
}

func (x ValidateForRegisterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidateForRegisterResponse_Result.Descriptor instead.
func (ValidateForRegisterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{1, 0}
}

type ValidateForRegisterResponse_InvalidElement int32

const (
	ValidateForRegisterResponse_EMAIL    ValidateForRegisterResponse_InvalidElement = 0
	ValidateForRegisterResponse_USERNAME ValidateForRegisterResponse_InvalidElement = 1
)

// Enum value maps for ValidateForRegisterResponse_InvalidElement.
var (
	ValidateForRegisterResponse_InvalidElement_name = map[int32]string{
		0: "EMAIL",
		1: "USERNAME",
	}
	ValidateForRegisterResponse_InvalidElement_value = map[string]int32{
		"EMAIL":    0,
		"USERNAME": 1,
	}
)

func (x ValidateForRegisterResponse_InvalidElement) Enum() *ValidateForRegisterResponse_InvalidElement {
	p := new(ValidateForRegisterResponse_InvalidElement)
	*p = x
	return p
}

func (x ValidateForRegisterResponse_InvalidElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidateForRegisterResponse_InvalidElement) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v2_registration_service_proto_enumTypes[1].Descriptor()
}

func (ValidateForRegisterResponse_InvalidElement) Type() protoreflect.EnumType {
	return &file_iam_v2_registration_service_proto_enumTypes[1]
}

func (x ValidateForRegisterResponse_InvalidElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidateForRegisterResponse_InvalidElement.Descriptor instead.
func (ValidateForRegisterResponse_InvalidElement) EnumDescriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{1, 1}
}

type RegisterResponse_Result int32

const (
	// Success - account has been created with provided details.
	RegisterResponse_OK RegisterResponse_Result = 0
	// Some form of additional verification has been requested. (such as a captcha challenge)
	// Details of the verification (will be) available in this response, and the request is expected to be
	// re-submitted with challenge response, or whatever details are needed for the verification flow.
	// TODO: Verification request details are to be included in this response.
	RegisterResponse_VERIFICATION_REQUIRED RegisterResponse_Result = 1
	// Verification details in request were not acceptable.
	// This indicates that the verification challenge response was invalid or not accepted.
	// New verification details (will be) available in this response so that the user may answer the verification challenge
	// and re-submit the request with new answers to the new verification details.
	RegisterResponse_ERROR_VERIFICATION_FAILED RegisterResponse_Result = 2
	// General failure code; intentionally no explanatory details provided.
	// eg: Rate limit applied to requesting IP
	// eg: Attempted to register QA or system-test user pattern, but not authorized to do so.
	// eg: Birthday field indicates user has not met age requirements.
	RegisterResponse_ERROR_NOT_ACCEPTABLE RegisterResponse_Result = 3
	// Validation of provided details has failed, and/or policy checking indicates a violation.
	// - see 'invalid_elements' in this response for which request fields had validation problems.
	// - see 'policy_violation_elements' in this response for which request fields had policy violations.
	RegisterResponse_ERROR_VALIDATION_FAILED RegisterResponse_Result = 4
	// Username or email address already has an associated account.  see invalid_elements for which field(s) (email/username)
	// are already in use.
	RegisterResponse_ERROR_ALREADY_REGISTERED RegisterResponse_Result = 5
)

// Enum value maps for RegisterResponse_Result.
var (
	RegisterResponse_Result_name = map[int32]string{
		0: "OK",
		1: "VERIFICATION_REQUIRED",
		2: "ERROR_VERIFICATION_FAILED",
		3: "ERROR_NOT_ACCEPTABLE",
		4: "ERROR_VALIDATION_FAILED",
		5: "ERROR_ALREADY_REGISTERED",
	}
	RegisterResponse_Result_value = map[string]int32{
		"OK":                        0,
		"VERIFICATION_REQUIRED":     1,
		"ERROR_VERIFICATION_FAILED": 2,
		"ERROR_NOT_ACCEPTABLE":      3,
		"ERROR_VALIDATION_FAILED":   4,
		"ERROR_ALREADY_REGISTERED":  5,
	}
)

func (x RegisterResponse_Result) Enum() *RegisterResponse_Result {
	p := new(RegisterResponse_Result)
	*p = x
	return p
}

func (x RegisterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v2_registration_service_proto_enumTypes[2].Descriptor()
}

func (RegisterResponse_Result) Type() protoreflect.EnumType {
	return &file_iam_v2_registration_service_proto_enumTypes[2]
}

func (x RegisterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterResponse_Result.Descriptor instead.
func (RegisterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{3, 0}
}

type RegisterResponse_RequestElement int32

const (
	RegisterResponse_OTHER      RegisterResponse_RequestElement = 0
	RegisterResponse_FIRST_NAME RegisterResponse_RequestElement = 1
	RegisterResponse_LAST_NAME  RegisterResponse_RequestElement = 2
	// Note: FULL_NAME indicates the violation was found when checking both names together sparated by a single space.
	RegisterResponse_FULL_NAME RegisterResponse_RequestElement = 3
	RegisterResponse_USERNAME  RegisterResponse_RequestElement = 4
	RegisterResponse_EMAIL     RegisterResponse_RequestElement = 5
	RegisterResponse_DEVICE_ID RegisterResponse_RequestElement = 6
	RegisterResponse_LOCALE    RegisterResponse_RequestElement = 7
	RegisterResponse_VERSION   RegisterResponse_RequestElement = 8
	// Note: BIRTHDAY should only be considered a validation issue if it is somehow *missing*.
	//       *DO NOT* use this to indicate that the user submission is UNDERAGE. In such cases
	//       we instead return an ERROR_NOT_ACCEPTABLE Result code.
	RegisterResponse_BIRTHDAY         RegisterResponse_RequestElement = 9
	RegisterResponse_USERNAME_PASSKEY RegisterResponse_RequestElement = 10
	RegisterResponse_EMAIL_PASSKEY    RegisterResponse_RequestElement = 11
)

// Enum value maps for RegisterResponse_RequestElement.
var (
	RegisterResponse_RequestElement_name = map[int32]string{
		0:  "OTHER",
		1:  "FIRST_NAME",
		2:  "LAST_NAME",
		3:  "FULL_NAME",
		4:  "USERNAME",
		5:  "EMAIL",
		6:  "DEVICE_ID",
		7:  "LOCALE",
		8:  "VERSION",
		9:  "BIRTHDAY",
		10: "USERNAME_PASSKEY",
		11: "EMAIL_PASSKEY",
	}
	RegisterResponse_RequestElement_value = map[string]int32{
		"OTHER":            0,
		"FIRST_NAME":       1,
		"LAST_NAME":        2,
		"FULL_NAME":        3,
		"USERNAME":         4,
		"EMAIL":            5,
		"DEVICE_ID":        6,
		"LOCALE":           7,
		"VERSION":          8,
		"BIRTHDAY":         9,
		"USERNAME_PASSKEY": 10,
		"EMAIL_PASSKEY":    11,
	}
)

func (x RegisterResponse_RequestElement) Enum() *RegisterResponse_RequestElement {
	p := new(RegisterResponse_RequestElement)
	*p = x
	return p
}

func (x RegisterResponse_RequestElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterResponse_RequestElement) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v2_registration_service_proto_enumTypes[3].Descriptor()
}

func (RegisterResponse_RequestElement) Type() protoreflect.EnumType {
	return &file_iam_v2_registration_service_proto_enumTypes[3]
}

func (x RegisterResponse_RequestElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterResponse_RequestElement.Descriptor instead.
func (RegisterResponse_RequestElement) EnumDescriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{3, 1}
}

type ValidateForRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email to check uniqueness of.
	// Note: email technically may not be larger than 254 unicode chars for legacy pairity
	Email *v2.Email `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// username to check uniqueness of.
	Username *v2.Username `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ValidateForRegisterRequest) Reset() {
	*x = ValidateForRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_registration_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateForRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateForRegisterRequest) ProtoMessage() {}

func (x *ValidateForRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_registration_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateForRegisterRequest.ProtoReflect.Descriptor instead.
func (*ValidateForRegisterRequest) Descriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{0}
}

func (x *ValidateForRegisterRequest) GetEmail() *v2.Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *ValidateForRegisterRequest) GetUsername() *v2.Username {
	if x != nil {
		return x.Username
	}
	return nil
}

type ValidateForRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates success or failure of the request overall.
	// NOTE: Other members of this response are valid iff Result == OK
	Result ValidateForRegisterResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.iam.v2.ValidateForRegisterResponse_Result" json:"result,omitempty"`
	// Indicate which elements of the associated request are NOT valid for use in registration.
	InvalidElements []ValidateForRegisterResponse_InvalidElement `protobuf:"varint,2,rep,packed,name=invalid_elements,json=invalidElements,proto3,enum=mobile.iam.v2.ValidateForRegisterResponse_InvalidElement" json:"invalid_elements,omitempty"`
}

func (x *ValidateForRegisterResponse) Reset() {
	*x = ValidateForRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_registration_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateForRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateForRegisterResponse) ProtoMessage() {}

func (x *ValidateForRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_registration_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateForRegisterResponse.ProtoReflect.Descriptor instead.
func (*ValidateForRegisterResponse) Descriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateForRegisterResponse) GetResult() ValidateForRegisterResponse_Result {
	if x != nil {
		return x.Result
	}
	return ValidateForRegisterResponse_OK
}

func (x *ValidateForRegisterResponse) GetInvalidElements() []ValidateForRegisterResponse_InvalidElement {
	if x != nil {
		return x.InvalidElements
	}
	return nil
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName     string             `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string             `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username      *v2.Username       `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Email         *v2.Email          `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	DeviceDetails *v21.DeviceDetails `protobuf:"bytes,5,opt,name=device_details,json=deviceDetails,proto3" json:"device_details,omitempty"`
	Locale        *v21.ClientLocale  `protobuf:"bytes,6,opt,name=locale,proto3" json:"locale,omitempty"`
	Version       *v21.ClientVersion `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	// Declared birthday of user performing the account registration.
	// After translating to a gregorian date, the value of any fields other than Year/Month/Day are ignored.
	Birthday *timestamp.Timestamp `protobuf:"bytes,8,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// The username-derived passkey as described in https://github.com/sokkit-io/kik-product/wiki/Passkeys
	UsernamePasskey []byte `protobuf:"bytes,9,opt,name=username_passkey,json=usernamePasskey,proto3" json:"username_passkey,omitempty"`
	// The email-derived passkey as described in https://github.com/sokkit-io/kik-product/wiki/Passkeys
	EmailPasskey []byte `protobuf:"bytes,10,opt,name=email_passkey,json=emailPasskey,proto3" json:"email_passkey,omitempty"`
	// Solution to captcha that was previously issued via captcha_url in response.
	CaptchaSolution    string                  `protobuf:"bytes,11,opt,name=captcha_solution,json=captchaSolution,proto3" json:"captcha_solution,omitempty"`
	DeviceInfoEnvelope *v21.DeviceInfoEnvelope `protobuf:"bytes,12,opt,name=device_info_envelope,json=deviceInfoEnvelope,proto3" json:"device_info_envelope,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_registration_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_registration_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterRequest) GetUsername() *v2.Username {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *RegisterRequest) GetEmail() *v2.Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *RegisterRequest) GetDeviceDetails() *v21.DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

func (x *RegisterRequest) GetLocale() *v21.ClientLocale {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *RegisterRequest) GetVersion() *v21.ClientVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RegisterRequest) GetBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *RegisterRequest) GetUsernamePasskey() []byte {
	if x != nil {
		return x.UsernamePasskey
	}
	return nil
}

func (x *RegisterRequest) GetEmailPasskey() []byte {
	if x != nil {
		return x.EmailPasskey
	}
	return nil
}

func (x *RegisterRequest) GetCaptchaSolution() string {
	if x != nil {
		return x.CaptchaSolution
	}
	return ""
}

func (x *RegisterRequest) GetDeviceInfoEnvelope() *v21.DeviceInfoEnvelope {
	if x != nil {
		return x.DeviceInfoEnvelope
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RegisterResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.iam.v2.RegisterResponse_Result" json:"result,omitempty"`
	// Indication of which elements of the request which have failed server validations.
	InvalidElements []RegisterResponse_RequestElement `protobuf:"varint,2,rep,packed,name=invalid_elements,json=invalidElements,proto3,enum=mobile.iam.v2.RegisterResponse_RequestElement" json:"invalid_elements,omitempty"`
	// Indication of which elements of the request have violated server policies (eg: potentially have bad language, etc)
	PolicyViolationElements []RegisterResponse_RequestElement `protobuf:"varint,3,rep,packed,name=policy_violation_elements,json=policyViolationElements,proto3,enum=mobile.iam.v2.RegisterResponse_RequestElement" json:"policy_violation_elements,omitempty"`
	// Client must use this URL to solve captcha if present.
	// Present only when result is VERIFICATION_REQUIRED or ERROR_VERIFICATION_FAILED.
	// If result is ERROR_VERIFICATION_FAILED then either a new URL will be provided or the old one is returned.
	CaptchaUrl string `protobuf:"bytes,4,opt,name=captcha_url,json=captchaUrl,proto3" json:"captcha_url,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_registration_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_registration_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_iam_v2_registration_service_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterResponse) GetResult() RegisterResponse_Result {
	if x != nil {
		return x.Result
	}
	return RegisterResponse_OK
}

func (x *RegisterResponse) GetInvalidElements() []RegisterResponse_RequestElement {
	if x != nil {
		return x.InvalidElements
	}
	return nil
}

func (x *RegisterResponse) GetPolicyViolationElements() []RegisterResponse_RequestElement {
	if x != nil {
		return x.PolicyViolationElements
	}
	return nil
}

func (x *RegisterResponse) GetCaptchaUrl() string {
	if x != nil {
		return x.CaptchaUrl
	}
	return ""
}

var File_iam_v2_registration_service_proto protoreflect.FileDescriptor

var file_iam_v2_registration_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x01, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x22, 0x29, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x01, 0x22, 0xd3, 0x05, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d,
	0x25, 0x05, 0x08, 0x01, 0x20, 0xff, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x20, 0xff, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x08, 0x52, 0x0c,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x00, 0x30, 0x80,
	0x10, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x59, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x19, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d, 0x25,
	0x07, 0x08, 0x00, 0x28, 0x01, 0x30, 0x80, 0x10, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x52, 0x54, 0x48, 0x44, 0x41, 0x59, 0x10,
	0x09, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x4b, 0x45, 0x59, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x10, 0x0b, 0x32, 0xcd, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x13, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x66, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b,
	0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x32, 0x3b, 0x69, 0x61,
	0x6d, 0xa2, 0x02, 0x0e, 0x4b, 0x50, 0x42, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x49, 0x41, 0x4d,
	0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iam_v2_registration_service_proto_rawDescOnce sync.Once
	file_iam_v2_registration_service_proto_rawDescData = file_iam_v2_registration_service_proto_rawDesc
)

func file_iam_v2_registration_service_proto_rawDescGZIP() []byte {
	file_iam_v2_registration_service_proto_rawDescOnce.Do(func() {
		file_iam_v2_registration_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_v2_registration_service_proto_rawDescData)
	})
	return file_iam_v2_registration_service_proto_rawDescData
}

var file_iam_v2_registration_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_iam_v2_registration_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_iam_v2_registration_service_proto_goTypes = []interface{}{
	(ValidateForRegisterResponse_Result)(0),         // 0: mobile.iam.v2.ValidateForRegisterResponse.Result
	(ValidateForRegisterResponse_InvalidElement)(0), // 1: mobile.iam.v2.ValidateForRegisterResponse.InvalidElement
	(RegisterResponse_Result)(0),                    // 2: mobile.iam.v2.RegisterResponse.Result
	(RegisterResponse_RequestElement)(0),            // 3: mobile.iam.v2.RegisterResponse.RequestElement
	(*ValidateForRegisterRequest)(nil),              // 4: mobile.iam.v2.ValidateForRegisterRequest
	(*ValidateForRegisterResponse)(nil),             // 5: mobile.iam.v2.ValidateForRegisterResponse
	(*RegisterRequest)(nil),                         // 6: mobile.iam.v2.RegisterRequest
	(*RegisterResponse)(nil),                        // 7: mobile.iam.v2.RegisterResponse
	(*v2.Email)(nil),                                // 8: common.v2.Email
	(*v2.Username)(nil),                             // 9: common.v2.Username
	(*v21.DeviceDetails)(nil),                       // 10: common.client.v2.DeviceDetails
	(*v21.ClientLocale)(nil),                        // 11: common.client.v2.ClientLocale
	(*v21.ClientVersion)(nil),                       // 12: common.client.v2.ClientVersion
	(*timestamp.Timestamp)(nil),                     // 13: google.protobuf.Timestamp
	(*v21.DeviceInfoEnvelope)(nil),                  // 14: common.client.v2.DeviceInfoEnvelope
}
var file_iam_v2_registration_service_proto_depIdxs = []int32{
	8,  // 0: mobile.iam.v2.ValidateForRegisterRequest.email:type_name -> common.v2.Email
	9,  // 1: mobile.iam.v2.ValidateForRegisterRequest.username:type_name -> common.v2.Username
	0,  // 2: mobile.iam.v2.ValidateForRegisterResponse.result:type_name -> mobile.iam.v2.ValidateForRegisterResponse.Result
	1,  // 3: mobile.iam.v2.ValidateForRegisterResponse.invalid_elements:type_name -> mobile.iam.v2.ValidateForRegisterResponse.InvalidElement
	9,  // 4: mobile.iam.v2.RegisterRequest.username:type_name -> common.v2.Username
	8,  // 5: mobile.iam.v2.RegisterRequest.email:type_name -> common.v2.Email
	10, // 6: mobile.iam.v2.RegisterRequest.device_details:type_name -> common.client.v2.DeviceDetails
	11, // 7: mobile.iam.v2.RegisterRequest.locale:type_name -> common.client.v2.ClientLocale
	12, // 8: mobile.iam.v2.RegisterRequest.version:type_name -> common.client.v2.ClientVersion
	13, // 9: mobile.iam.v2.RegisterRequest.birthday:type_name -> google.protobuf.Timestamp
	14, // 10: mobile.iam.v2.RegisterRequest.device_info_envelope:type_name -> common.client.v2.DeviceInfoEnvelope
	2,  // 11: mobile.iam.v2.RegisterResponse.result:type_name -> mobile.iam.v2.RegisterResponse.Result
	3,  // 12: mobile.iam.v2.RegisterResponse.invalid_elements:type_name -> mobile.iam.v2.RegisterResponse.RequestElement
	3,  // 13: mobile.iam.v2.RegisterResponse.policy_violation_elements:type_name -> mobile.iam.v2.RegisterResponse.RequestElement
	4,  // 14: mobile.iam.v2.Registration.ValidateForRegister:input_type -> mobile.iam.v2.ValidateForRegisterRequest
	6,  // 15: mobile.iam.v2.Registration.Register:input_type -> mobile.iam.v2.RegisterRequest
	5,  // 16: mobile.iam.v2.Registration.ValidateForRegister:output_type -> mobile.iam.v2.ValidateForRegisterResponse
	7,  // 17: mobile.iam.v2.Registration.Register:output_type -> mobile.iam.v2.RegisterResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_iam_v2_registration_service_proto_init() }
func file_iam_v2_registration_service_proto_init() {
	if File_iam_v2_registration_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iam_v2_registration_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateForRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_registration_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateForRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_registration_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_registration_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_v2_registration_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_v2_registration_service_proto_goTypes,
		DependencyIndexes: file_iam_v2_registration_service_proto_depIdxs,
		EnumInfos:         file_iam_v2_registration_service_proto_enumTypes,
		MessageInfos:      file_iam_v2_registration_service_proto_msgTypes,
	}.Build()
	File_iam_v2_registration_service_proto = out.File
	file_iam_v2_registration_service_proto_rawDesc = nil
	file_iam_v2_registration_service_proto_goTypes = nil
	file_iam_v2_registration_service_proto_depIdxs = nil
}
