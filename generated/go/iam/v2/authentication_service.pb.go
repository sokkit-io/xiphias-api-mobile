// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: iam/v2/authentication_service.proto

package iam

import (
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/client/v2"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/session/v2"
	v23 "github.com/sokkit-io/xiphias-model-common/generated/go/tempban/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthenticateResponse_Result int32

const (
	// Authentication succeeded.
	AuthenticateResponse_OK AuthenticateResponse_Result = 0
	// General error response which intentionally does not indicate what portion of the login was invalid.
	// Note that clients should handle the lack of specific error context gracefully, in case this becomes an active
	// security concern.
	AuthenticateResponse_FAILED AuthenticateResponse_Result = 1
	// Authentication failed due to an invalid principal (i.e. unknown username or email, whichever was provided.)
	// Note that this is BAD PRACTICE according to OWASP
	// see: https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Authentication_and_Error_Messages
	AuthenticateResponse_FAILED_UNKNOWN_PRINCIPAL AuthenticateResponse_Result = 2
	// Authentication failed due to the passkey being incorrect.
	// Note that this is also BAD PRACTICE according to OWASP (same link as above)
	AuthenticateResponse_FAILED_INVALID_PASSKEY AuthenticateResponse_Result = 3
	// Client must solve captcha via captcha_url and retry authentication with captcha_solution.
	// This may also result if captcha solution is invalid.
	AuthenticateResponse_FAILED_CAPTCHA_REQUIRED AuthenticateResponse_Result = 4
	// Client account has an active temp ban assigned and must retry once ban has expired.
	AuthenticateResponse_FAILED_TEMP_BAN_ASSIGNED AuthenticateResponse_Result = 5
)

// Enum value maps for AuthenticateResponse_Result.
var (
	AuthenticateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "FAILED",
		2: "FAILED_UNKNOWN_PRINCIPAL",
		3: "FAILED_INVALID_PASSKEY",
		4: "FAILED_CAPTCHA_REQUIRED",
		5: "FAILED_TEMP_BAN_ASSIGNED",
	}
	AuthenticateResponse_Result_value = map[string]int32{
		"OK":                       0,
		"FAILED":                   1,
		"FAILED_UNKNOWN_PRINCIPAL": 2,
		"FAILED_INVALID_PASSKEY":   3,
		"FAILED_CAPTCHA_REQUIRED":  4,
		"FAILED_TEMP_BAN_ASSIGNED": 5,
	}
)

func (x AuthenticateResponse_Result) Enum() *AuthenticateResponse_Result {
	p := new(AuthenticateResponse_Result)
	*p = x
	return p
}

func (x AuthenticateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v2_authentication_service_proto_enumTypes[0].Descriptor()
}

func (AuthenticateResponse_Result) Type() protoreflect.EnumType {
	return &file_iam_v2_authentication_service_proto_enumTypes[0]
}

func (x AuthenticateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticateResponse_Result.Descriptor instead.
func (AuthenticateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{1, 0}
}

type RevokeSessionResponse_Result int32

const (
	RevokeSessionResponse_OK RevokeSessionResponse_Result = 0
)

// Enum value maps for RevokeSessionResponse_Result.
var (
	RevokeSessionResponse_Result_name = map[int32]string{
		0: "OK",
	}
	RevokeSessionResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x RevokeSessionResponse_Result) Enum() *RevokeSessionResponse_Result {
	p := new(RevokeSessionResponse_Result)
	*p = x
	return p
}

func (x RevokeSessionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevokeSessionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v2_authentication_service_proto_enumTypes[1].Descriptor()
}

func (RevokeSessionResponse_Result) Type() protoreflect.EnumType {
	return &file_iam_v2_authentication_service_proto_enumTypes[1]
}

func (x RevokeSessionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevokeSessionResponse_Result.Descriptor instead.
func (RevokeSessionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{3, 0}
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credentials:
	//	*AuthenticateRequest_UsernameCredentials_
	//	*AuthenticateRequest_EmailCredentials_
	Credentials isAuthenticateRequest_Credentials `protobuf_oneof:"credentials"`
	// Types that are assignable to DeviceInfoType:
	//	*AuthenticateRequest_ClientInstanceId
	//	*AuthenticateRequest_DeviceDetails
	DeviceInfoType isAuthenticateRequest_DeviceInfoType `protobuf_oneof:"device_info_type"`
	// Solution to captcha that was previously issued via captcha_url in response.
	CaptchaSolution    string                 `protobuf:"bytes,3,opt,name=captcha_solution,json=captchaSolution,proto3" json:"captcha_solution,omitempty"`
	DeviceInfoEnvelope *v2.DeviceInfoEnvelope `protobuf:"bytes,4,opt,name=device_info_envelope,json=deviceInfoEnvelope,proto3" json:"device_info_envelope,omitempty"`
	// True if this request is due to user logging in (as opposed background session token refresh).
	IsUserLogin bool `protobuf:"varint,5,opt,name=is_user_login,json=isUserLogin,proto3" json:"is_user_login,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_authentication_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_authentication_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{0}
}

func (m *AuthenticateRequest) GetCredentials() isAuthenticateRequest_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *AuthenticateRequest) GetUsernameCredentials() *AuthenticateRequest_UsernameCredentials {
	if x, ok := x.GetCredentials().(*AuthenticateRequest_UsernameCredentials_); ok {
		return x.UsernameCredentials
	}
	return nil
}

func (x *AuthenticateRequest) GetEmailCredentials() *AuthenticateRequest_EmailCredentials {
	if x, ok := x.GetCredentials().(*AuthenticateRequest_EmailCredentials_); ok {
		return x.EmailCredentials
	}
	return nil
}

func (m *AuthenticateRequest) GetDeviceInfoType() isAuthenticateRequest_DeviceInfoType {
	if m != nil {
		return m.DeviceInfoType
	}
	return nil
}

// Deprecated: Marked as deprecated in iam/v2/authentication_service.proto.
func (x *AuthenticateRequest) GetClientInstanceId() *v21.ClientInstanceId {
	if x, ok := x.GetDeviceInfoType().(*AuthenticateRequest_ClientInstanceId); ok {
		return x.ClientInstanceId
	}
	return nil
}

func (x *AuthenticateRequest) GetDeviceDetails() *v2.DeviceDetails {
	if x, ok := x.GetDeviceInfoType().(*AuthenticateRequest_DeviceDetails); ok {
		return x.DeviceDetails
	}
	return nil
}

func (x *AuthenticateRequest) GetCaptchaSolution() string {
	if x != nil {
		return x.CaptchaSolution
	}
	return ""
}

func (x *AuthenticateRequest) GetDeviceInfoEnvelope() *v2.DeviceInfoEnvelope {
	if x != nil {
		return x.DeviceInfoEnvelope
	}
	return nil
}

func (x *AuthenticateRequest) GetIsUserLogin() bool {
	if x != nil {
		return x.IsUserLogin
	}
	return false
}

type isAuthenticateRequest_Credentials interface {
	isAuthenticateRequest_Credentials()
}

type AuthenticateRequest_UsernameCredentials_ struct {
	UsernameCredentials *AuthenticateRequest_UsernameCredentials `protobuf:"bytes,1,opt,name=username_credentials,json=usernameCredentials,proto3,oneof"`
}

type AuthenticateRequest_EmailCredentials_ struct {
	EmailCredentials *AuthenticateRequest_EmailCredentials `protobuf:"bytes,2,opt,name=email_credentials,json=emailCredentials,proto3,oneof"`
}

func (*AuthenticateRequest_UsernameCredentials_) isAuthenticateRequest_Credentials() {}

func (*AuthenticateRequest_EmailCredentials_) isAuthenticateRequest_Credentials() {}

type isAuthenticateRequest_DeviceInfoType interface {
	isAuthenticateRequest_DeviceInfoType()
}

type AuthenticateRequest_ClientInstanceId struct {
	// Deprecated: Use DeviceDetails field instead
	//
	// Deprecated: Marked as deprecated in iam/v2/authentication_service.proto.
	ClientInstanceId *v21.ClientInstanceId `protobuf:"bytes,10,opt,name=client_instance_id,json=clientInstanceId,proto3,oneof"`
}

type AuthenticateRequest_DeviceDetails struct {
	DeviceDetails *v2.DeviceDetails `protobuf:"bytes,11,opt,name=device_details,json=deviceDetails,proto3,oneof"`
}

func (*AuthenticateRequest_ClientInstanceId) isAuthenticateRequest_DeviceInfoType() {}

func (*AuthenticateRequest_DeviceDetails) isAuthenticateRequest_DeviceInfoType() {}

// Note Re: result codes
//
// We have introduced failure responses that contain context about what the failure was.  This context is generally
// considered to be a bad security practice, and we are only introducing it to allow Kik X to match Classic as closely
// as possible.
//
// At some future date we intend to discontinue providing specific failure responses, and only provide the general "FAILED"
// response to clients.  As such, it is recommended that all clients gracefully handle the "FAILED" code, even if they do
// other specialized actions based on the more specific FAILED_* results.
type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AuthenticateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.iam.v2.AuthenticateResponse_Result" json:"result,omitempty"`
	// Clients should use this session token in a header to authenticate subsequent
	// requests
	//
	// Set iff Result == OK
	SessionToken *v22.SessionToken `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// Set iff Result == OK
	AccountId *v21.AccountId `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// TODO: THIS IS NOT MEANT FOR RELEASE
	// JUST FOR MILESTONE ONE
	GenesisPersona *v21.PersonaId `protobuf:"bytes,4,opt,name=genesis_persona,json=genesisPersona,proto3" json:"genesis_persona,omitempty"`
	// Client must use this URL to solve captcha if present.
	// Only present when result is FAILED_CAPTCHA_REQUIRED.
	CaptchaUrl string `protobuf:"bytes,5,opt,name=captcha_url,json=captchaUrl,proto3" json:"captcha_url,omitempty"`
	// Clients use this for when they login with e-mail and need to generate their username-based passkey
	// Set iff Result == OK
	Username *v21.Username `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	// Client account has active temp ban assigned
	// Only present when result is TEMP_BAN_ASSIGNED
	TempBanInfo *v23.TempBanInfo `protobuf:"bytes,7,opt,name=temp_ban_info,json=tempBanInfo,proto3" json:"temp_ban_info,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_authentication_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_authentication_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticateResponse) GetResult() AuthenticateResponse_Result {
	if x != nil {
		return x.Result
	}
	return AuthenticateResponse_OK
}

func (x *AuthenticateResponse) GetSessionToken() *v22.SessionToken {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *AuthenticateResponse) GetAccountId() *v21.AccountId {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *AuthenticateResponse) GetGenesisPersona() *v21.PersonaId {
	if x != nil {
		return x.GenesisPersona
	}
	return nil
}

func (x *AuthenticateResponse) GetCaptchaUrl() string {
	if x != nil {
		return x.CaptchaUrl
	}
	return ""
}

func (x *AuthenticateResponse) GetUsername() *v21.Username {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *AuthenticateResponse) GetTempBanInfo() *v23.TempBanInfo {
	if x != nil {
		return x.TempBanInfo
	}
	return nil
}

type RevokeSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevokeSessionRequest) Reset() {
	*x = RevokeSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_authentication_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSessionRequest) ProtoMessage() {}

func (x *RevokeSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_authentication_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSessionRequest.ProtoReflect.Descriptor instead.
func (*RevokeSessionRequest) Descriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{2}
}

type RevokeSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RevokeSessionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mobile.iam.v2.RevokeSessionResponse_Result" json:"result,omitempty"`
}

func (x *RevokeSessionResponse) Reset() {
	*x = RevokeSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_authentication_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSessionResponse) ProtoMessage() {}

func (x *RevokeSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_authentication_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSessionResponse.ProtoReflect.Descriptor instead.
func (*RevokeSessionResponse) Descriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{3}
}

func (x *RevokeSessionResponse) GetResult() RevokeSessionResponse_Result {
	if x != nil {
		return x.Result
	}
	return RevokeSessionResponse_OK
}

// The set of credentials when a user logs in using their username
type AuthenticateRequest_UsernameCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *v21.Username `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The username-derived passkey as described in https://github.com/sokkit-io/kik-product/wiki/Passkeys
	Passkey []byte `protobuf:"bytes,2,opt,name=passkey,proto3" json:"passkey,omitempty"`
}

func (x *AuthenticateRequest_UsernameCredentials) Reset() {
	*x = AuthenticateRequest_UsernameCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_authentication_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest_UsernameCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest_UsernameCredentials) ProtoMessage() {}

func (x *AuthenticateRequest_UsernameCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_authentication_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest_UsernameCredentials.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest_UsernameCredentials) Descriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AuthenticateRequest_UsernameCredentials) GetUsername() *v21.Username {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *AuthenticateRequest_UsernameCredentials) GetPasskey() []byte {
	if x != nil {
		return x.Passkey
	}
	return nil
}

// The set of credentials when a user logs in user their email address
type AuthenticateRequest_EmailCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email *v21.Email `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// The email-derived passkey as described in https://github.com/sokkit-io/kik-product/wiki/Passkeys
	Passkey []byte `protobuf:"bytes,2,opt,name=passkey,proto3" json:"passkey,omitempty"`
}

func (x *AuthenticateRequest_EmailCredentials) Reset() {
	*x = AuthenticateRequest_EmailCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v2_authentication_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest_EmailCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest_EmailCredentials) ProtoMessage() {}

func (x *AuthenticateRequest_EmailCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v2_authentication_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest_EmailCredentials.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest_EmailCredentials) Descriptor() ([]byte, []int) {
	return file_iam_v2_authentication_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AuthenticateRequest_EmailCredentials) GetEmail() *v21.Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AuthenticateRequest_EmailCredentials) GetPasskey() []byte {
	if x != nil {
		return x.Passkey
	}
	return nil
}

var File_iam_v2_authentication_service_proto protoreflect.FileDescriptor

var file_iam_v2_authentication_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x62, 0x61,
	0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x06, 0x0a, 0x13, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6b, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x62, 0x0a, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x01, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34,
	0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x00,
	0x30, 0x80, 0x10, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x1a, 0x73, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x08, 0x52, 0x07, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x1a, 0x67, 0x0a, 0x10, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05,
	0x08, 0x01, 0x30, 0x80, 0x08, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42, 0x0d,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xd3, 0x04, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0x9d, 0x25, 0x07, 0x08, 0x00, 0x28, 0x01, 0x30, 0x80, 0x10, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x62, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x62, 0x61, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x6e, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x32,
	0xc9, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x0d, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x66, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x32, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x32, 0x3b, 0x69,
	0x61, 0x6d, 0xa2, 0x02, 0x0e, 0x4b, 0x50, 0x42, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x49, 0x41,
	0x4d, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iam_v2_authentication_service_proto_rawDescOnce sync.Once
	file_iam_v2_authentication_service_proto_rawDescData = file_iam_v2_authentication_service_proto_rawDesc
)

func file_iam_v2_authentication_service_proto_rawDescGZIP() []byte {
	file_iam_v2_authentication_service_proto_rawDescOnce.Do(func() {
		file_iam_v2_authentication_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_v2_authentication_service_proto_rawDescData)
	})
	return file_iam_v2_authentication_service_proto_rawDescData
}

var file_iam_v2_authentication_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_iam_v2_authentication_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_iam_v2_authentication_service_proto_goTypes = []interface{}{
	(AuthenticateResponse_Result)(0),                // 0: mobile.iam.v2.AuthenticateResponse.Result
	(RevokeSessionResponse_Result)(0),               // 1: mobile.iam.v2.RevokeSessionResponse.Result
	(*AuthenticateRequest)(nil),                     // 2: mobile.iam.v2.AuthenticateRequest
	(*AuthenticateResponse)(nil),                    // 3: mobile.iam.v2.AuthenticateResponse
	(*RevokeSessionRequest)(nil),                    // 4: mobile.iam.v2.RevokeSessionRequest
	(*RevokeSessionResponse)(nil),                   // 5: mobile.iam.v2.RevokeSessionResponse
	(*AuthenticateRequest_UsernameCredentials)(nil), // 6: mobile.iam.v2.AuthenticateRequest.UsernameCredentials
	(*AuthenticateRequest_EmailCredentials)(nil),    // 7: mobile.iam.v2.AuthenticateRequest.EmailCredentials
	(*v21.ClientInstanceId)(nil),                    // 8: common.v2.ClientInstanceId
	(*v2.DeviceDetails)(nil),                        // 9: common.client.v2.DeviceDetails
	(*v2.DeviceInfoEnvelope)(nil),                   // 10: common.client.v2.DeviceInfoEnvelope
	(*v22.SessionToken)(nil),                        // 11: common.session.v2.SessionToken
	(*v21.AccountId)(nil),                           // 12: common.v2.AccountId
	(*v21.PersonaId)(nil),                           // 13: common.v2.PersonaId
	(*v21.Username)(nil),                            // 14: common.v2.Username
	(*v23.TempBanInfo)(nil),                         // 15: common.tempban.v2.TempBanInfo
	(*v21.Email)(nil),                               // 16: common.v2.Email
}
var file_iam_v2_authentication_service_proto_depIdxs = []int32{
	6,  // 0: mobile.iam.v2.AuthenticateRequest.username_credentials:type_name -> mobile.iam.v2.AuthenticateRequest.UsernameCredentials
	7,  // 1: mobile.iam.v2.AuthenticateRequest.email_credentials:type_name -> mobile.iam.v2.AuthenticateRequest.EmailCredentials
	8,  // 2: mobile.iam.v2.AuthenticateRequest.client_instance_id:type_name -> common.v2.ClientInstanceId
	9,  // 3: mobile.iam.v2.AuthenticateRequest.device_details:type_name -> common.client.v2.DeviceDetails
	10, // 4: mobile.iam.v2.AuthenticateRequest.device_info_envelope:type_name -> common.client.v2.DeviceInfoEnvelope
	0,  // 5: mobile.iam.v2.AuthenticateResponse.result:type_name -> mobile.iam.v2.AuthenticateResponse.Result
	11, // 6: mobile.iam.v2.AuthenticateResponse.session_token:type_name -> common.session.v2.SessionToken
	12, // 7: mobile.iam.v2.AuthenticateResponse.account_id:type_name -> common.v2.AccountId
	13, // 8: mobile.iam.v2.AuthenticateResponse.genesis_persona:type_name -> common.v2.PersonaId
	14, // 9: mobile.iam.v2.AuthenticateResponse.username:type_name -> common.v2.Username
	15, // 10: mobile.iam.v2.AuthenticateResponse.temp_ban_info:type_name -> common.tempban.v2.TempBanInfo
	1,  // 11: mobile.iam.v2.RevokeSessionResponse.result:type_name -> mobile.iam.v2.RevokeSessionResponse.Result
	14, // 12: mobile.iam.v2.AuthenticateRequest.UsernameCredentials.username:type_name -> common.v2.Username
	16, // 13: mobile.iam.v2.AuthenticateRequest.EmailCredentials.email:type_name -> common.v2.Email
	2,  // 14: mobile.iam.v2.Authentication.Authenticate:input_type -> mobile.iam.v2.AuthenticateRequest
	4,  // 15: mobile.iam.v2.Authentication.RevokeSession:input_type -> mobile.iam.v2.RevokeSessionRequest
	3,  // 16: mobile.iam.v2.Authentication.Authenticate:output_type -> mobile.iam.v2.AuthenticateResponse
	5,  // 17: mobile.iam.v2.Authentication.RevokeSession:output_type -> mobile.iam.v2.RevokeSessionResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_iam_v2_authentication_service_proto_init() }
func file_iam_v2_authentication_service_proto_init() {
	if File_iam_v2_authentication_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iam_v2_authentication_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_authentication_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_authentication_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_authentication_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_authentication_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest_UsernameCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v2_authentication_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest_EmailCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iam_v2_authentication_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AuthenticateRequest_UsernameCredentials_)(nil),
		(*AuthenticateRequest_EmailCredentials_)(nil),
		(*AuthenticateRequest_ClientInstanceId)(nil),
		(*AuthenticateRequest_DeviceDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_v2_authentication_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_v2_authentication_service_proto_goTypes,
		DependencyIndexes: file_iam_v2_authentication_service_proto_depIdxs,
		EnumInfos:         file_iam_v2_authentication_service_proto_enumTypes,
		MessageInfos:      file_iam_v2_authentication_service_proto_msgTypes,
	}.Build()
	File_iam_v2_authentication_service_proto = out.File
	file_iam_v2_authentication_service_proto_rawDesc = nil
	file_iam_v2_authentication_service_proto_goTypes = nil
	file_iam_v2_authentication_service_proto_depIdxs = nil
}
